"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[99022],{62727:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"1800-1899/number-of-ways-to-rearrange-sticks-with-k-sticks-visible-hard","title":"1866 - Number of Ways to Rearrange Sticks With K Sticks Visible (Hard)","description":"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/","source":"@site/solutions/1800-1899/1866-number-of-ways-to-rearrange-sticks-with-k-sticks-visible-hard.md","sourceDirName":"1800-1899","slug":"/1800-1899/number-of-ways-to-rearrange-sticks-with-k-sticks-visible-hard","permalink":"/solutions/1800-1899/number-of-ways-to-rearrange-sticks-with-k-sticks-visible-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1800-1899/1866-number-of-ways-to-rearrange-sticks-with-k-sticks-visible-hard.md","tags":[],"version":"current","sidebarPosition":1866,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/"},"sidebar":"tutorialSidebar","previous":{"title":"1859 - Sorting the Sentence (Easy)","permalink":"/solutions/1800-1899/sorting-the-sentence-easy"},"next":{"title":"1899 - Merge Triplets to Form Target Triplet (Medium)","permalink":"/solutions/1800-1899/merge-triplets-to-form-target-triplet-medium"}}');var i=t(74848),s=t(28453);const o={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/"},c="1866 - Number of Ways to Rearrange Sticks With K Sticks Visible (Hard)",l={},a=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"1866---number-of-ways-to-rearrange-sticks-with-k-sticks-visible-hard",children:"1866 - Number of Ways to Rearrange Sticks With K Sticks Visible (Hard)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/",children:"https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["There are ",(0,i.jsx)(n.code,{children:"n"})," uniquely-sized sticks whose lengths are integers from ",(0,i.jsx)(n.code,{children:"1"})," to ",(0,i.jsx)(n.code,{children:"n"}),". You want to arrange the sticks such that ",(0,i.jsx)(n.strong,{children:"exactly"})," ",(0,i.jsx)(n.code,{children:"k"})," sticks are ",(0,i.jsx)(n.strong,{children:"visible"})," from the left. A stick is ",(0,i.jsx)(n.strong,{children:"visible"})," from the left if there are no ",(0,i.jsx)(n.strong,{children:"longer"})," sticks to the ",(0,i.jsx)(n.strong,{children:"left"})," of it."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For example, if the sticks are arranged ",(0,i.jsx)(n.code,{children:"[1,3,2,5,4]"}),", then the sticks with lengths ",(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"3"}),", and ",(0,i.jsx)(n.code,{children:"5"})," are visible from the left."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Given ",(0,i.jsx)(n.code,{children:"n"})," and ",(0,i.jsx)(n.code,{children:"k"}),", return ",(0,i.jsxs)(n.em,{children:["the ",(0,i.jsx)(n.strong,{children:"number"})," of such arrangements"]}),". Since the answer may be large, return it ",(0,i.jsx)(n.strong,{children:"modulo"})," ",(0,i.jsx)(n.code,{children:"10^9 + 7"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: n = 3, k = 2\nOutput: 3\nExplanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: n = 5, k = 5\nOutput: 1\nExplanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: n = 20, k = 11\nOutput: 647427950\nExplanation: There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= n <= 1000"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= k <= n"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-dynamic-programming",children:"Approach 1: Dynamic Programming"}),"\n",(0,i.jsx)(t,{name:"@wingkwong"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int rearrangeSticks(int n, int k) {\n        int M = 1e9 + 7;\n        // let dp[i][j] be the number of such arrangements\n        // for length from 1 to i with exactly j sticks visible from the left\n        vector<vector<int>> dp(n + 1, vector<int>(k + 1, -1));\n        function<int(int,int)> dfs = [&](int i, int j) {\n            // base case\n            if (i < j || j == 0) return 0;\n            // there is one way, i.e. sort those i numbers\n            if (i == j) return 1;\n            // calculated before - return it directly\n            if (dp[i][j] != -1) return dp[i][j];\n            // init res\n            long long res = 0;\n            // if we put the tallest number from the right\n            // then we look for j - 1 sticks visible for i - 1 size\n            res = (res + dfs(i - 1, j - 1)) % M;\n            // if we dont put the tallest one, \n            // we have (i - 1) choices to choose\n            // then we look for j sticks visible i - 1 size\n            res = (res + 1LL * dfs(i - 1, j) * (i - 1) % M) % M;\n            // memoize the result\n            return dp[i][j] = res;\n        };\n        return dfs(n, k);\n    }\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);