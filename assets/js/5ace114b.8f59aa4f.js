"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[96069],{88373:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"2800-2899/maximum-sum-of-almost-unique-subarray-medium","title":"2841 - Maximum Sum of Almost Unique Subarray (Medium)","description":"Author: @wingkwong | https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/","source":"@site/solutions/2800-2899/2841-maximum-sum-of-almost-unique-subarray-medium.md","sourceDirName":"2800-2899","slug":"/2800-2899/maximum-sum-of-almost-unique-subarray-medium","permalink":"/solutions/2800-2899/maximum-sum-of-almost-unique-subarray-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2800-2899/2841-maximum-sum-of-almost-unique-subarray-medium.md","tags":[],"version":"current","sidebarPosition":2841,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/"},"sidebar":"tutorialSidebar","previous":{"title":"2840 - Check if Strings Can be Made Equal With Operations II (Medium)","permalink":"/solutions/2800-2899/check-if-strings-can-be-made-equal-with-operations-ii-medium"},"next":{"title":"2843 - Count Symmetric Integers (Easy)","permalink":"/solutions/2800-2899/count-symmetric-integers-easy"}}');var t=s(74848),r=s(28453);const o={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/"},a="2841 - Maximum Sum of Almost Unique Subarray (Medium)",m={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:s,TabItem:i,Tabs:o}=n;return s||d("SolutionAuthor",!0),i||d("TabItem",!0),o||d("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"2841---maximum-sum-of-almost-unique-subarray-medium",children:"2841 - Maximum Sum of Almost Unique Subarray (Medium)"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/",children:"https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["You are given an integer array ",(0,t.jsx)(n.code,{children:"nums"})," and two positive integers ",(0,t.jsx)(n.code,{children:"m"})," and ",(0,t.jsx)(n.code,{children:"k"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Return ",(0,t.jsxs)(n.em,{children:["the ",(0,t.jsx)(n.strong,{children:"maximum sum"})," out of all ",(0,t.jsx)(n.strong,{children:"almost unique"})," subarrays of length"]}),(0,t.jsx)(n.code,{children:"k"}),(0,t.jsx)(n.em,{children:"of"})," ",(0,t.jsx)(n.code,{children:"nums"}),". If no such subarray exists, return ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A subarray of ",(0,t.jsx)(n.code,{children:"nums"})," is ",(0,t.jsx)(n.strong,{children:"almost unique"})," if it contains at least ",(0,t.jsx)(n.code,{children:"m"})," distinct elements."]}),"\n",(0,t.jsxs)(n.p,{children:["A subarray is a contiguous ",(0,t.jsx)(n.strong,{children:"non-empty"})," sequence of elements within an array."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: nums = [2,6,7,3,1,7], m = 3, k = 4\nOutput: 18\nExplanation: There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: nums = [5,9,9,2,4,5,4], m = 1, k = 3\nOutput: 23\nExplanation: There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: nums = [1,2,1,2,1,2,1], m = 3, k = 3\nOutput: 0\nExplanation: There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= nums.length <= 2 * 10 ^ 4"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= m <= k <= nums.length"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= nums[i] <= 10 ^ 9"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"approach-1-sliding-window",children:"Approach 1: Sliding Window"}),"\n",(0,t.jsx)(o,{children:(0,t.jsxs)(i,{value:"cpp",label:"C++",children:[(0,t.jsx)(s,{name:"@wingkwong"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    long long maxSum(vector<int>& nums, int m, int k) {\n        long long ans = 0, sum = 0;\n        // count the frequency of each number\n        unordered_map<int, int> cnt;\n        // cater the first window\n        for (int i = 0; i < k; i++) sum += nums[i], cnt[nums[i]]++;\n        // if it has at least m distinct elements, set the ans\n        if ((int) cnt.size() >= m) ans = sum;\n        // having a fixed size window - now sliding to the right\n        for (int i = k; i < nums.size(); i++) {\n            // add nums[i] to the window, and update sum\n            cnt[nums[i]]++, sum += nums[i];\n            // nums[i - k] is out of the window, if it is 0, remove from the map\n            if (--cnt[nums[i - k]] == 0) cnt.erase(nums[i - k]);\n            // nums[i - k] is out of the window, substract from the sum \n            sum -= nums[i - k];\n            // check if it has at least m distinct elements, set the ans\n            if ((int) cnt.size() >= m) ans = max(ans, sum);\n        }\n        return ans;\n    }\n};\n"})})]})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);