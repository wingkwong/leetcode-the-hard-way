"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[59851],{61948:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"2300-2399/build-a-matrix-with-conditions-hard","title":"2392 - Build a Matrix With Conditions (Hard)","description":"Author: @wkw | https://leetcode.com/problems/build-a-matrix-with-conditions/","source":"@site/solutions/2300-2399/2392-build-a-matrix-with-conditions-hard.md","sourceDirName":"2300-2399","slug":"/2300-2399/build-a-matrix-with-conditions-hard","permalink":"/solutions/2300-2399/build-a-matrix-with-conditions-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2392-build-a-matrix-with-conditions-hard.md","tags":[],"version":"current","sidebarPosition":2392,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/build-a-matrix-with-conditions/"},"sidebar":"tutorialSidebar","previous":{"title":"2384 - Largest Palindromic Number (Medium)","permalink":"/solutions/2300-2399/largest-palindromic-number-medium"},"next":{"title":"2400 - 2499","permalink":"/solutions/category/2400---2499"}}');var o=i(86070),r=i(68906);const s={description:"Author: @wkw | https://leetcode.com/problems/build-a-matrix-with-conditions/"},d="2392 - Build a Matrix With Conditions (Hard)",l={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Kahn&#39;s Algorithm",id:"approach-1-kahns-algorithm",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"2392---build-a-matrix-with-conditions-hard",children:"2392 - Build a Matrix With Conditions (Hard)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["You are given a ",(0,o.jsx)(n.strong,{children:"positive"})," integer ",(0,o.jsx)(n.code,{children:"k"}),". You are also given:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["a 2D integer array ",(0,o.jsx)(n.code,{children:"rowConditions"})," of size ",(0,o.jsx)(n.code,{children:"n"})," where ",(0,o.jsx)(n.code,{children:"rowConditions[i] = [abovei, belowi]"}),", and"]}),"\n",(0,o.jsxs)(n.li,{children:["a 2D integer array ",(0,o.jsx)(n.code,{children:"colConditions"})," of size ",(0,o.jsx)(n.code,{children:"m"})," where ",(0,o.jsx)(n.code,{children:"colConditions[i] = [lefti, righti]"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The two arrays contain integers from ",(0,o.jsx)(n.code,{children:"1"})," to ",(0,o.jsx)(n.code,{children:"k"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["You have to build a ",(0,o.jsx)(n.code,{children:"k x k"})," matrix that contains each of the numbers from ",(0,o.jsx)(n.code,{children:"1"})," to ",(0,o.jsx)(n.code,{children:"k"})," ",(0,o.jsx)(n.strong,{children:"exactly once"}),". The remaining cells should have the value ",(0,o.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The matrix should also satisfy the following conditions:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The number ",(0,o.jsx)(n.code,{children:"abovei"})," should appear in a ",(0,o.jsx)(n.strong,{children:"row"})," that is strictly ",(0,o.jsx)(n.strong,{children:"above"})," the row at which the number ",(0,o.jsx)(n.code,{children:"belowi"})," appears for all ",(0,o.jsx)(n.code,{children:"i"})," from ",(0,o.jsx)(n.code,{children:"0"})," to ",(0,o.jsx)(n.code,{children:"n - 1"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["The number ",(0,o.jsx)(n.code,{children:"lefti"})," should appear in a ",(0,o.jsx)(n.strong,{children:"column"})," that is strictly ",(0,o.jsx)(n.strong,{children:"left"})," of the column at which the number ",(0,o.jsx)(n.code,{children:"righti"})," appears for all ",(0,o.jsx)(n.code,{children:"i"})," from ",(0,o.jsx)(n.code,{children:"0"})," to ",(0,o.jsx)(n.code,{children:"m - 1"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Return ",(0,o.jsx)(n.strong,{children:"*any"})," matrix that satisfies the conditions*. If no answer exists, return an empty matrix."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]\nOutput: [[3,0,0],[0,0,1],[0,2,0]]\nExplanation: The diagram above shows a valid example of a matrix that satisfies all the conditions.\nThe row conditions are the following:\n- Number 1 is in row 1, and number 2 is in row 2, so 1 is above 2 in the matrix.\n- Number 3 is in row 0, and number 2 is in row 2, so 3 is above 2 in the matrix.\nThe column conditions are the following:\n- Number 2 is in column 1, and number 1 is in column 2, so 2 is left of 1 in the matrix.\n- Number 3 is in column 0, and number 2 is in column 1, so 3 is left of 2 in the matrix.\nNote that there may be multiple correct answers.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]\nOutput: []\nExplanation: From the first two conditions, 3 has to be below 1 but the third conditions needs 3 to be above 1 to be satisfied.\nNo matrix can satisfy all the conditions, so we return the empty matrix.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"2 <= k <= 400"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= rowConditions.length, colConditions.length <= 10^4"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"rowConditions[i].length == colConditions[i].length == 2"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= abovei, belowi, lefti, righti <= k"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"abovei != belowi"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"lefti != righti"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-kahns-algorithm",children:"Approach 1: Kahn's Algorithm"}),"\n",(0,o.jsx)(i,{name:"@wkw"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    // there is at least one vertex in the \u201cgraph\u201d with an \u201cin-degree\u201d of 0.\n    // if all vertices in the \u201cgraph\u201d have non-zero \u201cin-degree\u201d,\n    // then all vertices need at least one vertex as a predecessor.\n    // In this case, no vertex can serve as the starting vertex.\n    template<typename T_vector, typename T_vector_vector>\n      T_vector kahn(int n, T_vector_vector &edges){\n          vector<int> ordering, indegree(n, 0);\n          vector<vector<int> > g(n);\n          for (auto e : edges) {\n            --e[0], --e[1];\n            indegree[e[1]]++;\n            g[e[0]].push_back(e[1]);\n          }\n          queue<int> q;\n          for (int i = 0; i < n; i++) if (indegree[i] == 0) q.push(i);\n          int visited = 0;\n          while (!q.empty()) {\n            int u = q.front(); q.pop();\n            ordering.push_back(u);\n            visited++;\n            for (auto v : g[u]) {\n              if (--indegree[v] == 0) q.push(v);\n            }\n          }\n          if (visited != n) return T_vector{};\n          return ordering;\n      }\n\n    // the idea is to topologically sort rowConditions & colConditions\n    // then build the final matrix based on the order if possible\n    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {\n        vector<vector<int>> ans(k, vector<int>(k));\n        // in example 1, rowOrders would be [1, 3, 2]\n        vector<int> rowOrders = kahn<vector<int>>(k, rowConditions);\n        // in example 1, colOrders would be [3, 2, 1]\n        vector<int> colOrders = kahn<vector<int>>(k, colConditions);\n        // since we need to map to a `k x k` matrix,\n        // we need to make sure that both got exact k elements\n        if ((int) rowOrders.size() == k && (int) colOrders.size() == k) {\n            // used to map the index of the given row / col value\n            // i.e. given the value, which row / col idx should it belong to\n            vector<int> rowIdx(k), colIdx(k);\n            for (int i = 0; i < k; i++) rowIdx[rowOrders[i]] = i, colIdx[colOrders[i]] = i;\n            // update the final matrix\n            for (int i = 0; i < k; i++) ans[rowIdx[i]][colIdx[i]] = i + 1;\n            return ans;\n        }\n        // else we don't have a matrix that satisfies the conditions\n        return vector<vector<int>>{};\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},68906:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var t=i(30758);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);