"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[80003],{95332:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"0000-0099/unique-paths-medium","title":"0062 - Unique Paths (Medium)","description":"Author: @wkw, @ganajayant, @radojicic23 | https://leetcode.com/problems/unique-paths/","source":"@site/solutions/0000-0099/0062-unique-paths-medium.md","sourceDirName":"0000-0099","slug":"/0000-0099/unique-paths-medium","permalink":"/solutions/0000-0099/unique-paths-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0062-unique-paths-medium.md","tags":[{"inline":true,"label":"Math","permalink":"/solutions/tags/math"},{"inline":true,"label":"Dynamic Programming","permalink":"/solutions/tags/dynamic-programming"},{"inline":true,"label":"Combinatorics","permalink":"/solutions/tags/combinatorics"}],"version":"current","sidebarPosition":62,"frontMatter":{"description":"Author: @wkw, @ganajayant, @radojicic23 | https://leetcode.com/problems/unique-paths/","tags":["Math","Dynamic Programming","Combinatorics"]},"sidebar":"tutorialSidebar","previous":{"title":"0061 - Rotate List (Medium)","permalink":"/solutions/0000-0099/rotate-list-medium"},"next":{"title":"0063 - Unique Paths II (Medium)","permalink":"/solutions/0000-0099/unique-paths-ii-medium"}}');var t=s(86070),i=s(68906);const r={description:"Author: @wkw, @ganajayant, @radojicic23 | https://leetcode.com/problems/unique-paths/",tags:["Math","Dynamic Programming","Combinatorics"]},o="0062 - Unique Paths (Medium)",l={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1 : Math",id:"approach-1--math",level:2},{value:"Approach 2: Dynamic programming (Top Down) Memoization",id:"approach-2-dynamic-programming-top-down-memoization",level:2},{value:"Approach 3: Dynamic programming (Bottom Up)",id:"approach-3-dynamic-programming-bottom-up",level:2}];function c(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:s,TabItem:a,Tabs:r}=n;return s||d("SolutionAuthor",!0),a||d("TabItem",!0),r||d("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"0062---unique-paths-medium",children:"0062 - Unique Paths (Medium)"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/unique-paths/",children:"https://leetcode.com/problems/unique-paths/"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["There is a robot on an ",(0,t.jsx)(n.code,{children:"m x n"})," grid. The robot is initially located at the ",(0,t.jsx)(n.strong,{children:"top-left corner"})," (i.e., ",(0,t.jsx)(n.code,{children:"grid[0][0]"}),"). The robot tries to move to the ",(0,t.jsx)(n.strong,{children:"bottom-right corner"})," (i.e., ",(0,t.jsx)(n.code,{children:"grid[m - 1][n - 1]"}),"). The robot can only move either down or right at any point in time."]}),"\n",(0,t.jsxs)(n.p,{children:["Given the two integers ",(0,t.jsx)(n.code,{children:"m"})," and ",(0,t.jsx)(n.code,{children:"n"}),", return ",(0,t.jsx)(n.em,{children:"the number of possible unique paths that the robot can take to reach the bottom-right corner"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The test cases are generated so that the answer will be less than or equal to ",(0,t.jsx)(n.code,{children:"2 * 10^9"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png",alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: m = 3, n = 7\nOutput: 28\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= m, n <= 100"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"approach-1--math",children:"Approach 1 : Math"}),"\n",(0,t.jsxs)(n.p,{children:["We need to make ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"n"}),(0,t.jsx)(n.mo,{children:"\u2212"}),(0,t.jsx)(n.mn,{children:"1"}),(0,t.jsx)(n.mo,{children:"+"}),(0,t.jsx)(n.mi,{children:"m"}),(0,t.jsx)(n.mo,{children:"\u2212"}),(0,t.jsx)(n.mn,{children:"1"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"n - 1 + m - 1"})]})})}),(0,t.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(n.span,{className:"mord",children:"1"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(n.span,{className:"mbin",children:"+"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(n.span,{className:"mord",children:"1"})]})]})]})," steps in total. How many ways to choose from ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"m"}),(0,t.jsx)(n.mo,{children:"\u2212"}),(0,t.jsx)(n.mn,{children:"1"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"m - 1"})]})})}),(0,t.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(n.span,{className:"mord",children:"1"})]})]})]})," right steps and ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"n"}),(0,t.jsx)(n.mo,{children:"\u2212"}),(0,t.jsx)(n.mn,{children:"1"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"n - 1"})]})})}),(0,t.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(n.span,{className:"mord",children:"1"})]})]})]})," down steps out of the total steps?"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(a,{value:"c++",label:"C++",children:[(0,t.jsx)(s,{name:"@wkw"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    template <typename T>\n    T binomial(int64_t N, int64_t K) {\n      if (K < 0 || N < K) return 0;\n      T ret = 1;\n      for (T i = 1; i <= K; ++i) {\n        ret *= N--;\n        ret /= i;\n      }\n      return ret;\n    }\n\n    int uniquePaths(int m, int n) {\n        return binomial<long long>(m + n - 2, min(m - 1, n - 1));\n    }\n};\n"})})]}),(0,t.jsxs)(a,{value:"java",label:"Java",children:[(0,t.jsx)(s,{name:"@wkw"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int uniquePaths(int m, int n) {\n        long ans = 1, x = m + n - 2, k = Math.min(n - 1, m - 1);\n        for (int i = 1; i <= k; i++) {\n            ans *= x;\n            x -= 1;\n            ans /= i;\n        }\n        return (int) ans;\n    }\n}\n"})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"approach-2-dynamic-programming-top-down-memoization",children:"Approach 2: Dynamic programming (Top Down) Memoization"}),"\n",(0,t.jsx)(n.p,{children:"We begin with the position (0,0). At any position (i,j), we make a recursive call to (i+1,j) and (i,j+1) to get the number of paths to the right and below the current node. If (i,j) goes out of bound, there can exist no path from it so we simply return 0. If we reach (n-1,m-1), we have found a path and so in this case we return 1."}),"\n",(0,t.jsx)(n.p,{children:"We are using memoization to store already computed value so it will reduce runtime by just accessing the already computed value"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(a,{value:"java",label:"Java",children:[(0,t.jsx)(s,{name:"@ganajayant"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'class Solution {\n    HashMap<String, Integer> hm = new HashMap<String, Integer>();\n    public int uniquePaths(int m, int n) {\n        String search = Integer.toString(m) + "#" + Integer.toString(n);\n        if (hm.containsKey(search)) {\n            return hm.get(search);\n        } else if (m == 1 && n == 1) {\n            return 1;\n        } else if (m == 0 || n == 0) {\n            return 0;\n        } else {\n            hm.put(search, uniquePaths(m - 1, n) + uniquePaths(m, n - 1));\n            return hm.get(search);\n        }\n    }\n}\n'})})]}),(0,t.jsxs)(a,{value:"python",label:"Python",children:[(0,t.jsx)(s,{name:"@ColeB2"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"class Solution:\n    # Time Complexity: O(m*n)\n    # Space Complexity: O(m*n)\n    # We are going to traverse all the unique paths, and store the values\n    # of these number of unique paths at each cell in our cache.\n    # Slight difference, we can start at m,n and traverse towards 0,0\n    # to get the same result, which allows us to reuse the function\n    # as our recursive function.\n    cache = {}\n    def uniquePaths(self, m: int, n: int) -> int:\n        # Already calculate values for (m,n) before, reuse those.\n        if (m,n) in self.cache:\n            return self.cache[(m,n)]\n        # If we reach 1, for m or n, that is our base case.\n        if m == 1 or n == 1:\n            # set our answer to 1\n            unique_paths = 1\n        else:\n            # any other case, set current value to bottom + right cell\n            # or in our case since we are starting bottom right, set the\n            # current value to be the top + left cells.\n            unique_paths = self.uniquePaths(m - 1, n) + self.uniquePaths(m, n - 1)\n        # cache our result for unique_path we got whether it was 1\n        # or something we solved, to use for later.\n        self.cache[(m,n)] = unique_paths\n        return unique_paths\n"})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"approach-3-dynamic-programming-bottom-up",children:"Approach 3: Dynamic programming (Bottom Up)"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(a,{value:"python",label:"Python",children:[(0,t.jsx)(s,{name:"@radojicic23"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Time Complexity: O(n * m)\n# Space Complexity: O(n)\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        row = [1] * n\n        # go through all rows exept the last one\n        for i in range(m - 1):\n            new_row = [1] * n\n            # go through every column except the right most column\n            # because the last value in every row is 1\n            # start at second to last position and\n            # keep going until we get to the beginning (reverse order)\n            for j in range(n - 2, -1, -1):\n                # right value + value below\n                new_row[j] = new_row[j + 1] + row[j]\n            # update the row\n            row = new_row\n        return row[0]\n"})})]}),(0,t.jsxs)(a,{value:"js",label:"JavaScript",children:[(0,t.jsx)(s,{name:"@radojicic23"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  let row = Array(n).fill(1);\n  // go through every column except last one\n  for (let i = 0; i < m - 1; i++) {\n    let new_row = Array(n).fill(1);\n    // go through every column except the right most column\n    // because the last value in every row is 1\n    // start at second to last position and\n    // keep going until we get to the beginning (reverse order)\n    for (j = n - 2; j >= 0; j--) {\n      // right value + value before\n      new_row[j] = new_row[j + 1] + row[j];\n    }\n    // update row\n    row = new_row;\n  }\n  return row[0];\n};\n"})})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var a=s(30758);const t={},i=a.createContext(t);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);