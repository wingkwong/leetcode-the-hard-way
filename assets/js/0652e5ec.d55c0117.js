"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[55450],{50270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"1100-1199/optimize-water-distribution-in-a-village-hard","title":"1168 - Optimize Water Distribution in a Village (Hard)","description":"Author: @wkw | https://leetcode.com/problems/optimize-water-distribution-in-a-village/","source":"@site/solutions/1100-1199/1168-optimize-water-distribution-in-a-village-hard.md","sourceDirName":"1100-1199","slug":"/1100-1199/optimize-water-distribution-in-a-village-hard","permalink":"/solutions/1100-1199/optimize-water-distribution-in-a-village-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1100-1199/1168-optimize-water-distribution-in-a-village-hard.md","tags":[],"version":"current","sidebarPosition":1168,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/optimize-water-distribution-in-a-village/"},"sidebar":"tutorialSidebar","previous":{"title":"1162 - As Far from Land as Possible (Medium)","permalink":"/solutions/1100-1199/as-far-from-land-as-possible-medium"},"next":{"title":"1200 - 1299","permalink":"/solutions/category/1200---1299"}}');var s=t(86070),o=t(40629);const r={description:"Author: @wkw | https://leetcode.com/problems/optimize-water-distribution-in-a-village/"},l="1168 - Optimize Water Distribution in a Village (Hard)",a={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: <strong>Kruskal&#39;s Algorithm</strong>",id:"approach-1-kruskals-algorithm",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"1168---optimize-water-distribution-in-a-village-hard",children:"1168 - Optimize Water Distribution in a Village (Hard)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/optimize-water-distribution-in-a-village/",children:"https://leetcode.com/problems/optimize-water-distribution-in-a-village/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["There are ",(0,s.jsx)(n.code,{children:"n"})," houses in a village. We want to supply water for all the houses by building wells and laying pipes."]}),"\n",(0,s.jsxs)(n.p,{children:["For each house ",(0,s.jsx)(n.code,{children:"i"}),", we can either build a well inside it directly with cost ",(0,s.jsx)(n.code,{children:"wells[i - 1]"})," (note the ",(0,s.jsx)(n.code,{children:"-1"})," due to ",(0,s.jsx)(n.strong,{children:"0-indexing"}),"), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array ",(0,s.jsx)(n.code,{children:"pipes"})," where each ",(0,s.jsx)(n.code,{children:"pipes[j] = [house1j, house2j, costj]"})," represents the cost to connect ",(0,s.jsx)(n.code,{children:"house1j"})," and ",(0,s.jsx)(n.code,{children:"house2j"})," together using a pipe. Connections are bidirectional, and there could be multiple valid connections between the same two houses with different costs."]}),"\n",(0,s.jsxs)(n.p,{children:["Return ",(0,s.jsx)(n.em,{children:"the minimum total cost to supply water to all houses"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2019/05/22/1359_ex1.png",alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]\nOutput: 3\nExplanation: The image shows the costs of connecting houses using pipes.\nThe best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: n = 2, wells = [1,1], pipes = [[1,2,1],[1,2,2]]\nOutput: 2\nExplanation: We can supply water with cost two using one of the three options:\nOption 1:\n  - Build a well inside house 1 with cost 1.\n  - Build a well inside house 2 with cost 1.\nThe total cost will be 2.\nOption 2:\n  - Build a well inside house 1 with cost 1.\n  - Connect house 2 with house 1 with cost 1.\nThe total cost will be 2.\nOption 3:\n  - Build a well inside house 2 with cost 1.\n  - Connect house 1 with house 2 with cost 1.\nThe total cost will be 2.\nNote that we can connect houses 1 and 2 with cost 1 or with cost 2 but we will always choose the cheapest option.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"2 <= n <= 10^4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"wells.length == n"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"0 <= wells[i] <= 1e5"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= pipes.length <= 10^4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pipes[j].length == 3"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= house1j, house2j <= n"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"0 <= costj <= 1e5"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"house1j != house2j"})}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"approach-1-kruskals-algorithm",children:["Approach 1: ",(0,s.jsx)(n.strong,{children:"Kruskal's Algorithm"})]}),"\n",(0,s.jsxs)(n.p,{children:["If we add a new house, says house 0, and connect it to each houses with weight ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"w"}),(0,s.jsx)(n.mi,{children:"e"}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"s"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"["}),(0,s.jsx)(n.mi,{children:"i"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"]"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"wells[i]"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02691em"},children:"w"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"ll"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,s.jsx)(n.span,{className:"mopen",children:"["}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"i"}),(0,s.jsx)(n.span,{className:"mclose",children:"]"})]})})]}),". Then this problem is actually same as finding Minimum Spanning Tree. Hence, we can use Kruskal's Algorithm with DSU to solve it."]}),"\n",(0,s.jsx)(n.p,{children:"In order to get the MST, we sort the edges based on the weights in an increasing order. Then we iterate them one by one, and greedily pick edges which does not result in cycle with the previous edges."}),"\n",(0,s.jsx)(t,{name:"@wkw"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class dsu {\n public:\n  vector<int> root, rank;\n  int n;\n  int cnt;\n\n  dsu(int _n) : n(_n) {\n    root.resize(n);\n    rank.resize(n);\n    for(int i = 0; i < n; i++) {\n        root[i] = i;\n        rank[i] = 1;\n    }\n    cnt = n;\n  }\n\n  inline int getCount() { return cnt; }\n\n  inline int get(int x) { return (x == root[x] ? x : (root[x] = get(root[x]))); }\n\n  inline bool unite(int x, int y) {\n    x = get(x);\n    y = get(y);\n    if (x != y) {\n        if (rank[x] > rank[y]) {\n            root[y] = x;\n        } else if (rank[x] < rank[y]) {\n            root[x] = y;\n        } else {\n            root[y] = x;\n            rank[x] += 1;\n        }\n        cnt--;\n      return true;\n    }\n    return false;\n  }\n};\n\nclass Solution {\npublic:\n    int minCostToSupplyWater(int n, vector<int>& wells, vector<vector<int>>& pipes) {\n        vector<array<int, 3>> edges;\n        for (int i = 0; i < wells.size(); i++) edges.push_back({wells[i], 0, i + 1});\n        for (auto x : pipes) edges.push_back({x[2], x[0], x[1]});\n        sort(edges.begin(), edges.end());\n        dsu d(n + 1);\n        int ans = 0;\n        for (auto x : edges) {\n            if (d.unite(x[1], x[2])) {\n                ans += x[0];\n            }\n        }\n        return ans;\n    }\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},40629:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(30758);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);