"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[59917],{28226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"2400-2499/number-of-good-paths-hard","title":"2421 - Number of Good Paths (Hard)","description":"Author: @wkw | https://leetcode.com/problems/number-of-good-paths/","source":"@site/solutions/2400-2499/2421-number-of-good-paths-hard.md","sourceDirName":"2400-2499","slug":"/2400-2499/number-of-good-paths-hard","permalink":"/solutions/2400-2499/number-of-good-paths-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2421-number-of-good-paths-hard.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Tree","permalink":"/solutions/tags/tree"},{"inline":true,"label":"Union Find","permalink":"/solutions/tags/union-find"},{"inline":true,"label":"Graph","permalink":"/solutions/tags/graph"}],"version":"current","sidebarPosition":2421,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/number-of-good-paths/","tags":["Array","Tree","Union Find","Graph"]},"sidebar":"tutorialSidebar","previous":{"title":"2420 - Find All Good Indices (Medium)","permalink":"/solutions/2400-2499/find-all-good-indices-medium"},"next":{"title":"2425 - Bitwise XOR of All Pairings (Medium)","permalink":"/solutions/2400-2499/bitwise-xor-of-all-pairs-medium"}}');var s=t(86070),i=t(40629);const r={description:"Author: @wkw | https://leetcode.com/problems/number-of-good-paths/",tags:["Array","Tree","Union Find","Graph"]},a="2421 - Number of Good Paths (Hard)",l={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DSU",id:"approach-1-dsu",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:t,TabItem:o,Tabs:r}=n;return t||x("SolutionAuthor",!0),o||x("TabItem",!0),r||x("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"2421---number-of-good-paths-hard",children:"2421 - Number of Good Paths (Hard)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-good-paths/",children:"https://leetcode.com/problems/number-of-good-paths/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["There is a tree (i.e. a connected, undirected graph with no cycles) consisting of ",(0,s.jsx)(n.code,{children:"n"})," nodes numbered from ",(0,s.jsx)(n.code,{children:"0"})," to ",(0,s.jsx)(n.code,{children:"n - 1"})," and exactly ",(0,s.jsx)(n.code,{children:"n - 1"})," edges."]}),"\n",(0,s.jsxs)(n.p,{children:["You are given a ",(0,s.jsx)(n.strong,{children:"0-indexed"})," integer array ",(0,s.jsx)(n.code,{children:"vals"})," of length ",(0,s.jsx)(n.code,{children:"n"})," where ",(0,s.jsx)(n.code,{children:"vals[i]"})," denotes the value of the ",(0,s.jsx)(n.code,{children:"ith"})," node. You are also given a 2D integer array ",(0,s.jsx)(n.code,{children:"edges"})," where ",(0,s.jsx)(n.code,{children:"edges[i] = [ai, bi]"})," denotes that there exists an ",(0,s.jsx)(n.strong,{children:"undirected"})," edge connecting nodes ",(0,s.jsx)(n.code,{children:"ai"})," and ",(0,s.jsx)(n.code,{children:"bi"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"good path"})," is a simple path that satisfies the following conditions:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The starting node and the ending node have the ",(0,s.jsx)(n.strong,{children:"same"})," value."]}),"\n",(0,s.jsxs)(n.li,{children:["All nodes between the starting node and the ending node have values ",(0,s.jsx)(n.strong,{children:"less than or equal to"})," the starting node (i.e. the starting node's value should be the maximum value along the path)."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Return ",(0,s.jsx)(n.em,{children:"the number of distinct good paths"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that a path and its reverse are counted as the ",(0,s.jsx)(n.strong,{children:"same"})," path. For example, ",(0,s.jsx)(n.code,{children:"0 -> 1"})," is considered to be the same as ",(0,s.jsx)(n.code,{children:"1 -> 0"}),". A single node is also considered as a valid path."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]\nOutput: 6\nExplanation: There are 5 good paths consisting of a single node.\nThere is 1 additional good path: 1 -> 0 -> 2 -> 4.\n(The reverse path 4 -> 2 -> 0 -> 1 is treated as the same as 1 -> 0 -> 2 -> 4.)\nNote that 0 -> 2 -> 3 is not a good path because vals[2] > vals[0].\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]\nOutput: 7\nExplanation: There are 5 good paths consisting of a single node.\nThere are 2 additional good paths: 0 -> 1 and 2 -> 3.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: vals = [1], edges = []\nOutput: 1\nExplanation: The tree consists of only one node, so there is one good path.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"n == vals.length"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= n <= 3 * 10^4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"0 <= vals[i] <= 1e5"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"edges.length == n - 1"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"edges[i].length == 2"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"0 <= ai, bi < n"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ai != bi"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"edges"})," represents a valid tree."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-dsu",children:"Approach 1: DSU"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsxs)(o,{value:"cpp",label:"C++",children:[(0,s.jsx)(t,{name:"@wkw"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    // dsu\n    vector<int> root;\n    int get(int x) {\n        return x == root[x] ? x : (root[x] = get(root[x]));\n    }\n    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {\n        // each node is a good path\n        int n = vals.size(), ans = n;\n        vector<int> cnt(n, 1);\n        root.resize(n);\n        // each element is in its own group initially\n        for (int i = 0; i < n; i++) root[i] = i;\n        // sort by vals\n        sort(edges.begin(), edges.end(), [&](const vector<int>& x, const vector<int>& y) {\n           return max(vals[x[0]], vals[x[1]]) < max(vals[y[0]], vals[y[1]]);\n        });\n        // iterate each edge\n        for (auto e : edges) {\n            int x = e[0], y = e[1];\n            // get the root of x\n            x = get(x);\n            // get the root of y\n            y = get(y);\n            // if their vals are same,\n            if (vals[x] == vals[y]) {\n                // then there would be cnt[x] * cnt[y] good paths\n                ans += cnt[x] * cnt[y];\n                // unite them\n                root[x] = y;\n                // add the count of x to that of y\n                cnt[y] += cnt[x];\n            } else if (vals[x] > vals[y]) {\n                // unite them\n                root[y] = x;\n            } else {\n                // unite them\n                root[x] = y;\n            }\n        }\n        return ans;\n    }\n};\n\n// [3,2]\n// [1,2,3]\n\n// 3 - 1 - 2 - 3\n// 3 - 2 - 3\n// 3 - 2 - 1 - 3\n// 3 - 2 - 2 - 3\n// 3 - 2 - 1 - 2 - 3\n// 3 - 3\n// good paths += cnt[x] * cnt[y]\n"})})]}),(0,s.jsxs)(o,{value:"java",label:"Java",children:[(0,s.jsx)(t,{name:"@wkw"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    // dsu\n    int[] root;\n    int[] cnt;\n    int get(int x) {\n        return x == root[x] ? x : (root[x] = get(root[x]));\n    }\n\n    public int numberOfGoodPaths(int[] vals, int[][] edges) {\n        // each node is a good path\n        int n = vals.length, ans = n;\n        cnt = new int[n];\n        root = new int[n];\n        // each element is in its own group initially\n        for (int i = 0; i < n; i++) {\n            root[i] = i;\n            cnt[i] = 1;\n        }\n        // sort by vals\n        List<int[]> edgesList = new ArrayList<>();\n        for(int i = 0; i < edges.length; i++) edgesList.add(edges[i]);\n        Collections.sort(edgesList, new Comparator<int[]>() {\n            public int compare(int[] x, int[] y) {\n                int a = Math.max(vals[x[0]], vals[x[1]]);\n                int b = Math.max(vals[y[0]], vals[y[1]]);\n                if(a < b) return -1;\n                else if(a > b) return 1;\n                else return 0;\n            }\n        });\n\n        // iterate each edge\n        for (int[] e : edgesList) {\n            int x = e[0], y = e[1];\n            // get the root of x\n            x = get(x);\n            // get the root of y\n            y = get(y);\n            // if their vals are same,\n            if (vals[x] == vals[y]) {\n                // then there would be cnt[x] * cnt[y] good paths\n                ans += cnt[x] * cnt[y];\n                // unite them\n                root[x] = y;\n                // add the count of x to that of y\n                cnt[y] += cnt[x];\n            } else if (vals[x] > vals[y]) {\n                // unite them\n                root[y] = x;\n            } else {\n                // unite them\n                root[x] = y;\n            }\n        }\n        return ans;\n    }\n}\n"})})]}),(0,s.jsxs)(o,{value:"py",label:"Python",children:[(0,s.jsx)(t,{name:"@wkw"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"class Solution:\n    def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -> int:\n        n = len(vals)\n        # each node is a good path\n        ans = n\n        # sort by vals\n        edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n\n        # dsu\n        cnt = [1] * n\n        root = [i for i in range(n)]\n        def get(x):\n            # recursively get the root element\n            if x == root[x]:\n                return x\n            else:\n                root[x] = get(root[x])\n                return root[x]\n\n        # iterate each edge\n        for x, y in edges:\n            # get the root of x\n            x = get(x)\n            # get the root of y\n            y = get(y)\n            # if their vals are same\n            if vals[x] == vals[y]:\n                # then there would be cnt[x] * cnt[y] good paths\n                ans += cnt[x] * cnt[y]\n                # unite them\n                root[x] = y\n                # add the count of x to that of y\n                cnt[y] += cnt[x]\n            elif vals[x] > vals[y]:\n                # unite them\n                root[y] = x\n            else:\n                # unite them\n                root[x] = y\n        return ans\n\n"})})]}),(0,s.jsxs)(o,{value:"rs",label:"Rust",children:[(0,s.jsx)(t,{name:"@wkw"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rs",children:"use std::cmp::max;\n\nimpl Solution {\n    pub fn number_of_good_paths(vals: Vec<i32>, edges: Vec<Vec<i32>>) -> i32 {\n        let n = vals.len();\n        // each node is a good path\n        let mut ans = n as i32;\n        let mut edges = edges;\n        // sort by vals\n        edges.sort_by(|x, y| max(vals[x[0] as usize], vals[x[1] as usize]).cmp(&max(vals[y[0] as usize], vals[y[1] as usize])));\n\n        // dsu\n        let mut cnt = vec![1; n];\n        // each element is in its own group initially\n        let mut root = (0 .. n).collect();\n        fn get(x: usize, root: &mut Vec<usize>) -> usize {\n            if x == root[x] {\n                return x;\n            }\n            return get(root[x], root);\n        }\n        // iterate each edge\n        for e in edges {\n            // get the root of x\n            let x = get(e[0] as usize, &mut root);\n            // get the root of y\n            let y = get(e[1] as usize, &mut root);\n            // if their vals are same,\n            if vals[x] == vals[y] {\n                // then there would be cnt[x] * cnt[y] good paths\n                ans += cnt[x] as i32 * cnt[y] as i32;\n                // unite them\n                root[x] = y;\n                // add the count of x to that of y\n                cnt[y] += cnt[x];\n            } else if vals[x] > vals[y] {\n                // unite them\n                root[y] = x;\n            } else {\n                // unite them\n                root[x] = y;\n            }\n        }\n        ans\n    }\n}\n"})})]})]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(30758);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);