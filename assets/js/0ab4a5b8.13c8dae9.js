"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[18652],{12918:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"graph-theory","title":"Graph Theory","description":"Graph Templates","source":"@site/templates/graph-theory.md","sourceDirName":".","slug":"/graph-theory","permalink":"/templates/graph-theory","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/graph-theory.md","tags":[],"version":"current","frontMatter":{"title":"Graph Theory","description":"Graph Templates","hide_table_of_contents":false,"keywords":["leetcode","template","graph","algorithm","bellman ford","dijkstra","topological sort"]},"sidebar":"tutorialSidebar","previous":{"title":"Fenwick Tree","permalink":"/templates/fenwick-tree"},"next":{"title":"Linked List","permalink":"/templates/linked-list"}}');var o=r(86070),i=r(40629);const s={title:"Graph Theory",description:"Graph Templates",hide_table_of_contents:!1,keywords:["leetcode","template","graph","algorithm","bellman ford","dijkstra","topological sort"]},a=void 0,l={},d=[{value:"Tree Traversal",id:"tree-traversal",level:3},{value:"Preorder traversal",id:"preorder-traversal",level:4},{value:"Inorder traversal",id:"inorder-traversal",level:4},{value:"Postorder traversal",id:"postorder-traversal",level:4},{value:"Breadth First Search",id:"breadth-first-search",level:3},{value:"Bellman Ford Algorithm",id:"bellman-ford-algorithm",level:3},{value:"Dijkstra",id:"dijkstra",level:3},{value:"Topological Sorting",id:"topological-sorting",level:3},{value:"Kahn&#39;s Algorithm",id:"kahns-algorithm",level:3},{value:"Disjoin Set Union (DSU)",id:"disjoin-set-union-dsu",level:3}];function h(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components},{SolutionAuthor:r,TabItem:t,Tabs:s}=n;return r||p("SolutionAuthor",!0),t||p("TabItem",!0),s||p("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"tree-traversal",children:"Tree Traversal"}),"\n",(0,o.jsxs)(n.p,{children:["Please refer the ",(0,o.jsx)(n.a,{href:"../tutorials/graph-theory/binary-tree#traversal",children:"tutorial"})," guide for more details."]}),"\n",(0,o.jsx)(n.h4,{id:"preorder-traversal",children:"Preorder traversal"}),"\n",(0,o.jsx)(n.p,{children:"First visit the root,then traverse the left sub-tree and then traverse the right sub-tree."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"void preorder(TreeNode* node) {\n    if (node == NULL) return;\n    // do something with node.val here\n    preorder(node->left);\n    preorder(node->right);\n}\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"def preorder(node):\n    if(node == None): return\n    # do something with node.val here\n    preorder(node.left)\n    preorder(node.right)\n"})})})]}),"\n",(0,o.jsx)(n.h4,{id:"inorder-traversal",children:"Inorder traversal"}),"\n",(0,o.jsx)(n.p,{children:"First traverse the left sub-tree,then visit the root and then traverse the right sub-tree."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"void inorder(TreeNode* node) {\n    if (node == NULL) return;\n    inorder(node->left);\n    // do something with node.val here\n    inorder(node->right);\n}\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"def inorder(node):\n    if(node == None): return\n    inorder(node.left)\n    # do something with node.val here\n    inorder(node.right)\n"})})})]}),"\n",(0,o.jsx)(n.h4,{id:"postorder-traversal",children:"Postorder traversal"}),"\n",(0,o.jsx)(n.p,{children:"First traverse the left sub-tree,then traverse the right sub-tree and then visit the root."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"void postorder(TreeNode* node) {\n    if (node == NULL) return;\n    postorder(node->left);\n    postorder(node->right);\n    // do something with node.val here\n}\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"def postorder(node):\n    if(node == None): return\n    postorder(node.left)\n    postorder(node.right)\n    # do something with node.val here\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"breadth-first-search",children:"Breadth First Search"}),"\n",(0,o.jsx)(n.p,{children:"In Breadth First Search, we explore all the closest nodes first before going one step further."}),"\n",(0,o.jsxs)(n.p,{children:["Please refer the ",(0,o.jsx)(n.a,{href:"../tutorials/graph-theory/breadth-first-search",children:"tutorial"})," guide for more details."]}),"\n",(0,o.jsx)(s,{children:(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"def findTargetNode(root, targetValue):\n    if(root is None):\n        return None\n    currentLevel = [root]\n    while(len(level) > 0):\n        nextLevel = []\n        for node in currentLevel:\n            if(node is None):\n                continue\n            if(node.val == targetValue):\n                return node\n            nextLevel.append(node.left)\n            nextLevel.append(node.right)\n        currentLevel = nextLevel\n    return None\n"})})})}),"\n",(0,o.jsx)(n.h3,{id:"bellman-ford-algorithm",children:"Bellman Ford Algorithm"}),"\n",(0,o.jsx)(n.p,{children:"Bellman Ford Algorithm computes shortest paths from a single source vertex to all of the other vertices in a weighted directed graph."}),"\n",(0,o.jsxs)(n.p,{children:["Please refer the ",(0,o.jsx)(n.a,{href:"../tutorials/graph-theory/bellman-ford-algorithm",children:"tutorial"})," guide for more details."]}),"\n",(0,o.jsx)(s,{children:(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"template<typename T_a3, typename T_vector>\nvoid bellman_ford(T_a3 &g, T_vector &dist, int src, int mx_edges) {\n    dist[src] = 0;\n    for (int i = 0; i <= mx_edges; i++) {\n        T_vector ndist = dist;\n        for (auto x : g) {\n            auto [from, to, cost] = x;\n            ndist[to] = min(ndist[to], dist[from] + cost);\n        }\n        dist = ndist;\n    }\n}\n"})})})}),"\n",(0,o.jsx)(n.h3,{id:"dijkstra",children:"Dijkstra"}),"\n",(0,o.jsx)(n.p,{children:"Dijkstra's Algorithm is used to find the shortest paths between nodes in a graph."}),"\n",(0,o.jsxs)(n.p,{children:["Please refer the ",(0,o.jsx)(n.a,{href:"../tutorials/graph-theory/dijkstra",children:"tutorial"})," guide for more details."]}),"\n",(0,o.jsx)(s,{children:(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"template<typename T_pair, typename T_vector>\nvoid dijkstra(T_pair &g, T_vector &dist, int start) {\n  priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n  dist[start] = 0;\n  pq.push({start, 0});\n  while (!pq.empty()) {\n    auto [u_node, u_cost] = pq.top(); pq.pop();\n    if (u_cost > dist[u_node]) continue;\n    for (auto [v_node, v_cost] : g[u_node]) {\n      if (dist[v_node] > dist[u_node] + v_cost) {\n        dist[v_node] = dist[u_node] + v_cost;\n        pq.push({v_node, dist[v_node]});\n      }\n    }\n  }\n}\n"})})})}),"\n",(0,o.jsx)(n.h3,{id:"topological-sorting",children:"Topological Sorting"}),"\n",(0,o.jsx)(n.p,{children:"Topological Sorting is a linear ordering of its vertices such that for every directed edge (u,v) from vertex u to vertex v, u come before v in the ordering."}),"\n",(0,o.jsxs)(n.p,{children:["Please refer the ",(0,o.jsx)(n.a,{href:"../tutorials/graph-theory/topological-sorting",children:"tutorial"})," guide for more details."]}),"\n",(0,o.jsx)(s,{children:(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"struct TopologicalSort {\n    int n;\n    vector<int> indegree;\n    vector<int> orders;\n    vector<vector<int>> G;\n    bool isTopologicalSorted = false;\n    int steps = 0;\n    int nodes = 0;\n\n    TopologicalSort(vector<vector<int>>& g, vector<int>& in) {\n        G = g;\n        n = (int) G.size();\n        indegree = in;\n\n        int res = 0;\n        queue<int> q;\n        for(int i = 0; i < n; i++) {\n            if(indegree[i] == 0) {\n                q.push(i);\n            }\n        }\n        while(!q.empty()) {\n            int sz = q.size();\n            steps += 1;\n            nodes += q.size();\n            for (int i = 0; i < sz; i++) {\n                auto u = q.front(); q.pop();\n                orders.push_back(u);\n                for(auto v : G[u]) {\n                    if(--indegree[v] == 0) {\n                        q.push(v);\n                    }\n                }\n            }\n        }\n        isTopologicalSorted = nodes == n;\n    }\n};\n"})})})}),"\n",(0,o.jsx)(n.h3,{id:"kahns-algorithm",children:"Kahn's Algorithm"}),"\n",(0,o.jsx)(n.p,{children:"Kahn's Algorithm is a classical algorithm in computer science that is used for topological sorting of directed acyclic graphs (DAGs)."}),"\n",(0,o.jsxs)(n.p,{children:["Please refer the ",(0,o.jsx)(n.a,{href:"../tutorials/graph-theory/kahns-algorithm",children:"tutorial"})," guide for more details."]}),"\n",(0,o.jsx)(s,{children:(0,o.jsxs)(t,{value:"cpp",label:"C++",children:[(0,o.jsx)(r,{name:"@wkw"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"template<typename T_vector, typename T_vector_vector>\nT_vector kahn(int n, T_vector_vector &edges){\n    vector<int> ordering, indegree(n, 0);\n    vector<vector<int> > g(n);\n    for (auto e : edges) {\n      --e[0], --e[1];\n      indegree[e[1]]++;\n      g[e[0]].push_back(e[1]);\n    }\n    queue<int> q;\n    for (int i = 0; i < n; i++) {\n      if (indegree[i] == 0) {\n      q.push(i);\n      }\n    }\n    int visited = 0;\n    while (!q.empty()) {\n      int u = q.front(); q.pop();\n      ordering.push_back(u);\n      visited++;\n      for (auto v : g[u]) {\n        if (--indegree[v] == 0) q.push(v);\n      }\n    }\n    if (visited != n) return T_vector{};\n    reverse(ordering.begin(), ordering.end());\n    return ordering;\n}\n"})})]})}),"\n",(0,o.jsx)(n.h3,{id:"disjoin-set-union-dsu",children:"Disjoin Set Union (DSU)"}),"\n",(0,o.jsx)(n.p,{children:"Disjoint Set Union is a data structure that allows us to combine any two sets into one."}),"\n",(0,o.jsxs)(n.p,{children:["Please refer the ",(0,o.jsx)(n.a,{href:"../tutorials/graph-theory/disjoint-set-union",children:"tutorial"})," guide for more details."]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"class dsu {\n public:\n  vector<int> root, rank;\n  int n;\n  int cnt;\n\n  dsu(int _n) : n(_n) {\n    root.resize(n);\n    rank.resize(n);\n    for(int i = 0; i < n; i++) {\n        root[i] = i;\n        rank[i] = 1;\n    }\n    cnt = n;\n  }\n\n  inline int getCount() { return cnt; }\n\n  inline int get(int x) { return (x == root[x] ? x : (root[x] = get(root[x]))); }\n\n  inline bool unite(int x, int y) {\n    x = get(x);\n    y = get(y);\n    if (x != y) {\n        if (rank[x] > rank[y]) {\n            root[y] = x;\n        } else if (rank[x] < rank[y]) {\n            root[x] = y;\n        } else {\n            root[y] = x;\n            rank[x] += 1;\n        }\n        cnt--;\n      return true;\n    }\n    return false;\n  }\n};\n"})})}),(0,o.jsx)(t,{value:"kt",label:"Kotlin",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kt",children:"private class DSU(private val n: Int) {\n    private val parent = IntArray(n) { it }\n    private val rank = IntArray(n)\n\n    fun find(x: Int): Int {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x])\n        }\n        return parent[x]\n    }\n\n    fun unite(x: Int, y: Int): Boolean {\n        val rootX = find(x)\n        val rootY = find(y)\n        if (rootX == rootY) return false\n        if (rank[rootX] < rank[rootY]) {\n            parent[rootX] = rootY\n        } else if (rank[rootX] > rank[rootY]) {\n            parent[rootY] = rootX\n        } else {\n            parent[rootX] = rootY\n            rank[rootY]++\n        }\n        return true\n    }\n}\n"})})})]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(30758);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);