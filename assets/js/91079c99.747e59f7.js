"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[7320],{28542:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"2200-2299/longest-path-with-different-adjacent-characters-hard","title":"2246 - Longest Path With Different Adjacent Characters (Hard)","description":"Author: @wkw | https://leetcode.com/problems/longest-path-with-different-adjacent-characters/","source":"@site/solutions/2200-2299/2246-longest-path-with-different-adjacent-characters-hard.md","sourceDirName":"2200-2299","slug":"/2200-2299/longest-path-with-different-adjacent-characters-hard","permalink":"/solutions/2200-2299/longest-path-with-different-adjacent-characters-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2246-longest-path-with-different-adjacent-characters-hard.md","tags":[],"version":"current","sidebarPosition":2246,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/longest-path-with-different-adjacent-characters/"},"sidebar":"tutorialSidebar","previous":{"title":"2244 - Minimum Rounds to Complete All Tasks (Medium)","permalink":"/solutions/2200-2299/minimum-rounds-to-complete-all-tasks-medium"},"next":{"title":"2248 - Intersection of Multiple Arrays (Easy)","permalink":"/solutions/2200-2299/intersection-of-multiple-arrays-easy"}}');var o=t(86070),r=t(40629);const a={description:"Author: @wkw | https://leetcode.com/problems/longest-path-with-different-adjacent-characters/"},i="2246 - Longest Path With Different Adjacent Characters (Hard)",c={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:t,TabItem:s,Tabs:a}=n;return t||p("SolutionAuthor",!0),s||p("TabItem",!0),a||p("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"2246---longest-path-with-different-adjacent-characters-hard",children:"2246 - Longest Path With Different Adjacent Characters (Hard)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/longest-path-with-different-adjacent-characters/",children:"https://leetcode.com/problems/longest-path-with-different-adjacent-characters/"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["You are given a ",(0,o.jsx)(n.strong,{children:"tree"})," (i.e. a connected, undirected graph that has no cycles) ",(0,o.jsx)(n.strong,{children:"rooted"})," at node ",(0,o.jsx)(n.code,{children:"0"})," consisting of ",(0,o.jsx)(n.code,{children:"n"})," nodes numbered from ",(0,o.jsx)(n.code,{children:"0"})," to ",(0,o.jsx)(n.code,{children:"n - 1"}),". The tree is represented by a ",(0,o.jsx)(n.strong,{children:"0-indexed"})," array ",(0,o.jsx)(n.code,{children:"parent"})," of size ",(0,o.jsx)(n.code,{children:"n"}),", where ",(0,o.jsx)(n.code,{children:"parent[i]"})," is the parent of node ",(0,o.jsx)(n.code,{children:"i"}),". Since node ",(0,o.jsx)(n.code,{children:"0"})," is the root, ",(0,o.jsx)(n.code,{children:"parent[0] == -1"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["You are also given a string ",(0,o.jsx)(n.code,{children:"s"})," of length ",(0,o.jsx)(n.code,{children:"n"}),", where ",(0,o.jsx)(n.code,{children:"s[i]"})," is the character assigned to node ",(0,o.jsx)(n.code,{children:"i"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Return ",(0,o.jsxs)(n.em,{children:["the length of the ",(0,o.jsx)(n.strong,{children:"longest path"})," in the tree such that no pair of ",(0,o.jsx)(n.strong,{children:"adjacent"})," nodes on the path have the same character assigned to them."]})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2022/03/25/testingdrawio.png",alt:""})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: parent = [-1,0,0,1,1,2], s = "abacbe"\nOutput: 3\nExplanation: The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions.\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2022/03/25/graph2drawio.png",alt:""})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: parent = [-1,0,0,0], s = "aabc"\nOutput: 3\nExplanation: The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"n == parent.length == s.length"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= n <= 10^5"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"0 <= parent[i] <= n - 1"})," for all ",(0,o.jsx)(n.code,{children:"i >= 1"})]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"parent[0] == -1"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"parent"})," represents a valid tree."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"s"})," consists of only lowercase English letters."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-dfs",children:"Approach 1: DFS"}),"\n",(0,o.jsx)(n.p,{children:"The first observation is that node can have at most two longest chains from child nodes. If a node have more than two chains, we only need to take the longest two."}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsxs)(s,{value:"cpp",label:"C++",children:[(0,o.jsx)(t,{name:"@wkw"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// observation:\n// a node can have at most two longest chains from child nodes\n// if a node have more than two chains, take the longest two\n// i.e. one parent node + longest + second longest\n\nclass Solution {\npublic:\n    int longestPath(vector<int>& parent, string s) {\n        int ans = 0, n = parent.size();\n        vector<vector<int>> g(n);\n        // build the graph\n        for (int i = 0; i < n; i++) {\n            if (parent[i] ^ -1) {\n                g[parent[i]].push_back(i);\n            }\n        }\n        function<int(int)> dfs = [&](int u) {\n            // store the longest one and the second longest\n            int longest = 0, secondLongest = 0;\n            for (auto v : g[u]) {\n                // calculate the value first\n                int val = dfs(v);\n                // if their charachters are not same\n                if (s[u] ^ s[v]) {\n                    // then find out longest & secondLongest\n                    if (val > secondLongest) secondLongest = val;\n                    if (secondLongest > longest) swap(longest, secondLongest);\n                }\n            }\n            // update ans\n            // the value would be longest + secondLongest + 1, i.e.\n            // the length of both chain (longest & secondLongest) + itself\n            ans = max(ans, longest + secondLongest + 1);\n            // take the longest one plus itself\n            return longest + 1;\n        };\n        // 0 must be the root\n        dfs(0);\n        return ans;\n    }\n};\n"})})]}),(0,o.jsxs)(s,{value:"py",label:"Python",children:[(0,o.jsx)(t,{name:"@wkw"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        ans = 0\n        n = len(parent)\n        g = [[] for _ in range(n)]\n        # build the graph\n        for i in range(n):\n            if parent[i] != -1:\n                g[parent[i]].append(i)\n\n        def dfs(u):\n            nonlocal ans\n            # store the longest one and the second longest\n            longest = 0\n            secondLongest = 0\n            for v in g[u]:\n                # calculate the value first\n                val = dfs(v)\n                # if their charachters are not same\n                if s[u] != s[v]:\n                    # then find out longest & secondLongest\n                    if val > secondLongest:\n                        secondLongest = val\n                    if secondLongest > longest:\n                        longest, secondLongest = secondLongest, longest\n\n            # update ans\n            # the value would be longest + secondLongest + 1, i.e.\n            # the length of both chain (longest & secondLongest) + itself\n            ans = max(ans, longest + secondLongest + 1)\n            # take the longest one plus itself\n            return longest + 1\n\n        # 0 must be the root\n        dfs(0)\n        return ans\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(30758);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);