"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[47048],{44110:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>o,frontMatter:()=>a,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"0000-0099/merge-k-sorted-lists-hard","title":"0023 - Merge k Sorted Lists (Hard)","description":"Author: @wkw, @rahulvarma5297, @radojicic23 | https://leetcode.com/problems/merge-k-sorted-lists/","source":"@site/solutions/0000-0099/0023-merge-k-sorted-lists-hard.md","sourceDirName":"0000-0099","slug":"/0000-0099/merge-k-sorted-lists-hard","permalink":"/solutions/0000-0099/merge-k-sorted-lists-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0023-merge-k-sorted-lists-hard.md","tags":[{"inline":true,"label":"Linked List","permalink":"/solutions/tags/linked-list"},{"inline":true,"label":"Divide and Conquer","permalink":"/solutions/tags/divide-and-conquer"},{"inline":true,"label":"Heap (Priority Queue)","permalink":"/solutions/tags/heap-priority-queue"},{"inline":true,"label":"Merge Sort","permalink":"/solutions/tags/merge-sort"}],"version":"current","sidebarPosition":23,"frontMatter":{"description":"Author: @wkw, @rahulvarma5297, @radojicic23 | https://leetcode.com/problems/merge-k-sorted-lists/","tags":["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},"sidebar":"tutorialSidebar","previous":{"title":"0022 - Generate Parentheses (Medium)","permalink":"/solutions/0000-0099/generate-parentheses-medium"},"next":{"title":"0024 - Swap Nodes in Pairs (Medium)","permalink":"/solutions/0000-0099/swap-nodes-in-pairs-medium"}}');var l=n(86070),i=n(40629);const a={description:"Author: @wkw, @rahulvarma5297, @radojicic23 | https://leetcode.com/problems/merge-k-sorted-lists/",tags:["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},r="0023 - Merge k Sorted Lists (Hard)",c={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Divide and Conquer",id:"approach-1-divide-and-conquer",level:2}];function d(s){const e={a:"a",annotation:"annotation",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...s.components},{SolutionAuthor:n,TabItem:t,Tabs:a}=e;return n||h("SolutionAuthor",!0),t||h("TabItem",!0),a||h("Tabs",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"0023---merge-k-sorted-lists-hard",children:"0023 - Merge k Sorted Lists (Hard)"})}),"\n",(0,l.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.a,{href:"https://leetcode.com/problems/merge-k-sorted-lists/",children:"https://leetcode.com/problems/merge-k-sorted-lists/"})}),"\n",(0,l.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,l.jsxs)(e.p,{children:["You are given an array of ",(0,l.jsx)(e.code,{children:"k"})," linked-lists ",(0,l.jsx)(e.code,{children:"lists"}),", each linked-list is sorted in ascending order."]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.em,{children:"Merge all the linked-lists into one sorted linked-list and return it."})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"Input: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"Input: lists = []\nOutput: []\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"Input: lists = [[]]\nOutput: []\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"k == lists.length"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"0 <= k <= 10^4"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"0 <= lists[i].length <= 500"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"-10^4 <= lists[i][j] <= 10^4"})}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"lists[i]"})," is sorted in ",(0,l.jsx)(e.strong,{children:"ascending order"}),"."]}),"\n",(0,l.jsxs)(e.li,{children:["The sum of ",(0,l.jsx)(e.code,{children:"lists[i].length"})," won't exceed ",(0,l.jsx)(e.code,{children:"10^4"}),"."]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"approach-1-divide-and-conquer",children:"Approach 1: Divide and Conquer"}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["It is recommended to solve ",(0,l.jsx)(e.a,{href:"merge-two-sorted-lists-easy",children:"0021 - Merge Two Sorted Lists (Easy)"})," first."]}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["We can directly use the solution from ",(0,l.jsx)(e.a,{href:"merge-two-sorted-lists-easy",children:"0021 - Merge Two Sorted Lists (Easy)"})," to solve this problem because merging K sorted lists is same as merging two sorted lists ",(0,l.jsxs)(e.span,{className:"katex",children:[(0,l.jsx)(e.span,{className:"katex-mathml",children:(0,l.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(e.semantics,{children:[(0,l.jsxs)(e.mrow,{children:[(0,l.jsx)(e.mi,{children:"l"}),(0,l.jsx)(e.mi,{children:"o"}),(0,l.jsxs)(e.msub,{children:[(0,l.jsx)(e.mi,{children:"g"}),(0,l.jsx)(e.mn,{children:"2"})]}),(0,l.jsx)(e.mi,{children:"k"})]}),(0,l.jsx)(e.annotation,{encoding:"application/x-tex",children:"log_2k"})]})})}),(0,l.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(e.span,{className:"base",children:[(0,l.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,l.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,l.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,l.jsxs)(e.span,{className:"mord",children:[(0,l.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,l.jsx)(e.span,{className:"msupsub",children:(0,l.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,l.jsxs)(e.span,{className:"vlist-r",children:[(0,l.jsx)(e.span,{className:"vlist",style:{height:"0.3011em"},children:(0,l.jsxs)(e.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,l.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,l.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,l.jsx)(e.span,{className:"mord mtight",children:"2"})})]})}),(0,l.jsx)(e.span,{className:"vlist-s",children:"\u200b"})]}),(0,l.jsx)(e.span,{className:"vlist-r",children:(0,l.jsx)(e.span,{className:"vlist",style:{height:"0.15em"},children:(0,l.jsx)(e.span,{})})})]})})]}),(0,l.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]})," times."]}),"\n",(0,l.jsxs)(e.p,{children:["The idea is to merge the ",(0,l.jsxs)(e.span,{className:"katex",children:[(0,l.jsx)(e.span,{className:"katex-mathml",children:(0,l.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(e.semantics,{children:[(0,l.jsx)(e.mrow,{children:(0,l.jsx)(e.mi,{children:"k"})}),(0,l.jsx)(e.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,l.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(e.span,{className:"base",children:[(0,l.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,l.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]})," lists into ",(0,l.jsxs)(e.span,{className:"katex",children:[(0,l.jsx)(e.span,{className:"katex-mathml",children:(0,l.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(e.semantics,{children:[(0,l.jsxs)(e.mrow,{children:[(0,l.jsx)(e.mi,{children:"k"}),(0,l.jsx)(e.mi,{mathvariant:"normal",children:"/"}),(0,l.jsx)(e.mn,{children:"2"})]}),(0,l.jsx)(e.annotation,{encoding:"application/x-tex",children:"k / 2"})]})})}),(0,l.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(e.span,{className:"base",children:[(0,l.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,l.jsx)(e.span,{className:"mord",children:"/2"})]})})]}),", then ",(0,l.jsxs)(e.span,{className:"katex",children:[(0,l.jsx)(e.span,{className:"katex-mathml",children:(0,l.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(e.semantics,{children:[(0,l.jsxs)(e.mrow,{children:[(0,l.jsx)(e.mi,{children:"k"}),(0,l.jsx)(e.mi,{mathvariant:"normal",children:"/"}),(0,l.jsx)(e.mn,{children:"4"})]}),(0,l.jsx)(e.annotation,{encoding:"application/x-tex",children:"k / 4"})]})})}),(0,l.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(e.span,{className:"base",children:[(0,l.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,l.jsx)(e.span,{className:"mord",children:"/4"})]})})]}),", ",(0,l.jsxs)(e.span,{className:"katex",children:[(0,l.jsx)(e.span,{className:"katex-mathml",children:(0,l.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(e.semantics,{children:[(0,l.jsxs)(e.mrow,{children:[(0,l.jsx)(e.mi,{children:"k"}),(0,l.jsx)(e.mi,{mathvariant:"normal",children:"/"}),(0,l.jsx)(e.mn,{children:"8"})]}),(0,l.jsx)(e.annotation,{encoding:"application/x-tex",children:"k / 8"})]})})}),(0,l.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(e.span,{className:"base",children:[(0,l.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,l.jsx)(e.span,{className:"mord",children:"/8"})]})})]})," and so on. Therefore, we merge the pairs",(0,l.jsxs)(e.span,{className:"katex",children:[(0,l.jsx)(e.span,{className:"katex-mathml",children:(0,l.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(e.semantics,{children:[(0,l.jsxs)(e.mrow,{children:[(0,l.jsx)(e.mo,{stretchy:"false",children:"("}),(0,l.jsx)(e.mn,{children:"0"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mn,{children:"1"}),(0,l.jsx)(e.mo,{stretchy:"false",children:")"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mo,{stretchy:"false",children:"("}),(0,l.jsx)(e.mn,{children:"2"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mn,{children:"3"}),(0,l.jsx)(e.mo,{stretchy:"false",children:")"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mo,{stretchy:"false",children:"("}),(0,l.jsx)(e.mn,{children:"4"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mn,{children:"5"}),(0,l.jsx)(e.mo,{stretchy:"false",children:")"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mo,{stretchy:"false",children:"("}),(0,l.jsx)(e.mn,{children:"6"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mn,{children:"7"}),(0,l.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,l.jsx)(e.annotation,{encoding:"application/x-tex",children:"(0, 1), (2,3), (4,5),(6,7)"})]})})}),(0,l.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(e.span,{className:"base",children:[(0,l.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(e.span,{className:"mopen",children:"("}),(0,l.jsx)(e.span,{className:"mord",children:"0"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mord",children:"1"}),(0,l.jsx)(e.span,{className:"mclose",children:")"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mopen",children:"("}),(0,l.jsx)(e.span,{className:"mord",children:"2"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mord",children:"3"}),(0,l.jsx)(e.span,{className:"mclose",children:")"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mopen",children:"("}),(0,l.jsx)(e.span,{className:"mord",children:"4"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mord",children:"5"}),(0,l.jsx)(e.span,{className:"mclose",children:")"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mopen",children:"("}),(0,l.jsx)(e.span,{className:"mord",children:"6"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mord",children:"7"}),(0,l.jsx)(e.span,{className:"mclose",children:")"})]})})]}),", then ",(0,l.jsxs)(e.span,{className:"katex",children:[(0,l.jsx)(e.span,{className:"katex-mathml",children:(0,l.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(e.semantics,{children:[(0,l.jsxs)(e.mrow,{children:[(0,l.jsx)(e.mo,{stretchy:"false",children:"("}),(0,l.jsx)(e.mn,{children:"0"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mn,{children:"2"}),(0,l.jsx)(e.mo,{stretchy:"false",children:")"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mo,{stretchy:"false",children:"("}),(0,l.jsx)(e.mn,{children:"4"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mn,{children:"6"}),(0,l.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,l.jsx)(e.annotation,{encoding:"application/x-tex",children:"(0, 2), (4,6)"})]})})}),(0,l.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(e.span,{className:"base",children:[(0,l.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(e.span,{className:"mopen",children:"("}),(0,l.jsx)(e.span,{className:"mord",children:"0"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mord",children:"2"}),(0,l.jsx)(e.span,{className:"mclose",children:")"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mopen",children:"("}),(0,l.jsx)(e.span,{className:"mord",children:"4"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mord",children:"6"}),(0,l.jsx)(e.span,{className:"mclose",children:")"})]})})]}),", then ",(0,l.jsxs)(e.span,{className:"katex",children:[(0,l.jsx)(e.span,{className:"katex-mathml",children:(0,l.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(e.semantics,{children:[(0,l.jsxs)(e.mrow,{children:[(0,l.jsx)(e.mo,{stretchy:"false",children:"("}),(0,l.jsx)(e.mn,{children:"0"}),(0,l.jsx)(e.mo,{separator:"true",children:","}),(0,l.jsx)(e.mn,{children:"4"}),(0,l.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,l.jsx)(e.annotation,{encoding:"application/x-tex",children:"(0, 4)"})]})})}),(0,l.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(e.span,{className:"base",children:[(0,l.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(e.span,{className:"mopen",children:"("}),(0,l.jsx)(e.span,{className:"mord",children:"0"}),(0,l.jsx)(e.span,{className:"mpunct",children:","}),(0,l.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(e.span,{className:"mord",children:"4"}),(0,l.jsx)(e.span,{className:"mclose",children:")"})]})})]})," and get the final result."]}),"\n",(0,l.jsxs)(a,{children:[(0,l.jsxs)(t,{value:"cpp",label:"C++",children:[(0,l.jsx)(n,{name:"@wkw"}),(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *mergeKLists(vector<ListNode*> &lists) {\n        if (lists.size() == 0) return nullptr;\n        while (lists.size() > 1) {\n            vector<ListNode *> nlists;\n            for (int i = 0; i < lists.size(); i += 2) {\n                ListNode* l = lists[i];\n                ListNode* r = i + 1 < lists.size() ? lists[i + 1] : nullptr;\n                ListNode* merged = mergeTwoLists(l, r);\n                nlists.push_back(merged);\n            }\n            lists = nlists;\n        }\n        return lists[0];\n    }\n\n    // Solution from 0021 - Merge Two Sorted Lists (Easy)\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        if (list1 == nullptr) return list2;\n        else if (list2 == nullptr) return list1;\n        else if (list1->val < list2->val) {\n            list1->next = mergeTwoLists(list1->next, list2);\n            return list1;\n        } else {\n            list2->next = mergeTwoLists(list2->next, list1);\n            return list2;\n        }\n    }\n};\n"})})]}),(0,l.jsxs)(t,{value:"java",label:"Java",children:[(0,l.jsx)(n,{name:"@rahulvarma5297"}),(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-java",children:"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n\n        return mergeKLists(lists, 0, len - 1);\n    }\n\n    public ListNode mergeKLists(ListNode[] lists, int start, int end) {\n        if (end - start == 0) {\n            return lists[start];\n        }\n        if (end - start == 1) {\n            return mergeLists(lists[start], lists[end]);\n        }\n        int mid = start + ((end - start) / 2);\n        ListNode listA = mergeKLists(lists, start, mid);\n        ListNode listB = mergeKLists(lists, mid + 1, end);\n        return mergeLists(listA, listB);\n    }\n\n    public ListNode mergeLists(ListNode listA, ListNode listB) {\n        if (listA == null) {\n            return listB;\n        }\n        if (listB == null) {\n            return listA;\n        }\n        if (listA.val < listB.val) {\n            listA.next = mergeLists(listA.next, listB);\n            return listA;\n        } else {\n            listB.next = mergeLists(listA, listB.next);\n            return listB;\n        }\n    }\n}\n"})})]}),(0,l.jsxs)(t,{value:"python",label:"Python",children:[(0,l.jsx)(n,{name:"@radojicic23"}),(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        # edgecases: if length is 0 and lists is None\n        if not lists or len(lists) == 0:\n            return None\n        # take pairs of LL and merge them each time and\n        # keep doing it until there is one LL remaining\n        while len(lists) > 1:\n            merged_lists = []\n            # iterate through each of these lists\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                # make sure if i + 1 is in bounds because l2 might be out of bound\n                # maybe we can have odd number of lists\n                l2 = lists[i + 1] if (i + 1) < len(lists) else None\n                # merge them together and add to merged lists\n                merged_lists.append(self.mergeLists(l1, l2))\n            # update lists variable\n            lists = merged_lists\n            # keep doing that until there is one list\n        return lists[0]\n\n    # solution from 0021 - Merge Two Sorted Lists (Easy)\n    def mergeLists(self, l1, l2):\n        dymmy = ListNode()\n        tail = dymmy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n\n        if l1:\n            tail.next = l1\n        elif l2:\n            tail.next = l2\n\n        return dymmy.next\n"})})]}),(0,l.jsxs)(t,{value:"js",label:"JavaScript",children:[(0,l.jsx)(n,{name:"@radojicic23"}),(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function (lists) {\n  if (!lists || lists.length == 0) return null;\n  while (lists.length > 1) {\n    let merged_lists = [];\n    for (i = 0; i < lists.length; i += 2) {\n      let l1 = lists[i];\n      let l2 = i + 1 < lists.length ? lists[i + 1] : null;\n      merged_lists.push(merge(l1, l2));\n    }\n    lists = merged_lists;\n  }\n  return lists[0];\n};\n\nvar merge = function (l1, l2) {\n  dummy = new ListNode();\n  tail = dummy;\n  while (l1 && l2) {\n    if (l1.val < l2.val) {\n      tail.next = l1;\n      l1 = l1.next;\n    } else {\n      tail.next = l2;\n      l2 = l2.next;\n    }\n    tail = tail.next;\n  }\n  if (l1) tail.next = l1;\n  if (l2) tail.next = l2;\n  return dummy.next;\n};\n"})})]})]})]})}function o(s={}){const{wrapper:e}={...(0,i.R)(),...s.components};return e?(0,l.jsx)(e,{...s,children:(0,l.jsx)(d,{...s})}):d(s)}function h(s,e){throw new Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(s,e,n)=>{n.d(e,{R:()=>a,x:()=>r});var t=n(30758);const l={},i=t.createContext(l);function a(s){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function r(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(l):s.components||l:a(s.components),t.createElement(i.Provider,{value:e},s.children)}}}]);