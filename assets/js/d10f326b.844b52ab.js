"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[53323],{30971:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"1300-1399/maximum-performance-of-a-team-hard","title":"1383 - Maximum Performance of a Team (Hard)","description":"Author: @wingkwong | https://leetcode.com/problems/maximum-performance-of-a-team/","source":"@site/solutions/1300-1399/1383-maximum-performance-of-a-team-hard.md","sourceDirName":"1300-1399","slug":"/1300-1399/maximum-performance-of-a-team-hard","permalink":"/solutions/1300-1399/maximum-performance-of-a-team-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1383-maximum-performance-of-a-team-hard.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Greedy","permalink":"/solutions/tags/greedy"},{"inline":true,"label":"Sorting","permalink":"/solutions/tags/sorting"},{"inline":true,"label":"Heap (Priority Queue)","permalink":"/solutions/tags/heap-priority-queue"}],"version":"current","sidebarPosition":1383,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/maximum-performance-of-a-team/","tags":["Array","Greedy","Sorting","Heap (Priority Queue)"]},"sidebar":"tutorialSidebar","previous":{"title":"1372 - Longest ZigZag Path in a Binary Tree (Medium)","permalink":"/solutions/1300-1399/longest-zigzag-path-in-a-binary-tree-medium"},"next":{"title":"1400 - 1499","permalink":"/solutions/category/1400---1499"}}');var r=i(74848),a=i(28453);const s={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-performance-of-a-team/",tags:["Array","Greedy","Sorting","Heap (Priority Queue)"]},o="1383 - Maximum Performance of a Team (Hard)",c={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2}];function p(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"1383---maximum-performance-of-a-team-hard",children:"1383 - Maximum Performance of a Team (Hard)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["You are given two integers ",(0,r.jsx)(n.code,{children:"n"})," and ",(0,r.jsx)(n.code,{children:"k"})," and two integer arrays ",(0,r.jsx)(n.code,{children:"speed"})," and ",(0,r.jsx)(n.code,{children:"efficiency"})," both of length ",(0,r.jsx)(n.code,{children:"n"}),". There are ",(0,r.jsx)(n.code,{children:"n"})," engineers numbered from ",(0,r.jsx)(n.code,{children:"1"})," to ",(0,r.jsx)(n.code,{children:"n"}),". ",(0,r.jsx)(n.code,{children:"speed[i]"})," and ",(0,r.jsx)(n.code,{children:"efficiency[i]"})," represent the speed and efficiency of the ",(0,r.jsx)(n.code,{children:"ith"})," engineer respectively."]}),"\n",(0,r.jsxs)(n.p,{children:["Choose ",(0,r.jsx)(n.strong,{children:"at most"})," ",(0,r.jsx)(n.code,{children:"k"})," different engineers out of the ",(0,r.jsx)(n.code,{children:"n"})," engineers to form a team with the maximum ",(0,r.jsx)(n.strong,{children:"performance"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers."}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsx)(n.em,{children:"the maximum performance of this team"}),". Since the answer can be a huge number, return it ",(0,r.jsx)(n.strong,{children:"modulo"})," ",(0,r.jsx)(n.code,{children:"109 + 7"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation: \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\nOutput: 68\nExplanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\nOutput: 72\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= k <= n <= 10^5"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"speed.length == n"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"efficiency.length == n"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= speed[i] <= 10^5"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= efficiency[i] <= 10^8"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-priority-queue",children:"Approach 1: Priority Queue"}),"\n",(0,r.jsx)(i,{name:"@wingkwong"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Time Complexity: O(N * (logN + logK)) \n// Space Complexity: O(N + K)\n// where N is the total number of candidates and K is the size of team\nclass Solution {\npublic:\n    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {\n        int MOD = 1e9 + 7;\n        vector<pair<int, int>> candidates(n);\n        // we build the pair { efficiency, speed } so that we can sort it later\n        for (int i = 0; i < n; i++) candidates[i] = { efficiency[i], speed[i] };\n        // sort candidates in descending order\n        sort(candidates.rbegin(), candidates.rend());\n        // Using Example 1: \n        // speed: [2, 10, 3, 1 ,5, 8] and efficiency: [5, 4, 3, 9, 7, 2]\n        // after sort, it becomes\n        // a: [{9, 1}, {7 ,5}, {5, 2}, {4, 10}, {3, 3}, {2, 8}]\n        long speedSum = 0, ans = 0;\n        // we use priority queue here with greater<int> to store the sum\n        // i.e min heap (the smallest element goes on the top)\n        priority_queue <int, vector<int>, greater<int>> pq;\n        // iterate each pair\n        for (auto& [e, s] : candidates) {\n            // put the speed to priority queue\n            pq.push(s);\n            // add to speedSum\n            speedSum += s;\n            // we only need to choose at most k engineers\n            // hence if the queue size is greater than k\n            // we need to remove a candidate\n            if (pq.size() > k) {\n                // who to remove? of course the one with smallest speed\n                speedSum -= pq.top();\n                pq.pop();\n            }\n            // calculate the performance\n            ans = max(ans, speedSum * e);\n        }\n        return ans % MOD;\n    }\n};\n"})}),"\n",(0,r.jsx)(i,{name:"@wingkwong"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"class Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n        MOD = 10 ** 9 + 7\n        # build tuples ( efficiency, speed ) so that we can sort it later\n        candidates = zip(efficiency, speed)\n        # default sort mode is ascending. use `reverse = True` to sort in descending\n        candidates = sorted(candidates, key=lambda x: x[0], reverse=True)\n        # Using Example 1: \n        # speed: [2, 10, 3, 1 ,5, 8] and efficiency: [5, 4, 3, 9, 7, 2]\n        # after sort, it becomes\n        # candidates: [(9, 1), (7 ,5), (5, 2), (4, 10), (3, 3), (2, 8)]\n        speedSum, ans = 0, 0\n        # in python, it usually refers to heap \n        heap = []\n        # iterate each tuple\n        for e, s in candidates:\n            # put the speed to heap\n            heapq.heappush(heap, s)\n            # add to speedSum\n            speedSum += s\n            # we only need to choose at most k engineers\n            # hence if the queue size is greater than k\n            # we need to remove a candidate\n            if len(heap) > k:\n                # who to remove? of course the one with smallest speed\n                speedSum -= heapq.heappop(heap)\n            # calculate the performance\n            ans = max(ans, speedSum * e)\n        return ans % MOD\n"})}),"\n",(0,r.jsx)(i,{name:"@wingkwong"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-golang",children:"// Logic Behind:\n// 1. Join Score and Efficiency\n//    We join both array since they are related, \n//    Which can be done either through maps or array. We are using array.\n// 2. Sorting Efficiency\n//    We are sorting the efficiency.\n//    Reason to sort with efficiency because we are multiply it single value.\n//    Since we are multiplying the minimum, we need to sort in descending order\n//    If we need a max we would sort in in ascending order.\n// 3. Heap of scoring\n//    Using heap here is curial since are need to add and remove all the smallest\n//    So low values are poped until we run the complete array to find the max performance.\n\nfunc maxPerformance(n int, speed []int, efficiency []int, k int) int {\n    // Since the answer can be huge, we are usingn 10**9 + 7 as it suggests.\n    MODULES := int(math.Pow(10, 9)) + 7;\n    \n    // Adding the spped and efficiency\n    // Since the number is same we don't have to check the length.\n    players := make([][]int, len(speed), len(speed))\n    for i, e := range speed {\n        players[i] = []int{e, efficiency[i]}\n    }\n    \n    // Sorting Players by Efficiency\n    sort.Sort(ByEfficiency(players))\n    \n    // Variables \n    sumOfSpeed := 0\n    maxPerformance := 0\n    \n    // Initialization of the speed heap.\n    speedHeap := &SpeedHeap{}\n    heap.Init(speedHeap)\n    for _, e := range players {\n        minEfficiency := e[1] // As it's the in descending order\n        sumOfSpeed = sumOfSpeed + e[0]\n        heap.Push(speedHeap, e[0])\n        if speedHeap.Len() > k{ // Here we pop the lowest when the length is reached.\n            sumOfSpeed = sumOfSpeed - heap.Pop(speedHeap).(int)\n        }\n        maxPerformance = max(maxPerformance, sumOfSpeed * minEfficiency)\n    }\n    return maxPerformance % MODULES;\n}\n\nfunc max(a,b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\n// Heap of speed\ntype SpeedHeap []int\nfunc (h SpeedHeap) Len() int           { return len(h) }\nfunc (h SpeedHeap) Less(i, j int) bool { return h[i] < h[j] }\nfunc (h SpeedHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\n\nfunc (h *SpeedHeap) Push(x interface{}) {\n\t*h = append(*h, x.(int))\n}\n\nfunc (h *SpeedHeap) Pop() interface{} {\n\told := *h\n\tn := len(old)\n\tx := old[n-1]\n\t*h = old[0 : n-1]\n\treturn x\n}\n\n\n// Player Sorting\ntype ByEfficiency [][]int\nfunc (a ByEfficiency) Len() int           { return len(a) }\nfunc (a ByEfficiency) Less(i, j int) bool { \n    if(a[i][1] == a[j][1]){\n        return a[i][0] < a[j][0]\n    }\n    return a[i][1] > a[j][1] \n}\nfunc (a ByEfficiency) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(96540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);