"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[66084],{98136:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"1700-1799/minimum-changes-to-make-alternating-binary-string-easy","title":"1758 - Minimum Changes To Make Alternating Binary String (Easy)","description":"Author: @jit, @wingkwong | https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/","source":"@site/solutions/1700-1799/1758-minimum-changes-to-make-alternating-binary-string-easy.md","sourceDirName":"1700-1799","slug":"/1700-1799/minimum-changes-to-make-alternating-binary-string-easy","permalink":"/solutions/1700-1799/minimum-changes-to-make-alternating-binary-string-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1700-1799/1758-minimum-changes-to-make-alternating-binary-string-easy.md","tags":[{"inline":true,"label":"String","permalink":"/solutions/tags/string"}],"version":"current","sidebarPosition":1758,"frontMatter":{"description":"Author: @jit, @wingkwong | https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/","tags":["String"]},"sidebar":"tutorialSidebar","previous":{"title":"1751 - Maximum Number of Events That Can Be Attended II (Hard)","permalink":"/solutions/1700-1799/maximum-number-of-events-that-can-be-attended-ii-hard"},"next":{"title":"1762 - Buildings With an Ocean View (Medium)","permalink":"/solutions/1700-1799/buildings-with-an-ocean-view-medium"}}');var i=s(74848),t=s(28453);const r={description:"Author: @jit, @wingkwong | https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/",tags:["String"]},l="1758 - Minimum Changes To Make Alternating Binary String (Easy)",c={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting",id:"approach-1-counting",level:2}];function o(n){const e={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,t.R)(),...n.components},{SolutionAuthor:s,TabItem:a,Tabs:r}=e;return s||d("SolutionAuthor",!0),a||d("TabItem",!0),r||d("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"1758---minimum-changes-to-make-alternating-binary-string-easy",children:"1758 - Minimum Changes To Make Alternating Binary String (Easy)"})}),"\n",(0,i.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/",children:"https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/"})}),"\n",(0,i.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(e.p,{children:["You are given a string ",(0,i.jsx)(e.code,{children:"s"})," consisting only of the characters ",(0,i.jsx)(e.code,{children:"'0'"})," and ",(0,i.jsx)(e.code,{children:"'1'"}),". In one operation, you can change any ",(0,i.jsx)(e.code,{children:"'0'"})," to ",(0,i.jsx)(e.code,{children:"'1'"})," or vice versa."]}),"\n",(0,i.jsxs)(e.p,{children:["The string is called alternating if no two adjacent characters are equal. For example, the string ",(0,i.jsx)(e.code,{children:'"010"'})," is alternating, while the string ",(0,i.jsx)(e.code,{children:'"0100"'})," is not."]}),"\n",(0,i.jsxs)(e.p,{children:["Return ",(0,i.jsxs)(e.em,{children:["the ",(0,i.jsx)(e.strong,{children:"minimum"})," number of operations needed to make"]})," ",(0,i.jsx)(e.code,{children:"s"})," ",(0,i.jsx)(e.em,{children:"alternating"}),"."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'Input: s = "0100"\nOutput: 1\nExplanation: If you change the last character to \'1\', s will be "0101", which is alternating.\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'Input: s = "10"\nOutput: 0\nExplanation: s is already alternating.\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'Input: s = "1111"\nOutput: 2\nExplanation: You need two operations to reach "0101" or "1010".\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mn,{children:"1"}),(0,i.jsx)(e.mo,{children:"<"}),(0,i.jsx)(e.mo,{children:"="}),(0,i.jsx)(e.mi,{children:"s"}),(0,i.jsx)(e.mi,{mathvariant:"normal",children:"."}),(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"e"}),(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mi,{children:"t"}),(0,i.jsx)(e.mi,{children:"h"}),(0,i.jsx)(e.mo,{children:"<"}),(0,i.jsx)(e.mo,{children:"="}),(0,i.jsx)(e.mn,{children:"1"}),(0,i.jsxs)(e.msup,{children:[(0,i.jsx)(e.mn,{children:"0"}),(0,i.jsx)(e.mn,{children:"4"})]})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"1 <= s.length <= 10^4"})]})})}),(0,i.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6835em",verticalAlign:"-0.0391em"}}),(0,i.jsx)(e.span,{className:"mord",children:"1"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(e.span,{className:"mrel",children:"<="}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"s"}),(0,i.jsx)(e.span,{className:"mord",children:"."}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"h"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(e.span,{className:"mrel",children:"<="}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8141em"}}),(0,i.jsx)(e.span,{className:"mord",children:"1"}),(0,i.jsxs)(e.span,{className:"mord",children:[(0,i.jsx)(e.span,{className:"mord",children:"0"}),(0,i.jsx)(e.span,{className:"msupsub",children:(0,i.jsx)(e.span,{className:"vlist-t",children:(0,i.jsx)(e.span,{className:"vlist-r",children:(0,i.jsx)(e.span,{className:"vlist",style:{height:"0.8141em"},children:(0,i.jsxs)(e.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,i.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(e.span,{className:"mord mtight",children:"4"})})]})})})})})]})]})]})]})}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"s[i]"})," is either ",(0,i.jsx)(e.code,{children:"'0'"})," or ",(0,i.jsx)(e.code,{children:"'1'"}),"."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"approach-1-counting",children:"Approach 1: Counting"}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)(a,{value:"scala",label:"Scala",children:[(0,i.jsx)(s,{name:"@jit"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-scala",children:"object Solution {\n  // Count swaps required for an alternating string starting with 0.\n  // The alternating string starting with 1 is just the complement.\n  def minOperations(s: String): Int = {\n    val zSwaps = s.indices.count(i => s(i).asDigit == i % 2)\n    zSwaps min (s.length - zSwaps)\n  }\n}\n"})})]}),(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(s,{name:"@wingkwong"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int minOperations(string s) {\n        int cnt = 0, n = s.size();\n        for (int i = 0; i < n; i++) cnt += s[i] - '0' == i % 2;\n        return min(cnt, n - cnt);\n    }\n};\n"})})]})]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}function d(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>l});var a=s(96540);const i={},t=a.createContext(i);function r(n){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),a.createElement(t.Provider,{value:e},n.children)}}}]);