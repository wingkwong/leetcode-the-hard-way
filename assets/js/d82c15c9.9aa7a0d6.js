"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[90808],{4618:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"0500-0599/reverse-words-in-a-string-iii-easy","title":"0557 - Reverse Words in a String III (Easy)","description":"Author: @wkw | https://leetcode.com/problems/reverse-words-in-a-string-iii/","source":"@site/solutions/0500-0599/0557-reverse-words-in-a-string-iii-easy.md","sourceDirName":"0500-0599","slug":"/0500-0599/reverse-words-in-a-string-iii-easy","permalink":"/solutions/0500-0599/reverse-words-in-a-string-iii-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0500-0599/0557-reverse-words-in-a-string-iii-easy.md","tags":[{"inline":true,"label":"Two Pointers","permalink":"/solutions/tags/two-pointers"},{"inline":true,"label":"String","permalink":"/solutions/tags/string"}],"version":"current","sidebarPosition":557,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/reverse-words-in-a-string-iii/","tags":["Two Pointers","String"]},"sidebar":"tutorialSidebar","previous":{"title":"0543 - Diameter of Binary Tree (Easy)","permalink":"/solutions/0500-0599/diameter-of-binary-tree-easy"},"next":{"title":"0559 - Maximum Depth of N-ary Tree (Easy)","permalink":"/solutions/0500-0599/maximum-depth-of-n-ary-tree-easy"}}');var r=s(86070),i=s(68906);const o={description:"Author: @wkw | https://leetcode.com/problems/reverse-words-in-a-string-iii/",tags:["Two Pointers","String"]},a="0557 - Reverse Words in a String III (Easy)",l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Split and Reverse",id:"approach-1-split-and-reverse",level:2},{value:"Approach 2: Two Pointers",id:"approach-2-two-pointers",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:s,TabItem:t,Tabs:o}=n;return s||h("SolutionAuthor",!0),t||h("TabItem",!0),o||h("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"0557---reverse-words-in-a-string-iii-easy",children:"0557 - Reverse Words in a String III (Easy)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-words-in-a-string-iii/",children:"https://leetcode.com/problems/reverse-words-in-a-string-iii/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given a string ",(0,r.jsx)(n.code,{children:"s"}),", reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: s = "Let\'s take LeetCode contest"\nOutput: "s\'teL ekat edoCteeL tsetnoc"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: s = "God Ding"\nOutput: "doG gniD"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= s.length <= 5 * 10^4"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"s"})," contains printable ",(0,r.jsx)(n.strong,{children:"ASCII"})," characters."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"s"})," does not contain any leading or trailing spaces."]}),"\n",(0,r.jsxs)(n.li,{children:["There is ",(0,r.jsx)(n.strong,{children:"at least one"})," word in ",(0,r.jsx)(n.code,{children:"s"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["All the words in ",(0,r.jsx)(n.code,{children:"s"})," are separated by a single space."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-split-and-reverse",children:"Approach 1: Split and Reverse"}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsxs)(t,{value:"cpp",label:"C++",children:[(0,r.jsx)(s,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    // custom split template\n    vector<string> split(string str, char delim) {\n        string line;\n        vector<string> res;\n        stringstream ss(str);\n        while (getline(ss, line, delim)) res.push_back(line);\n        return res;\n    }\n\n    string reverseWords(string s) {\n        // split by ' '\n        vector<string> v = split(s, ' ');\n        // reverse each string\n        for(auto &x : v) reverse(x.begin(), x.end());\n        // construct the answer\n        string ans;\n        for(int i = 0; i < v.size(); i++) {\n            ans += v[i];\n            // add space after each string except the last one\n            if(i != v.size() - 1) ans += \" \";\n        }\n        return ans;\n    }\n};\n"})})]}),(0,r.jsxs)(t,{value:"py",label:"Python",children:[(0,r.jsx)(s,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'class Solution:\n    def reverseWords(self, s: str) -> str:\n        # step1: split the string\n        #   split() = ["Let\'s","take","LeetCode","contest"]\n        # step2: reverse the list\n        #   s.split()[::-1] = ["contest","LeetCode","take","Let\'s"]\n        # step3: convert each element to string separated by space\n        #   \' \'.join(s.split()[::-1]) = "contest LeetCode take Let\'s"\n        # step4: reverse the string\n        #   \' \'.join(s.split()[::-1])[::-1] = "s\'teL ekat edoCteeL tsetnoc"\n        return \' \'.join(s.split()[::-1])[::-1]\n'})})]}),(0,r.jsxs)(t,{value:"kt",label:"Kotlin",children:[(0,r.jsx)(s,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class Solution {\n    fun reverseWords(s: String): String {\n        // step 1: split by space\n        // s.split(" ") = [Let\'s, take, LeetCode, contest]\n        // step 2: reverse each element\n        // s.split(" ").map { it.reversed() } = [s\'teL, ekat, edoCteeL, tsetnoc]\n        // step 3: join them back\n        // s.split(" ").map { it.reversed() }.joinToString(" ") = "s\'teL ekat edoCteeL tsetnoc"\n        return s.split(" ").map { it.reversed() }.joinToString(" ");\n    }\n}\n'})})]}),(0,r.jsxs)(t,{value:"ts",label:"TypeScript",children:[(0,r.jsx)(s,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function reverseWords(s: string): string {\n  // step 1: split by space\n  //  s.split(' ') = [ \"Let's\", 'take', 'LeetCode', 'contest' ]\n  // step 2: for each element, reverse it\n  //  s.split(' ').map(w => w.split('').reverse().join('')) = [ \"s'teL\", 'ekat', 'edoCteeL', 'tsetnoc' ]\n  // step 3: join them back\n  //  s.split(' ').map(w => w.split('').reverse().join('')).join(' ') = \"s'teL ekat edoCteeL tsetnoc\"\n  return s\n    .split(' ')\n    .map((w) => w.split('').reverse().join(''))\n    .join(' ');\n}\n"})})]}),(0,r.jsxs)(t,{value:"go",label:"Go",children:[(0,r.jsx)(s,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func reverseWords(s string) string {\n    // split by space\n    w := strings.Split(s, " ")\n    // iterate each word\n    for k, v := range w {\n        // convert to bytes array\n        b := []byte(v)\n        // length of current word\n        n := len(v)\n        // for each word, we iterate n / 2 times\n        for i := 0; i < n / 2; i++ {\n            // swap the characters\n            b[i], b[n - 1 - i] = b[n - 1 - i], b[i]\n            // w[k] here is the reversed version of v\n            w[k] = string(b)\n        }\n    }\n    // build the final string\n    return strings.Join(w, " ")\n'})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"approach-2-two-pointers",children:"Approach 2: Two Pointers"}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsxs)(t,{value:"cpp",label:"C++",children:[(0,r.jsx)(s,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    string reverseWords(string s) {\n        int l = 0, r = 0, n = s.size();\n        for (int i = 0; i < n; i++) {\n            // looking for the space index\n            if (s[i] == ' ' || i == n - 1) {\n                // r is the index before the space\n                // if s[i] is space, then we want to reverse s[l : i - 1]\n                // if s[i] is the last character, then we want to reverse s[l : i]\n                r = i == n - 1 ? i : i - 1;\n                // swap the character\n                // e.g. s = `Let's` where l is 0 and r is 4\n                // Let's -> set'L -> s'teL\n                while (l < r) swap(s[l++], s[r--]);\n                // update left pointer which is i + 1\n                // i.e. the first index of the next word if applicable\n                l = i + 1;\n            }\n        }\n        return s;\n    }\n};\n"})})]}),(0,r.jsxs)(t,{value:"java",label:"Java",children:[(0,r.jsx)(s,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public String reverseWords(String s) {\n        int l = 0, r = 0, n = s.length();\n        char[] c = s.toCharArray();\n        for (int i = 0; i < n; i++) {\n            // looking for the space index\n            if (c[i] == ' ' || i == n - 1) {\n                // r is the index before the space\n                // if s[i] is space, then we want to reverse s[l : i - 1]\n                // if s[i] is the last character, then we want to reverse s[l : i]\n                r = i == n - 1 ? i : i - 1;\n                // swap the character\n                // e.g. s = `Let's` where l is 0 and r is 4\n                // Let's -> set'L -> s'teL\n                while (l < r) {\n                    char tmp = c[l];\n                    c[l] = c[r];\n                    c[r] = tmp;\n                    l++;\n                    r--;\n                }\n                // update left pointer which is i + 1\n                // i.e. the first index of the next word if applicable\n                l = i + 1;\n            }\n        }\n        return new String(c);\n    }\n}\n"})})]})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(30758);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);