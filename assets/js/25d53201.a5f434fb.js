"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[14467],{5897:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"1700-1799/merge-strings-alternately-easy","title":"1768 - Merge Strings Alternately (Easy)","description":"Author: @heiheihang | https://leetcode.com/problems/merge-strings-alternately/","source":"@site/solutions/1700-1799/1768-merge-strings-alternately-easy.md","sourceDirName":"1700-1799","slug":"/1700-1799/merge-strings-alternately-easy","permalink":"/solutions/1700-1799/merge-strings-alternately-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1700-1799/1768-merge-strings-alternately-easy.md","tags":[],"version":"current","sidebarPosition":1768,"frontMatter":{"description":"Author: @heiheihang | https://leetcode.com/problems/merge-strings-alternately/"},"sidebar":"tutorialSidebar","previous":{"title":"1762 - Buildings With an Ocean View (Medium)","permalink":"/solutions/1700-1799/buildings-with-an-ocean-view-medium"},"next":{"title":"1770 - Maximum Score from Performing Multiplication Operations (Medium)","permalink":"/solutions/1700-1799/maximum-score-from-performing-multiplication-operations-medium"}}');var o=n(86070),i=n(40629);const s={description:"Author: @heiheihang | https://leetcode.com/problems/merge-strings-alternately/"},d="1768 - Merge Strings Alternately (Easy)",l={},a=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}];function h(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"1768---merge-strings-alternately-easy",children:"1768 - Merge Strings Alternately (Easy)"})}),"\n",(0,o.jsx)(r.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.a,{href:"https://leetcode.com/problems/merge-strings-alternately",children:"https://leetcode.com/problems/merge-strings-alternately"})}),"\n",(0,o.jsx)(r.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(r.p,{children:["You are given two strings ",(0,o.jsx)(r.code,{children:"word1"})," and ",(0,o.jsx)(r.code,{children:"word2"}),". Merge the strings by adding letters in alternating order, starting with ",(0,o.jsx)(r.code,{children:"word1"}),". If a string is longer than the other, append the additional letters onto the end of the merged string."]}),"\n",(0,o.jsxs)(r.p,{children:["Return ",(0,o.jsx)(r.em,{children:"the merged string."})]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'Input: word1 = "abc", word2 = "pqr"\nOutput: "apbqcr"\nExplanation: The merged string will be merged as so:\nword1:  a   b   c\nword2:    p   q   r\nmerged: a p b q c r\n'})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'Input: word1 = "ab", word2 = "pqrs"\nOutput: "apbqrs"\nExplanation: Notice that as word2 is longer, "rs" is appended to the end.\nword1:  a   b\nword2:    p   q   r   s\nmerged: a p b q   r   s\n'})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'Input: word1 = "abcd", word2 = "pq"\nOutput: "apbqcd"\nExplanation: Notice that as word1 is longer, "cd" is appended to the end.\nword1:  a   b   c   d\nword2:    p   q\nmerged: a p b q c   d\n'})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.code,{children:"1 <= word1.length, word2.length <= 100"})}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"word1"})," and ",(0,o.jsx)(r.code,{children:"word2"})," consist of lowercase English letters."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"approach-1-two-pointers",children:"Approach 1: Two Pointers"}),"\n",(0,o.jsxs)(r.p,{children:["We define two pointers, ",(0,o.jsx)(r.code,{children:"pointer_for_word1"}),"and ",(0,o.jsx)(r.code,{children:"pointer_for_word2"})," . We then iterate the letters from both words until we have exhausted one of them. After that, we exhaust the remaining word (if both words have different lengths)."]}),"\n",(0,o.jsx)(n,{name:"@heiheihang"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:'def mergeAlternately(self, word1: str, word2: str) -> str:\n\n        #initialize the 2 pointers for word1 and word2\n        pointer_for_word1 = 0\n        pointer_for_word2 = 0\n\n        #initialize the 2 lengths of word1 and word2\n        length_of_word1 = len(word1)\n        length_of_word2 = len(word2)\n\n        #initialize result list\n        result = []\n\n        #we iterate each letter in word1 and word2 until we have exhausted one of them\n        while(pointer_for_word1 < length_of_word1 and pointer_for_word2 < length_of_word2):\n\n            #add a letter from word1, then a letter from word2\n            result.append(word1[pointer_for_word1])\n            result.append(word2[pointer_for_word2])\n\n            #move the two pointers\n            pointer_for_word1 += 1\n            pointer_for_word2 += 1\n\n        #if word1 is not exhausted, add its remaining letters to result\n        while(pointer_for_word1 < length_of_word1):\n            result.append(word1[pointer_for_word1])\n            pointer_for_word1 += 1\n\n        #if word2 is not exhausted, add its remaining letters to result\n        while(pointer_for_word2 < length_of_word2):\n            result.append(word2[pointer_for_word2])\n            pointer_for_word2 += 1\n\n        #return the string of the result list\n        return "".join(result)\n'})})]})}function c(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},40629:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>d});var t=n(30758);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);