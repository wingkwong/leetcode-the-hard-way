"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[20020],{31339:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"0200-0299/course-schedule-medium","title":"0207 - Course Schedule (Medium)","description":"Author: @wkw | https://leetcode.com/problems/course-schedule/","source":"@site/solutions/0200-0299/0207-course-schedule-medium.md","sourceDirName":"0200-0299","slug":"/0200-0299/course-schedule-medium","permalink":"/solutions/0200-0299/course-schedule-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0207-course-schedule-medium.md","tags":[{"inline":true,"label":"Depth-First Search","permalink":"/solutions/tags/depth-first-search"},{"inline":true,"label":"Breadth-First Search","permalink":"/solutions/tags/breadth-first-search"},{"inline":true,"label":"Graph","permalink":"/solutions/tags/graph"},{"inline":true,"label":"Topological Sort","permalink":"/solutions/tags/topological-sort"}],"version":"current","sidebarPosition":207,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/course-schedule/","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},"sidebar":"tutorialSidebar","previous":{"title":"0206 - Reverse Linked List (Easy)","permalink":"/solutions/0200-0299/reverse-linked-list-easy"},"next":{"title":"0208 - Implement Trie (Prefix Tree) (Medium)","permalink":"/solutions/0200-0299/implement-trie-medium"}}');var o=r(86070),s=r(32790);const t={description:"Author: @wkw | https://leetcode.com/problems/course-schedule/",tags:["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},l="0207 - Course Schedule (Medium)",a={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Topological Sorting",id:"approach-1-topological-sorting",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:r,TabItem:i,Tabs:t}=n;return r||h("SolutionAuthor",!0),i||h("TabItem",!0),t||h("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"0207---course-schedule-medium",children:"0207 - Course Schedule (Medium)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["There are a total of ",(0,o.jsx)(n.code,{children:"numCourses"})," courses you have to take, labeled from ",(0,o.jsx)(n.code,{children:"0"})," to ",(0,o.jsx)(n.code,{children:"numCourses - 1"}),". You are given an array ",(0,o.jsx)(n.code,{children:"prerequisites"})," where ",(0,o.jsx)(n.code,{children:"prerequisites[i] = [ai, bi]"})," indicates that you ",(0,o.jsx)(n.strong,{children:"must"})," take course ",(0,o.jsx)(n.code,{children:"bi"})," first if you want to take course ",(0,o.jsx)(n.code,{children:"ai"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["For example, the pair ",(0,o.jsx)(n.code,{children:"[0, 1]"}),", indicates that to take course ",(0,o.jsx)(n.code,{children:"0"})," you have to first take course ",(0,o.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Return ",(0,o.jsx)(n.code,{children:"true"})," if you can finish all courses. Otherwise, return ",(0,o.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take.\nTo take course 1 you should have finished course 0. So it is possible.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take.\nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= numCourses <= 2000"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"0 <= prerequisites.length <= 5000"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"prerequisites[i].length == 2"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"0 <= ai, bi < numCourses"})}),"\n",(0,o.jsxs)(n.li,{children:["All the pairs prerequisites[i] are ",(0,o.jsx)(n.strong,{children:"unique"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-topological-sorting",children:"Approach 1: Topological Sorting"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(i,{value:"cpp",label:"C++",children:[(0,o.jsx)(r,{name:"@wkw"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// for topological sorting tutorial,\n// see https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/topological-sorting\nstruct TopologicalSort {\n    int n;\n    vector<int> indegree;\n    vector<int> orders;\n    vector<vector<int>> G;\n    bool isTopologicalSorted = false;\n\n    TopologicalSort(vector<vector<int>>& g, vector<int>& in) {\n        G = g;\n        n = (int) G.size();\n        indegree = in;\n\n        int res = 0;\n        queue<int> q;\n        for(int i = 0; i < n; i++) {\n            if(indegree[i] == 0) {\n                q.push(i);\n            }\n        }\n        while(!q.empty()) {\n            auto u = q.front(); q.pop();\n            orders.push_back(u);\n            for(auto v : G[u]) {\n                if(--indegree[v] == 0) {\n                    q.push(v);\n                }\n            }\n            res++;\n        }\n        isTopologicalSorted = res == n;\n    }\n};\n\nclass Solution {\npublic:\n    bool canFinish(int n, vector<vector<int>>& prerequisites) {\n        // define the graph\n        vector<vector<int>> g(n);\n        // define indegree\n        vector<int> indegree(n);\n        // build the graph\n        for(auto p : prerequisites) {\n            // we have to take p[1] in order to take p[0]\n            g[p[1]].push_back(p[0]);\n            // increase indegree by 1 for p[0]\n            indegree[p[0]]++;\n        }\n        // init topological sort\n        TopologicalSort ts(g, indegree);\n        // we can finish all courses only if we can topologically sort\n        return ts.isTopologicalSorted;\n    }\n};\n"})})]}),(0,o.jsxs)(i,{value:"python",label:"Python",children:[(0,o.jsx)(r,{name:"@ColeB2"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"class Solution:\n    # Time: O(V + E) where V is the number of vertexes, numCourses\n    #  and E is the number of Edges inside our graph - prerequisites.\n    # Space: O(V + E). We must maintain an indegrees of size V, and\n    # we must build our ADJ list which will contain V lists of size E.\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        # initialize indegrees to track how many prerequisites left\n        # before we can take the courses at the index.\n        indegrees = [0] * numCourses\n        # define our graph, list of lists, where the index will be\n        # course 2, the prerequisite course, and it will contain a list\n        # of courses that we can potentially take after we take course2.\n        adj_list = [[] for _ in range(numCourses)]\n        # build our indegrees, and adj_list, loop all prerequisites\n        for c1, c2 in prerequisites:\n            indegrees[c1] += 1\n            adj_list[c2].append(c1)\n        # Build our queue. We can take any courses that have an indegree\n        # of 0, so we add it to our queue to handle.\n        q = deque()\n        for i in range(len(indegrees)):\n            if indegrees[i] == 0:\n                q.append(i)\n        # Topologically sort.\n        # instead of build a top sort array, we can just count a course\n        # as completed as the question only wants if it is possible,\n        # not any given order.\n        courses = 0\n        while q:\n            # pop our course off the queue\n            c = q.popleft()\n            # finised the courses, increment our courses finished counter\n            courses += 1\n            # since we finished c, we now look through all the possible\n            # courses that it was a prerequisite for to decrement its\n            # indegrees.\n            for c2 in adj_list[c]:\n                # decrement indegrees\n                indegrees[c2] -= 1\n                # indegrees reach 0, we have all prerequisites, we can\n                # take the course, add it to the queue.\n                if indegrees[c2] == 0:\n                    q.append(c2)\n        # Only return true if all courses can be finished.\n        return courses == numCourses\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var i=r(30758);const o={},s=i.createContext(o);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);