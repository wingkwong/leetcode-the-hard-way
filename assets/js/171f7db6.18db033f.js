"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[70455],{44487:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"2100-2199/smallest-value-of-the-rearranged-number-medium","title":"2165 - Smallest Value of the Rearranged Number (Medium)","description":"Authors: @heiheihang, @wkw | https://leetcode.com/problems/smallest-value-of-the-rearranged-number/","source":"@site/solutions/2100-2199/2165-smallest-value-of-the-rearranged-number-medium.md","sourceDirName":"2100-2199","slug":"/2100-2199/smallest-value-of-the-rearranged-number-medium","permalink":"/solutions/2100-2199/smallest-value-of-the-rearranged-number-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2165-smallest-value-of-the-rearranged-number-medium.md","tags":[],"version":"current","sidebarPosition":2165,"frontMatter":{"description":"Authors: @heiheihang, @wkw | https://leetcode.com/problems/smallest-value-of-the-rearranged-number/"},"sidebar":"tutorialSidebar","previous":{"title":"2164 - Sort Even and Odd Indices Independently (Easy)","permalink":"/solutions/2100-2199/sort-even-and-odd-indices-independently-easy"},"next":{"title":"2166 - Design Bitset (Medium)","permalink":"/solutions/2100-2199/design-bitset-medium"}}');var i=s(86070),r=s(68906);const a={description:"Authors: @heiheihang, @wkw | https://leetcode.com/problems/smallest-value-of-the-rearranged-number/"},l="2165 - Smallest Value of the Rearranged Number (Medium)",d={},o=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Conditional",id:"approach-1-conditional",level:2},{value:"Getting the Digits from a Number",id:"getting-the-digits-from-a-number",level:4},{value:"Building Number from Digits",id:"building-number-from-digits",level:4},{value:"Approach 2: Sort and Swap",id:"approach-2-sort-and-swap",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"2165---smallest-value-of-the-rearranged-number-medium",children:"2165 - Smallest Value of the Rearranged Number (Medium)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/smallest-value-of-the-rearranged-number/",children:"https://leetcode.com/problems/smallest-value-of-the-rearranged-number/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["You are given an integer ",(0,i.jsx)(n.code,{children:"num."})," ",(0,i.jsx)(n.strong,{children:"Rearrange"})," the digits of ",(0,i.jsx)(n.code,{children:"num"})," such that its value is ",(0,i.jsx)(n.strong,{children:"minimized"})," and it does not contain ",(0,i.jsx)(n.strong,{children:"any"})," leading zeros."]}),"\n",(0,i.jsxs)(n.p,{children:["Return ",(0,i.jsx)(n.em,{children:"the rearranged number with minimal value"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Note that the sign of the number does not change after rearranging the digits."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: num = 310\nOutput: 103\nExplanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310.\nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: num = -7605\nOutput: -7650\nExplanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"-10^15 <= num <= 10^15"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-conditional",children:"Approach 1: Conditional"}),"\n",(0,i.jsx)(n.p,{children:"There are two cases in this problem:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"num"})," is positive: we need to rearrange the digits such that they are ",(0,i.jsx)(n.strong,{children:"minimized"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"num"})," is negative: we need to rearrange the digits such that they are ",(0,i.jsx)(n.strong,{children:"maximized"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"There are some common tools that you will need for this problem:"}),"\n",(0,i.jsx)(n.h4,{id:"getting-the-digits-from-a-number",children:"Getting the Digits from a Number"}),"\n",(0,i.jsxs)(n.p,{children:["To get the digits from a number, we need to iterate the number with ",(0,i.jsx)(n.code,{children:"%10"})," and ",(0,i.jsx)(n.code,{children:"//10"})," every time to get the last digit of the number."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, to get the digits of ",(0,i.jsx)(n.code,{children:"6403"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Last digit : ",(0,i.jsx)(n.code,{children:"6403 % 10 = 3"})," and we need to remove the last digit by ",(0,i.jsx)(n.code,{children:"6403 // 10"})," now it becomes 640"]}),"\n",(0,i.jsxs)(n.li,{children:["Last digit: ",(0,i.jsx)(n.code,{children:"640 % 10 = 0"})," and we need to remove the last digit by ",(0,i.jsx)(n.code,{children:"640 // 10"})," now it becomes 64"]}),"\n",(0,i.jsxs)(n.li,{children:["Last digit: ",(0,i.jsx)(n.code,{children:"64 % 10 = 4"})," and we need to remove the last digit by ",(0,i.jsx)(n.code,{children:"64 // 10"})," now it becomes 6"]}),"\n",(0,i.jsxs)(n.li,{children:["Last digit: ",(0,i.jsx)(n.code,{children:"6 % 10 = 6"})," and we need to remove the last digit by ",(0,i.jsx)(n.code,{children:"6 // 10"})," now it becomes 0"]}),"\n",(0,i.jsxs)(n.li,{children:["We stop when ",(0,i.jsx)(n.code,{children:"num"})," becomes 0"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"building-number-from-digits",children:"Building Number from Digits"}),"\n",(0,i.jsxs)(n.p,{children:["To build a number from digits (",(0,i.jsx)(n.code,{children:"digits = [4,2,5,6]"}),", and we want 4256 as a result), we need to accumulate the number in the following way"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"number = number * 10 + new_digit\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Let's look at the example with ",(0,i.jsx)(n.code,{children:"digits = [4,2,5,9]"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"result = 0"})," initially, we perform ",(0,i.jsx)(n.code,{children:"result = result * 10 + digits[0]"}),", we get ",(0,i.jsx)(n.code,{children:"result = 0 * 10 + 4"}),", which results in ",(0,i.jsx)(n.code,{children:"4"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"result = 4"})," , we perform ",(0,i.jsx)(n.code,{children:"result = result * 10 + digits[1]"}),", we get ",(0,i.jsx)(n.code,{children:"result = 4*10 + 2"}),", which results in ",(0,i.jsx)(n.code,{children:"42"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"result = 42"}),", we perform ",(0,i.jsx)(n.code,{children:"result = result * 10 + digits[2]"}),", we get ",(0,i.jsx)(n.code,{children:"result = 42 * 10 + 5"}),", which results in 425"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"result = 425,"})," we perform ",(0,i.jsx)(n.code,{children:"result = result * 10 + digits[3]"}),", we get ",(0,i.jsx)(n.code,{children:"result = 425 * 10 + 9"}),", which results in 4259."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We first need to get the digits from a number. Then we need to sort them in order."}),"\n",(0,i.jsxs)(n.p,{children:["For the ",(0,i.jsx)(n.em,{children:"negative"})," case, we need to ",(0,i.jsx)(n.strong,{children:"maximize"})," the result, so we reverse the order of the digits. To ",(0,i.jsx)(n.strong,{children:"maximize"})," the number, we put the zeros at the end, so we need to perform ",(0,i.jsx)(n.code,{children:"result = result * 10 ** number_of_zeros"})," ",(0,i.jsx)(n.strong,{children:"after"})," merging the digits."]}),"\n",(0,i.jsxs)(n.p,{children:["For the ",(0,i.jsx)(n.em,{children:"positive"})," case, we need to ",(0,i.jsx)(n.strong,{children:"minimize"})," the result. We need to put the zeros after the first digit to ",(0,i.jsx)(n.strong,{children:"minimize"})," the result, so we perform ",(0,i.jsx)(n.code,{children:"result = digits[0] * 10 ** number_of_zeros"})," ",(0,i.jsx)(n.strong,{children:"before"})," looking at other digits."]}),"\n",(0,i.jsx)(n.p,{children:"And we do not forget to multiply -1 in the negative case before returning."}),"\n",(0,i.jsx)(s,{name:"@heiheihang"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:' def smallestNumber(self, num: int) -> int:\n\n        #return 0 if input is 0\n        if(num == 0):\n            return 0\n\n        #we need to check the sign of num\n        #different approach to handle positive and negative numbers\n        negative = False\n        if(num < 0):\n            negative = True\n            num *= -1\n\n        #we need to store the digits\n        digits = []\n\n        #we need to store the number of zeros\n        number_of_zeros = 0\n\n        #we iterate the digits of num\n        while(num > 0):\n            tmp = num % 10\n\n            #if it is zero, we store it separately\n            if(tmp == 0):\n                number_of_zeros += 1\n            else:\n                digits.append(tmp)\n\n            num //= 10\n\n        #we need to get the order of digits by sorting\n        digits.sort()\n\n        #handle positive case and negative case separately\n        #negative: maximize the number\n        #positive: minimize the number\n\n        if(negative):\n\n            #we need to start from the largest number to maximize the negative case\n            digits.reverse()\n\n            #we store the result here\n            result = 0\n\n            # build the number with digits\n            for i in range(len(digits)):\n\n                #declare new_digit\n                new_digit = digits[i]\n\n                #push the digits left, new space for new digit\n                result = result * 10\n\n                #"slide in" the new digit\n                result = result + new_digit\n\n            #append the zeros at the end\n            result *= 10**number_of_zeros\n\n            #make it negative\n            result *= -1\n\n            #return result\n            return result\n        else:\n\n            #zeros should be placed after the first non-zero digit\n            result = digits[0] * 10**number_of_zeros\n\n            #similar to above, but we skip the first digit as we have used it already\n            for i in range(1,len(digits)):\n                result = result * 10 + digits[i]\n\n            #return result\n            return result\n'})}),"\n",(0,i.jsx)(n.h2,{id:"approach-2-sort-and-swap",children:"Approach 2: Sort and Swap"}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"u"}),(0,i.jsx)(n.mi,{children:"m"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"num"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"m"})]})})]}),"is negative, we sort it in descending order to make it greatest value."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"u"}),(0,i.jsx)(n.mi,{children:"m"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"num"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"m"})]})})]})," is positive, we sort it in ascending order to make it smallest value. However, it may contain leading zeros. For example, ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsx)(n.mn,{children:"310"})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"310"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(n.span,{className:"mord",children:"310"})]})})]})," would become ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsx)(n.mn,{children:"013"})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"013"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(n.span,{className:"mord",children:"013"})]})})]}),". In this case, we simply swap the first digit (i.e. zero) with the first non-zero digit to have the minimal value. In this case, it would be ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsx)(n.mn,{children:"103"})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"103"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(n.span,{className:"mord",children:"103"})]})})]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To implement it, we first convert ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"u"}),(0,i.jsx)(n.mi,{children:"m"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"num"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"m"})]})})]})," from long long to string. Sort the string and swap the first digit with the first non-zero digit. If there is no leading zero, it stays as-is. At the end, we convert the string back to long long type and add minus sign if ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"u"}),(0,i.jsx)(n.mi,{children:"m"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"num"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"m"})]})})]})," is negative."]}),"\n",(0,i.jsx)(s,{name:"@wkw"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    long long smallestNumber(long long num) {\n        int pos = num >= 0;\n        string s = to_string(abs(num));\n        sort(s.begin(), s.end(), [&](const int x, const int y){\n            return pos ? x < y : x > y;\n        });\n        if (s.size() > 1) swap(s[0], s[s.find_first_not_of('0')]);\n        return pos ? stoll(s) : -stoll(s);\n    }\n};\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},68906:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(30758);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);