"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[40426],{35206:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>g});const i=JSON.parse('{"id":"manachers-algorithm","title":"Manacher\'s Algorithm","description":"A famous algorithm and the fastest known technique to find palindromic substrings of even or odd length.","source":"@site/templates/manachers-algorithm.md","sourceDirName":".","slug":"/manachers-algorithm","permalink":"/templates/manachers-algorithm","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/manachers-algorithm.md","tags":[],"version":"current","frontMatter":{"title":"Manacher\'s Algorithm","description":"A famous algorithm and the fastest known technique to find palindromic substrings of even or odd length.","hide_table_of_contents":false,"keywords":["leetcode","template","manachers"]},"sidebar":"tutorialSidebar","previous":{"title":"Linked List","permalink":"/templates/linked-list"},"next":{"title":"Ordered Set and GNU C++ PBDS","permalink":"/templates/ordered-set"}}');var r=t(86070),s=t(32790);const o={title:"Manacher's Algorithm",description:"A famous algorithm and the fastest known technique to find palindromic substrings of even or odd length.",hide_table_of_contents:!1,keywords:["leetcode","template","manachers"]},a=void 0,l={},g=[];function d(n){const e={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...n.components},{TabItem:t,Tabs:i}=e;return t||p("TabItem",!0),i||p("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["Please refer the ",(0,r.jsx)(e.a,{href:"../tutorials/strings/manachers-algorithm",children:"tutorial"})," guide for more details."]}),"\n",(0,r.jsx)(e.p,{children:"The function takes input of a string and returns all possible palindromic strings at each center, possible in the string."}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)(t,{value:"cpp",label:"C++",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'vector<string> palindromicSubstrings(string s) {\n    if (s.empty()) return {};\n\n    // Convert odd/even strings to odd\n    string str = "";\n    for (int i = 0; i < s.length() - 1; i++) {\n        str += s[i];\n        str += "#";\n    }\n    str += s[s.length() - 1];\n\n    // Initializing variables\n    int len = str.length();\n    vector<int> pLengths(len, 0);\n    int c = 0;\n    int R = 0;\n\n    for (int i = 0; i < len; i++) {\n        // Mirroring the palindromic length\n        if (i < R) {\n            int mirror = 2 * c - i;\n            pLengths[i] = min(R - i, pLengths[mirror]);\n        }\n\n        // Exploring beyond bounds\n        while (i - pLengths[i] - 1 >= 0 && i + pLengths[i] + 1 < len &&\n               str[i + pLengths[i] + 1] == str[i - pLengths[i] - 1]) {\n            pLengths[i]++;\n        }\n\n        // Update center and bound\n        if (pLengths[i] + i > R) {\n            c = i;\n            R = i + pLengths[i];\n        }\n    }\n\n    // Return all possible palindromic strings\n    vector<string> strings;\n    for (int i = 0; i < len; i++) {\n        string palindrome = str.substr(i - pLengths[i], 2 * pLengths[i] + 1);\n        string result = "";\n        for (char ch : palindrome) {\n            if (ch != \'#\') {\n                result += ch;\n            }\n        }\n        strings.push_back(result);\n    }\n\n    return strings;\n}\n\n'})})}),(0,r.jsx)(t,{value:"java",label:"Java",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public List<String> palindromicSubstrings(String s) {\n    if (s.length() == 0) return new ArrayList<>();\n\n    // Convert odd/even strings to odd\n    StringBuilder str = new StringBuilder();\n    for (int i = 0; i < s.length() - 1; i++) {\n        str.append(s.charAt(i));\n        str.append("#");\n    }\n    str.append(s.charAt(s.length() - 1));\n\n    // Initializing variables\n    int len = str.length();\n    int[] pLengths = new int[len];\n    int c = 0;\n    int R = 0;\n\n    for (int i = 0; i < len; i++) {\n        // Mirroring the palindromic length\n        if (i < R) {\n            int mirror = 2 * c - i;\n            pLengths[i] = Math.min(R - i, pLengths[mirror]);\n        }\n\n        // Exploring beyond bounds\n        while (i - pLengths[i] - 1 >= 0 && i + pLengths[i] + 1 < len &&\n               str.charAt(i + pLengths[i] + 1) == str.charAt(i - pLengths[i] - 1)) {\n            pLengths[i]++;\n        }\n\n        // Update center and bound\n        if (pLengths[i] + i > R) {\n            c = i;\n            R = i + pLengths[i];\n        }\n    }\n\n    // Return all possible palindromic strings\n    List<String> strings = new ArrayList<>();\n    for (int i = 0; i < len; i++) {\n        String palindrome = str.substring(i - pLengths[i], i + pLengths[i] + 1).replace("#", "");\n        if (!palindrome.isEmpty()) {\n            strings.add(palindrome);\n        }\n    }\n\n    return strings;\n}\n\n'})})}),(0,r.jsx)(t,{value:"python",label:"Python",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def palindromicSubstrings(self, s: str) -> list[str]:\n    if len(s) == 0:\n        return []\n\n    # Convert odd/even strings to odd\n    string = ""\n    for i in range(len(s) - 1):\n        string += s[i] + "#"\n    string += s[len(s) - 1]\n\n    # Initializing variables\n    pLengths = [0] * len(string)\n    c = 0\n    R = 0\n\n    for i in range(len(string)):\n        # Mirroring the palindromic length\n        if i < R:\n            mirror = 2 * c - i\n            pLengths[i] = min(R - i, pLengths[mirror])\n\n        # Exploring beyond bounds\n        while (i - pLengths[i] - 1 >= 0 and i + pLengths[i] + 1 < len(string)\n               and string[i + pLengths[i] + 1] == string[i - pLengths[i] - 1]):\n            pLengths[i] += 1\n\n        # Update center and bound\n        if pLengths[i] + i > R:\n            c = i\n            R = i + pLengths[i]\n\n    # Return all possible palindromic strings\n    strings = []\n    for i in range(len(pLengths)):\n        strings.append(string[i - pLengths[i]:i + pLengths[i] + 1].replace("#", ""))\n    while "" in strings:\n        strings.remove("")  # Remove empty palindromes\n    return strings\n\n'})})})]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}function p(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var i=t(30758);const r={},s=i.createContext(r);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);