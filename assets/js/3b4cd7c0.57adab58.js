"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[93117],{47620:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>d,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"0800-0899/push-dominoes-medium","title":"0838 - Push Dominoes (Medium)","description":"Author: @wkw | https://leetcode.com/problems/push-dominoes/","source":"@site/solutions/0800-0899/0838-push-dominoes-medium.md","sourceDirName":"0800-0899","slug":"/0800-0899/push-dominoes-medium","permalink":"/solutions/0800-0899/push-dominoes-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0838-push-dominoes-medium.md","tags":[{"inline":true,"label":"Two Pointers","permalink":"/solutions/tags/two-pointers"},{"inline":true,"label":"String","permalink":"/solutions/tags/string"},{"inline":true,"label":"Dynamic Programming","permalink":"/solutions/tags/dynamic-programming"}],"version":"current","sidebarPosition":838,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/push-dominoes/","tags":["Two Pointers","String","Dynamic Programming"]},"sidebar":"tutorialSidebar","previous":{"title":"0829 - Consecutive Numbers Sum (Hard)","permalink":"/solutions/0800-0899/consecutive-numbers-sum-hard"},"next":{"title":"0841 - Keys and Rooms (Medium)","permalink":"/solutions/0800-0899/keys-and-rooms-medium"}}');var t=i(86070),s=i(68906);const d={description:"Author: @wkw | https://leetcode.com/problems/push-dominoes/",tags:["Two Pointers","String","Dynamic Programming"]},r="0838 - Push Dominoes (Medium)",l={},h=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:i,TabItem:o,Tabs:d}=n;return i||c("SolutionAuthor",!0),o||c("TabItem",!0),d||c("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"0838---push-dominoes-medium",children:"0838 - Push Dominoes (Medium)"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/push-dominoes/",children:"https://leetcode.com/problems/push-dominoes/"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["There are ",(0,t.jsx)(n.code,{children:"n"})," dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right."]}),"\n",(0,t.jsx)(n.p,{children:"After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right."}),"\n",(0,t.jsx)(n.p,{children:"When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces."}),"\n",(0,t.jsx)(n.p,{children:"For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino."}),"\n",(0,t.jsxs)(n.p,{children:["You are given a string ",(0,t.jsx)(n.code,{children:"dominoes"})," representing the initial state where:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dominoes[i] = 'L'"}),", if the ",(0,t.jsx)(n.code,{children:"ith"})," domino has been pushed to the left,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dominoes[i] = 'R'"}),", if the ",(0,t.jsx)(n.code,{children:"ith"})," domino has been pushed to the right, and"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dominoes[i] = '.'"}),", if the ",(0,t.jsx)(n.code,{children:"ith"})," domino has not been pushed."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Return ",(0,t.jsx)(n.em,{children:"a string representing the final state"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: dominoes = "RR.L"\nOutput: "RR.L"\nExplanation: The first domino expends no additional force on the second domino.\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: dominoes = ".L.R...LR..L.."\nOutput: "LL.RR.LLRRLL.."\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"n == dominoes.length"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= n <= 1e5"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dominoes[i]"})," is either ",(0,t.jsx)(n.code,{children:"'L'"}),", ",(0,t.jsx)(n.code,{children:"'R'"}),", or ",(0,t.jsx)(n.code,{children:"'.'"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"approach-1-two-pointers",children:"Approach 1: Two Pointers"}),"\n",(0,t.jsxs)(d,{children:[(0,t.jsxs)(o,{value:"cpp",label:"C++",children:[(0,t.jsx)(i,{name:"@wkw"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    string pushDominoes(string dominoes) {\n        // l is the left pointer\n        int l = 0, n = dominoes.size();\n        // r is the right pointer\n        for (int r = 0; r < n; r++) {\n            if (dominoes[r] == '.') {\n                // case 1. meeting `.`, then skip it\n                continue;\n            } else if ((dominoes[r] == dominoes[l]) || (dominoes[l] == '.' && dominoes[r] == 'L')) {\n                // case 2. both end is equal, i.e. dominoes[r] == dominoes[l]\n                // then fill all the dots between both end\n                // e.g. L....L -> LLLLLL\n                // e.g. R....R -> RRRRRR\n                // case 2.1 if the left end is . and the right end is L,\n                // i.e. dominoes[l] == '.' && dominoes[r] == 'L'\n                // then we need to fill them from `l` to `r` in this case\n                for (int k = l; k < r; k++) dominoes[k] = dominoes[r];\n            } else if (dominoes[l] == 'L' && dominoes[r] == 'R') {\n                // case 3. left end is L and right end is R\n                // e.g. L.....R\n                // then do nothing\n            }  else if (dominoes[l] == 'R' && dominoes[r] == 'L') {\n                // case 4. left end is R and right end is L\n                // if we have odd number of dots between them (let's say m dots),\n                // then we can only add (m / 2) Ls and (m / 2) Rs.\n                // p.s `/` here is integer division. e.g. 3 / 2 = 1\n                // e.g. R...L -> RR.LL\n                // if we have even number of dots between them (let's say m dots),\n                // then we can only add (m / 2) Ls and (m / 2) Rs.\n                // e.g. R....L -> RRRLLL\n                int m = (r - l - 1) / 2;\n                for (int k = 1; k <= m; k++) dominoes[r - k] = 'L', dominoes[l + k] = 'R';\n            }\n            // update left pointer\n            l = r;\n        }\n        // case 5. if the left dominoe is `R`, then fill all 'R' till the end\n        // e.g. LL.R. -> LL.RR\n        if (dominoes[l] == 'R') for (int k = l; k < n; k++) dominoes[k] = 'R';\n        return dominoes;\n    }\n};\n"})})]}),(0,t.jsxs)(o,{value:"java",label:"Java",children:[(0,t.jsx)(i,{name:"@wkw"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public String pushDominoes(String dominoes) {\n        char[] d = dominoes.toCharArray();\n        // l is the left pointer\n        int l = 0, n = dominoes.length();\n        // r is the right pointer\n        for (int r = 0; r < n; r++) {\n            if (d[r] == '.') {\n                // case 1. meeting `.`, then skip it\n                continue;\n            } else if ((d[r] == d[l]) || (d[l] == '.' && d[r] == 'L')) {\n                // case 2. both end is equal, i.e. d[r] == d[l]\n                // then fill all the dots between both end\n                // e.g. L....L -> LLLLLL\n                // e.g. R....R -> RRRRRR\n                // case 2.1 if the left end is . and the right end is L,\n                // i.e. d[l] == '.' && d[r] == 'L'\n                // then we need to fill them from `l` to `r` in this case\n                for (int k = l; k < r; k++) d[k] = d[r];\n            } else if (d[l] == 'L' && d[r] == 'R') {\n                // case 3. left end is L and right end is R\n                // e.g. L.....R\n                // then do nothing\n            }  else if (d[l] == 'R' && d[r] == 'L') {\n                // case 4. left end is R and right end is L\n                // if we have odd number of dots between them (let's say m dots),\n                // then we can only add (m / 2) Ls and (m / 2) Rs.\n                // p.s `/` here is integer division. e.g. 3 / 2 = 1\n                // e.g. R...L -> RR.LL\n                // if we have even number of dots between them (let's say m dots),\n                // then we can only add (m / 2) Ls and (m / 2) Rs.\n                // e.g. R....L -> RRRLLL\n                int m = (r - l - 1) / 2;\n                for (int k = 1; k <= m; k++) {\n                    d[r - k] = 'L';\n                    d[l + k] = 'R';\n                }\n            }\n            // update left pointer\n            l = r;\n        }\n        // case 5. if the left dominoe is `R`, then fill all 'R' till the end\n        // e.g. LL.R. -> LL.RR\n        if (d[l] == 'R') for (int k = l; k < n; k++) d[k] = 'R';\n        return new String(d);\n    }\n}\n"})})]}),(0,t.jsxs)(o,{value:"py",label:"Python",children:[(0,t.jsx)(i,{name:"@wkw"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        d = list(dominoes)\n        # l is the left pointer\n        l, n = 0, len(dominoes)\n        # r is the right pointer\n        for r in range(n):\n            if d[r] == '.':\n                # case 1. meeting `.`, then skip it\n                continue\n            elif (d[r] == d[l]) or (d[l] == '.' and d[r] == 'L'):\n                # case 2. both end is equal, i.e. d[r] == d[l]\n                # then fill all the dots between both end\n                # e.g. L....L -> LLLLLL\n                # e.g. R....R -> RRRRRR\n                # case 2.1 if the left end is . and the right end is L,\n                # i.e. d[l] == '.' && d[r] == 'L'\n                # then we need to fill them from `l` to `r` in this case\n                for k in range(l, r):\n                    # case 3. left end is L and right end is R\n                    # e.g. L.....R\n                    # then do nothing\n                    d[k] = d[r]\n            elif d[l] == 'L' and d[r] == 'R':\n                # case 3. left end is L and right end is R\n                # e.g. L.....R\n                # then do nothing\n                pass\n            elif d[l] == 'R' and d[r] == 'L':\n                # case 4. left end is R and right end is L\n                # if we have odd number of dots between them (let's say m dots),\n                # then we can only add (m // 2) Ls and (m // 2) Rs.\n                # p.s // here is integer division. e.g. 3 // 2 = 1\n                # e.g. R...L -> RR.LL\n                # if we have even number of dots between them (let's say m dots),\n                # then we can only add (m // 2) Ls and (m // 2) Rs.\n                # e.g. R....L -> RRRLLL\n                m = (r - l - 1) // 2\n                for k in range(1, m + 1):\n                    d[r - k] = 'L'\n                    d[l + k] = 'R'\n            # update left pointer\n            l = r\n\n        # case 5. if the left dominoe is `R`, then fill all 'R' till the end\n        # e.g. LL.R. -> LL.RR\n        if d[l] == 'R':\n            for k in range(l, n):\n                d[k] = 'R'\n\n        return ''.join(d)\n"})})]})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>r});var o=i(30758);const t={},s=o.createContext(t);function d(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);