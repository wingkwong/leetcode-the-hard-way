"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[40863],{94182:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"2400-2499/divide-intervals-into-minimum-number-of-groups-medium","title":"2406 - Divide Intervals Into Minimum Number of Groups (Medium)","description":"Author: @wingkwong | https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/","source":"@site/solutions/2400-2499/2406-divide-intervals-into-minimum-number-of-groups-medium.md","sourceDirName":"2400-2499","slug":"/2400-2499/divide-intervals-into-minimum-number-of-groups-medium","permalink":"/solutions/2400-2499/divide-intervals-into-minimum-number-of-groups-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2406-divide-intervals-into-minimum-number-of-groups-medium.md","tags":[],"version":"current","sidebarPosition":2406,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/"},"sidebar":"tutorialSidebar","previous":{"title":"2405 - Optimal Partition of String (Medium)","permalink":"/solutions/2400-2499/optimal-partition-of-string-medium"},"next":{"title":"2413 - Smallest Even Multiple (Easy)","permalink":"/solutions/2400-2499/smallest-even-multiple-easy"}}');var r=t(74848),o=t(28453);const s={description:"Author: @wingkwong | https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/"},l="2406 - Divide Intervals Into Minimum Number of Groups (Medium)",a={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Line Sweep",id:"approach-1-line-sweep",level:2}];function u(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"2406---divide-intervals-into-minimum-number-of-groups-medium",children:"2406 - Divide Intervals Into Minimum Number of Groups (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["You are given a 2D integer array ",(0,r.jsx)(n.code,{children:"intervals"})," where ",(0,r.jsx)(n.code,{children:"intervals[i] = [lefti, righti]"})," represents the ",(0,r.jsx)(n.strong,{children:"inclusive"})," interval ",(0,r.jsx)(n.code,{children:"[lefti, righti]"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You have to divide the intervals into one or more ",(0,r.jsx)(n.strong,{children:"groups"})," such that each interval is in ",(0,r.jsx)(n.strong,{children:"exactly"})," one group, and no two intervals that are in the same group ",(0,r.jsx)(n.strong,{children:"intersect"})," each other."]}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsxs)(n.em,{children:["the ",(0,r.jsx)(n.strong,{children:"minimum"})," number of groups you need to make"]}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Two intervals ",(0,r.jsx)(n.strong,{children:"intersect"})," if there is at least one common number between them. For example, the intervals ",(0,r.jsx)(n.code,{children:"[1, 5]"})," and ",(0,r.jsx)(n.code,{children:"[5, 8]"})," intersect."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\nOutput: 3\nExplanation: We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: intervals = [[1,3],[5,6],[8,10],[11,13]]\nOutput: 1\nExplanation: None of the intervals overlap, so we can put all of them in one group.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= intervals.length <= 105"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"intervals[i].length == 2"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= lefti <= righti <= 10^6"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-line-sweep",children:"Approach 1: Line Sweep"}),"\n",(0,r.jsx)(t,{name:"@wingkwong"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    // it's almost same as 253. Meeting Rooms II ...\n    // the idea is to use line sweep to find out the number of overlapped intervals\n    // if it is overlapped, that means you need to create a new group\n    // e.g. if 2 intervals are overlapped, you need 2 groups ...\n    // e.g. if 3 intervals are overlapped, you need 3 groups ...\n    int minGroups(vector<vector<int>>& intervals) {\n        int ans = 0, cnt = 0;\n        // use map for internally sorting\n        map<int, int> m;\n        // standard line sweep\n        // - increase the count of starting point by 1\n        // - decrease the count of ending point by 1\n        // - take prefix sum and do something\n        for (auto& x: intervals) {\n            // in - increase by 1\n            m[x[0]]++;\n            // out - decrease by 1\n            m[x[1] + 1]--;\n        }\n        // so now what we have is\n        // intervals   1  2  3  4  5  6  7  8  9  10\n        // +           2  1  0  0  1  1  0  0  0  0 \n        // -           0  0  1  0  1  0  0  1  0  2\n        // m           2  1  -1 0  0  1  0  -1 0  -2\n        for (auto& x: m) {\n            // here we calculate the prefix sum\n            cnt += x.second;\n            // and record the maximum overlapping intervals\n            ans = max(ans, cnt);\n        }\n        return ans;\n    }\n};\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);