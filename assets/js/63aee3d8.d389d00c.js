"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[38096],{9549:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"1100-1199/smallest-sufficient-team-hard","title":"1125 - Smallest Sufficient Team (Hard)","description":"Author: @wkw | https://leetcode.com/problems/smallest-sufficient-team/","source":"@site/solutions/1100-1199/1125-smallest-sufficient-team-hard.md","sourceDirName":"1100-1199","slug":"/1100-1199/smallest-sufficient-team-hard","permalink":"/solutions/1100-1199/smallest-sufficient-team-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1100-1199/1125-smallest-sufficient-team-hard.md","tags":[],"version":"current","sidebarPosition":1125,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/smallest-sufficient-team/"},"sidebar":"tutorialSidebar","previous":{"title":"1100 - 1199","permalink":"/solutions/category/1100---1199"},"next":{"title":"1135 - Connecting Cities With Minimum Cost (Medium)","permalink":"/solutions/1100-1199/connecting-cities-with-minimum-cost-medium"}}');var t=n(86070),i=n(68906);const l={description:"Author: @wkw | https://leetcode.com/problems/smallest-sufficient-team/"},r="1125 - Smallest Sufficient Team (Hard)",c={},h=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP Bit Masking",id:"approach-1-dp-bit-masking",level:2}];function o(e){const s={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"1125---smallest-sufficient-team-hard",children:"1125 - Smallest Sufficient Team (Hard)"})}),"\n",(0,t.jsx)(s.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://leetcode.com/problems/smallest-sufficient-team/",children:"https://leetcode.com/problems/smallest-sufficient-team/"})}),"\n",(0,t.jsx)(s.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(s.p,{children:["In a project, you have a list of required skills ",(0,t.jsx)(s.code,{children:"req_skills"}),", and a list of people. The ",(0,t.jsx)(s.code,{children:"ith"})," person ",(0,t.jsx)(s.code,{children:"people[i]"})," contains a list of skills that the person has."]}),"\n",(0,t.jsxs)(s.p,{children:["Consider a sufficient team: a set of people such that for every required skill in ",(0,t.jsx)(s.code,{children:"req_skills"}),", there is at least one person in the team who has that skill. We can represent these teams by the index of each person."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["For example, ",(0,t.jsx)(s.code,{children:"team = [0, 1, 3]"})," represents the people with skills ",(0,t.jsx)(s.code,{children:"people[0]"}),", ",(0,t.jsx)(s.code,{children:"people[1]"}),", and ",(0,t.jsx)(s.code,{children:"people[3]"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Return ",(0,t.jsx)(s.em,{children:"any sufficient team of the smallest possible size, represented by the index of each person"}),". You may return the answer in ",(0,t.jsx)(s.strong,{children:"any order"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["It is ",(0,t.jsx)(s.strong,{children:"guaranteed"})," an answer exists."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'Input: req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]\nOutput: [0,2]\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'Input: req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]\nOutput: [1,2]\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"1 <= req_skills.length <= 16"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"1 <= req_skills[i].length <= 16"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"req_skills[i]"})," consists of lowercase English letters."]}),"\n",(0,t.jsxs)(s.li,{children:["All the strings of ",(0,t.jsx)(s.code,{children:"req_skills"})," are ",(0,t.jsx)(s.strong,{children:"unique"}),"."]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"1 <= people.length <= 60"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"0 <= people[i].length <= 16"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"1 <= people[i][j].length <= 16"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"people[i][j]"})," consists of lowercase English letters."]}),"\n",(0,t.jsxs)(s.li,{children:["All the strings of ",(0,t.jsx)(s.code,{children:"people[i]"})," are ",(0,t.jsx)(s.strong,{children:"unique"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Every skill in ",(0,t.jsx)(s.code,{children:"people[i]"})," is a skill in ",(0,t.jsx)(s.code,{children:"req_skills"}),"."]}),"\n",(0,t.jsx)(s.li,{children:"It is guaranteed a sufficient team exists."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"approach-1-dp-bit-masking",children:"Approach 1: DP Bit Masking"}),"\n",(0,t.jsxs)(s.p,{children:['Since the skills are strings, we need to digitise them first. For example, given req_skills = ["java","nodejs","reactjs"], we can turn it to [0, 1, 2] where each number map the corresponding skill. Let ',(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"d"}),(0,t.jsx)(s.mi,{children:"p"}),(0,t.jsx)(s.mo,{stretchy:"false",children:"["}),(0,t.jsx)(s.mi,{children:"i"}),(0,t.jsx)(s.mo,{stretchy:"false",children:"]"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"dp[i]"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"p"}),(0,t.jsx)(s.span,{className:"mopen",children:"["}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"i"}),(0,t.jsx)(s.span,{className:"mclose",children:"]"})]})})]})," be the number of people for the mask ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsx)(s.mi,{children:"i"})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6595em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"i"})]})})]})," and ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"a"}),(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mi,{children:"s"}),(0,t.jsx)(s.mo,{stretchy:"false",children:"["}),(0,t.jsx)(s.mi,{children:"j"}),(0,t.jsx)(s.mo,{stretchy:"false",children:"]"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"ans[j]"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"an"}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"s"}),(0,t.jsx)(s.span,{className:"mopen",children:"["}),(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"}),(0,t.jsx)(s.span,{className:"mclose",children:"]"})]})})]})," be the list of people chosen for mask ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsx)(s.mi,{children:"j"})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"j"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"})]})})]}),". We iterate each people to calculate its skills and iterate each mask to see if adding this person to the team from the old mask could have a smaller team size for the new mask. If so, update ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"d"}),(0,t.jsx)(s.mi,{children:"p"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"dp"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"p"})]})})]})," and add this person to ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"a"}),(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mi,{children:"s"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"ans"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"an"}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"s"})]})})]}),"."]}),"\n",(0,t.jsx)(n,{name:"@wkw"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> smallestSufficientTeam(vector<string>& req_skills, vector<vector<string>>& people) {\n        int n = req_skills.size(), m = people.size();\n        // digitize skills\n        unordered_map<string, int> skills;\n        for (int i = 0; i < n; i++) skills[req_skills[i]] = i;\n        // dp[mask] : number of people for mask\n        vector<int> dp(1 << n, 1e9);\n        // ans[mask] : the list of people for mask\n        vector<vector<int>> ans(1 << n);\n        dp[0] = 0;\n        // iterate people\n        for (int i = 0; i < m; i++) {\n            // skills for the i-th person\n            int p_skill = 0;\n            for (auto s : people[i]) p_skill |= (1 << skills[s]);\n            // compute with previous masks\n            for (int mask = 0; mask < (1 << n); mask++) {\n                // create a new mask\n                int new_mask = mask | p_skill;\n                // check if there is a smaller team for the new_mask\n                if (dp[mask] + 1 < dp[new_mask]) {\n                    dp[new_mask] = dp[mask] + 1;\n                    // take the people from mask\n                    ans[new_mask] = ans[mask];\n                    // and add the i-th person\n                    ans[new_mask].push_back(i);\n                }\n            }\n        }\n        return ans[(1 << n) - 1];\n    }\n};\n"})})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},68906:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var a=n(30758);const t={},i=a.createContext(t);function l(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);