"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[65611],{94965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"2300-2399/maximum-number-of-groups-entering-a-competition-medium","title":"2358 - Maximum Number of Groups Entering a Competition (Medium)","description":"Author: @wkw | https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition","source":"@site/solutions/2300-2399/2358-maximum-number-of-groups-entering-a-competition-medium.md","sourceDirName":"2300-2399","slug":"/2300-2399/maximum-number-of-groups-entering-a-competition-medium","permalink":"/solutions/2300-2399/maximum-number-of-groups-entering-a-competition-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2358-maximum-number-of-groups-entering-a-competition-medium.md","tags":[],"version":"current","sidebarPosition":2358,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition"},"sidebar":"tutorialSidebar","previous":{"title":"2357 - Make Array Zero by Subtracting Equal Amounts (Easy)","permalink":"/solutions/2300-2399/make-array-zero-by-subtracting-equal-amounts-easy"},"next":{"title":"2359 - Find Closest Node to Given Two Nodes (Medium)","permalink":"/solutions/2300-2399/find-closest-node-to-given-two-nodes-medium"}}');var r=t(86070),i=t(68906);const s={description:"Author: @wkw | https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition"},u="2358 - Maximum Number of Groups Entering a Competition (Medium)",m={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach: Math",id:"approach-math",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"2358---maximum-number-of-groups-entering-a-competition-medium",children:"2358 - Maximum Number of Groups Entering a Competition (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition",children:"https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["You are given a positive integer array ",(0,r.jsx)(n.code,{children:"grades"})," which represents the grades of students in a university. You would like to enter ",(0,r.jsx)(n.strong,{children:"all"})," these students into a competition in ",(0,r.jsx)(n.strong,{children:"ordered"})," non-empty groups, such that the ordering meets the following conditions:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The sum of the grades of students in the ",(0,r.jsx)(n.code,{children:"ith"})," group is ",(0,r.jsx)(n.strong,{children:"less than"})," the sum of the grades of students in the ",(0,r.jsx)(n.code,{children:"(i + 1)th"})," group, for all groups (except the last)."]}),"\n",(0,r.jsxs)(n.li,{children:["The total number of students in the ",(0,r.jsx)(n.code,{children:"ith"})," group is ",(0,r.jsx)(n.strong,{children:"less than"})," the total number of students in the ",(0,r.jsx)(n.code,{children:"(i + 1)th"})," group, for all groups (except the last)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsxs)(n.em,{children:["the ",(0,r.jsx)(n.strong,{children:"maximum"})," number of groups that can be formed"]}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: grades = [10,6,12,7,3,5]\nOutput: 3\nExplanation: The following is a possible way to form 3 groups of students:\n- 1st group has the students with grades = [12]. Sum of grades: 12. Student count: 1\n- 2nd group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2\n- 3rd group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3\nIt can be shown that it is not possible to form more than 3 groups.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: grades = [8,8]\nOutput: 1\nExplanation: We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= grades.length <= 10^5"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= grades[i] <= 10^5"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-math",children:"Approach: Math"}),"\n",(0,r.jsxs)(n.p,{children:["We need to form groups of ",(0,r.jsx)(n.code,{children:"1, 2, 3, ..."})," students in order to maximize the number of groups. We can use the formula ",(0,r.jsx)(n.code,{children:"i * (i + 1) / 2"})," to find out the number of students in ",(0,r.jsx)(n.code,{children:"i"})," groups."]}),"\n",(0,r.jsx)(t,{name:"@wkw"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maximumGroups(vector<int>& grades) {\n        int n = grades.size(), i = 0;\n        while (i * (i + 1) / 2 <= n) i++;\n        return i - 1;\n    }\n};\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},68906:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>u});var o=t(30758);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);