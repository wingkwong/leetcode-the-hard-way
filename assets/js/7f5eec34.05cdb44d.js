"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[84755],{36611:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"2100-2199/k-highest-ranked-items-within-a-price-range-medium","title":"2146 - K Highest Ranked Items Within a Price Range (Medium)","description":"Author: @wkw | https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range/","source":"@site/solutions/2100-2199/2146-k-highest-ranked-items-within-a-price-range-medium.md","sourceDirName":"2100-2199","slug":"/2100-2199/k-highest-ranked-items-within-a-price-range-medium","permalink":"/solutions/2100-2199/k-highest-ranked-items-within-a-price-range-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2146-k-highest-ranked-items-within-a-price-range-medium.md","tags":[],"version":"current","sidebarPosition":2146,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range/"},"sidebar":"tutorialSidebar","previous":{"title":"2145 - Count the Hidden Sequences (Medium)","permalink":"/solutions/2100-2199/count-the-hidden-sequences-medium"},"next":{"title":"2147 - Number of Ways to Divide a Long Corridor (Hard)","permalink":"/solutions/2100-2199/number-of-ways-to-divide-a-long-corridor-hard"}}');var r=t(86070),s=t(32790);const o={description:"Author: @wkw | https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range/"},c="2146 - K Highest Ranked Items Within a Price Range (Medium)",h={},a=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: BFS",id:"approach-1-bfs",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"2146---k-highest-ranked-items-within-a-price-range-medium",children:"2146 - K Highest Ranked Items Within a Price Range (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range/",children:"https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["You are given a ",(0,r.jsx)(n.strong,{children:"0-indexed"})," 2D integer array ",(0,r.jsx)(n.code,{children:"grid"})," of size ",(0,r.jsx)(n.code,{children:"m x n"})," that represents a map of the items in a shop. The integers in the grid represent the following:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"})," represents a wall that you cannot pass through."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"})," represents an empty cell that you can freely move to and from."]}),"\n",(0,r.jsx)(n.li,{children:"All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["It takes ",(0,r.jsx)(n.code,{children:"1"})," step to travel between adjacent grid cells."]}),"\n",(0,r.jsxs)(n.p,{children:["You are also given integer arrays ",(0,r.jsx)(n.code,{children:"pricing"})," and ",(0,r.jsx)(n.code,{children:"start"})," where ",(0,r.jsx)(n.code,{children:"pricing = [low, high]"})," and ",(0,r.jsx)(n.code,{children:"start = [row, col]"})," indicates that you start at the position ",(0,r.jsx)(n.code,{children:"(row, col)"})," and are interested only in items with a price in the range of ",(0,r.jsx)(n.code,{children:"[low, high]"})," (",(0,r.jsx)(n.strong,{children:"inclusive"}),"). You are further given an integer ",(0,r.jsx)(n.code,{children:"k"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You are interested in the ",(0,r.jsx)(n.strong,{children:"positions"})," of the ",(0,r.jsx)(n.code,{children:"k"})," ",(0,r.jsx)(n.strong,{children:"highest-ranked"})," items whose prices are ",(0,r.jsx)(n.strong,{children:"within"})," the given price range. The rank is determined by the ",(0,r.jsx)(n.strong,{children:"first"})," of these criteria that is different:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Distance, defined as the length of the shortest path from the ",(0,r.jsx)(n.code,{children:"start"})," (",(0,r.jsx)(n.strong,{children:"shorter"})," distance has a higher rank)."]}),"\n",(0,r.jsxs)(n.li,{children:["Price (",(0,r.jsx)(n.strong,{children:"lower"})," price has a higher rank, but it must be ",(0,r.jsx)(n.strong,{children:"in the price range"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["The row number (",(0,r.jsx)(n.strong,{children:"smaller"})," row number has a higher rank)."]}),"\n",(0,r.jsxs)(n.li,{children:["The column number (",(0,r.jsx)(n.strong,{children:"smaller"})," column number has a higher rank)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsx)(n.em,{children:"the"})," ",(0,r.jsx)(n.code,{children:"k"})," ",(0,r.jsxs)(n.em,{children:["highest-ranked items within the price range ",(0,r.jsx)(n.strong,{children:"sorted"})," by their rank (highest to lowest)"]}),". If there are fewer than ",(0,r.jsx)(n.code,{children:"k"})," reachable items within the price range, return ",(0,r.jsxs)(n.em,{children:[(0,r.jsx)(n.strong,{children:"all"})," of them"]}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2021/12/16/example1drawio.png",alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3\nOutput: [[0,1],[1,1],[2,1]]\nExplanation: You start at (0,0).\nWith a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2).\nThe ranks of these items are:\n- (0,1) with distance 1\n- (1,1) with distance 2\n- (2,1) with distance 3\n- (2,2) with distance 4\nThus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1).\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2021/12/16/example2drawio1.png",alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2\nOutput: [[2,1],[1,2]]\nExplanation: You start at (2,3).\nWith a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 2, price 2\n- (1,2) with distance 2, price 3\n- (1,1) with distance 3\n- (0,1) with distance 4\nThus, the 2 highest ranked items in the price range are (2,1) and (1,2).\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2021/12/30/example3.png",alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3\nOutput: [[2,1],[2,0]]\nExplanation: You start at (0,0).\nWith a price range of [2,3], we can take items from (2,0) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 5\n- (2,0) with distance 6\nThus, the 2 highest ranked items in the price range are (2,1) and (2,0).\nNote that k = 3 but there are only 2 reachable items within the price range.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"m == grid.length"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"n == grid[i].length"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= m, n <= 10^5"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= m * n <= 10^5"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= grid[i][j] <= 10^5"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"pricing.length == 2"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"2 <= low <= high <= 10^5"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"start.length == 2"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= row <= m - 1"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= col <= n - 1"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"grid[row][col] > 0"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= k <= m * n"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-bfs",children:"Approach 1: BFS"}),"\n",(0,r.jsx)(n.p,{children:"This is a standard BFS problem. It is not difficult to implement but we need to pay attention on the requirements."}),"\n",(0,r.jsxs)(n.p,{children:["First we put our starting point to a queue. Then iterate the current queue and check if current cell grid[x][y] is within the price range. If so, we can put this cell to a temporary array for further processing. After that, we try to move in four directions. We need to check the new coordinate ",(0,r.jsx)(n.code,{children:"(next_x, next_y)"})," is within boundary or not. Also we don't want to visit the same cell that we have already visited so we use ",(0,r.jsx)(n.code,{children:"vis[next_x][next_y]"})," to check it. If it is not visited, we add the next cell to the queue and mark it as visited."]}),"\n",(0,r.jsxs)(n.p,{children:["After we have the maximum ",(0,r.jsx)(n.code,{children:"k"})," items, we need to sort them based on their rank from highest to lowest. We can apply a custom sorting comparator here. At the end, we output the coordinate of each cell. One thing to note that the reachable items can be less than ",(0,r.jsx)(n.code,{children:"k"}),", hence we need to take the minimum one of ",(0,r.jsx)(n.code,{children:"tmp.size()"})," and ",(0,r.jsx)(n.code,{children:"k"}),"."]}),"\n",(0,r.jsx)(t,{name:"@wkw"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<vector<int>> highestRankedKItems(vector<vector<int>>& grid, vector<int>& pricing, vector<int>& start, int k) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<int>> vis(n, vector<int>(m, 0));\n        vector<array<int, 3>> tmp;\n        queue<vector<int>> q;\n        q.push(start);\n        int dirx[4] = { -1, 0, 0, 1 };\n        int diry[4] = { 0, 1, -1, 0 };\n        vis[start[0]][start[1]] = 1;\n        int step = 0;\n        while (!q.empty() && tmp.size() < k) {\n            step++;\n            int sz = q.size();\n            for (int it = 0; it < sz; it++) {\n                vector<int> p = q.front(); q.pop();\n                int x = p[0],  y = p[1];\n                if (0 <= x && x < n && 0 <= y && y < m && grid[x][y] != 0) {\n                    if (pricing[0] <= grid[x][y] && grid[x][y] <= pricing[1]) {\n                        tmp.push_back({x, y, step});\n                    }\n                    for (int d = 0; d < 4; d++) {\n                        int next_x = x + dirx[d];\n                        int next_y = y + diry[d];\n                        if (0 <= next_x && next_x < n && 0 <= next_y && next_y < m && !vis[next_x][next_y]) {\n                            vis[next_x][next_y] = 1;\n                            q.push({next_x, next_y});\n                        }\n                    }\n                }\n            }\n        }\n        sort(tmp.begin(), tmp.end(), [&](const array<int, 3>& x, const array<int, 3>& y) {\n            return (x[2] < y[2]) ||\n                   (x[2] == y[2] && grid[x[0]][x[1]] < grid[y[0]][y[1]]) ||\n                   (x[2] == y[2] && grid[x[0]][x[1]] ==  grid[y[0]][y[1]] && x[0] < y[0]) ||\n                   (x[2] == y[2] && grid[x[0]][x[1]] ==  grid[y[0]][y[1]] && x[0] == y[0] && x[1] < y[1]);\n        });\n        vector<vector<int>> ans;\n        for (int i = 0; i < min((int) tmp.size(), k); i++) {\n            ans.push_back({tmp[i][0], tmp[i][1]});\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In fact, a custom comparator is not necessary if we push the criteria in the same order to ",(0,r.jsx)(n.code,{children:"tmp"}),", i.e. distance, price, row number and column number. This is because the ",(0,r.jsx)(n.code,{children:"sort()"})," will sort them based on this order."]}),"\n",(0,r.jsx)(t,{name:"@wkw"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<vector<int>> highestRankedKItems(vector<vector<int>>& grid, vector<int>& pricing, vector<int>& start, int k) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<int>> vis(n, vector<int>(m, 0));\n        // vector<array<int, 3>> tmp;\n        vector<array<int, 4>> tmp;\n        queue<vector<int>> q;\n        q.push(start);\n        int dirx[4] = { -1, 0, 0, 1 };\n        int diry[4] = { 0, 1, -1, 0 };\n        vis[start[0]][start[1]] = 1;\n        int step = 0;\n        while (!q.empty() && tmp.size() < k) {\n            step++;\n            int sz = q.size();\n            for (int it = 0; it < sz; it++) {\n                vector<int> p = q.front(); q.pop();\n                int x = p[0],  y = p[1];\n                if (0 <= x && x < n && 0 <= y && y < m && grid[x][y] != 0) {\n                    if (pricing[0] <= grid[x][y] && grid[x][y] <= pricing[1]) {\n                        // tmp.push_back({x, y, step});\n                        tmp.push_back({step, grid[x][y], x, y});\n                    }\n                    for (int d = 0; d < 4; d++) {\n                        int next_x = x + dirx[d];\n                        int next_y = y + diry[d];\n                        if (0 <= next_x && next_x < n && 0 <= next_y && next_y < m && !vis[next_x][next_y]) {\n                            vis[next_x][next_y] = 1;\n                            q.push({next_x, next_y});\n                        }\n                    }\n                }\n            }\n        }\n        sort(tmp.begin(), tmp.end());\n        // sort(tmp.begin(), tmp.end(), [&](const array<int, 3>& x, const array<int, 3>& y) {\n        //     return (x[2] < y[2]) ||\n        //            (x[2] == y[2] && grid[x[0]][x[1]] < grid[y[0]][y[1]]) ||\n        //            (x[2] == y[2] && grid[x[0]][x[1]] ==  grid[y[0]][y[1]] && x[0] < y[0]) ||\n        //            (x[2] == y[2] && grid[x[0]][x[1]] ==  grid[y[0]][y[1]] && x[0] == y[0] && x[1] < y[1]);\n        // });\n        vector<vector<int>> ans;\n        for (int i = 0; i < min((int) tmp.size(), k); i++) {\n            ans.push_back({tmp[i][2], tmp[i][3]});\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Time Complexity: O(m * n * logk)"}),"\n",(0,r.jsx)(n.p,{children:"Space Complexity: O(m * n)"})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},32790:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(30758);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);