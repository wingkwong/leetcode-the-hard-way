"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[30750],{2703:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"0900-0999/vertical-order-traversal-of-a-binary-tree-hard","title":"0987 - Vertical Order Traversal of a Binary Tree (Hard)","description":"Author: @wingkwong, @lonyehan | https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/","source":"@site/solutions/0900-0999/0987-vertical-order-traversal-of-a-binary-tree-hard.md","sourceDirName":"0900-0999","slug":"/0900-0999/vertical-order-traversal-of-a-binary-tree-hard","permalink":"/solutions/0900-0999/vertical-order-traversal-of-a-binary-tree-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0987-vertical-order-traversal-of-a-binary-tree-hard.md","tags":[{"inline":true,"label":"Hash Table","permalink":"/solutions/tags/hash-table"},{"inline":true,"label":"Tree","permalink":"/solutions/tags/tree"},{"inline":true,"label":"Depth-First Search","permalink":"/solutions/tags/depth-first-search"},{"inline":true,"label":"Breadth-First Search","permalink":"/solutions/tags/breadth-first-search"},{"inline":true,"label":"Binary Tree","permalink":"/solutions/tags/binary-tree"}],"version":"current","sidebarPosition":987,"frontMatter":{"description":"Author: @wingkwong, @lonyehan | https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/","tags":["Hash Table","Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},"sidebar":"tutorialSidebar","previous":{"title":"0985 - Sum of Even Numbers After Queries (Medium)","permalink":"/solutions/0900-0999/sum-of-even-numbers-after-queries.medium"},"next":{"title":"0990 - Satisfiability of Equality Equations (Medium)","permalink":"/solutions/0900-0999/satisfiability-of-equality-equations-medium"}}');var o=r(74848),i=r(28453);const a={description:"Author: @wingkwong, @lonyehan | https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/",tags:["Hash Table","Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},s="0987 - Vertical Order Traversal of a Binary Tree (Hard)",l={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:r,TabItem:t,Tabs:a}=n;return r||u("SolutionAuthor",!0),t||u("TabItem",!0),a||u("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"0987---vertical-order-traversal-of-a-binary-tree-hard",children:"0987 - Vertical Order Traversal of a Binary Tree (Hard)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/",children:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["Given the ",(0,o.jsx)(n.code,{children:"root"})," of a binary tree, calculate the ",(0,o.jsx)(n.strong,{children:"vertical order traversal"})," of the binary tree."]}),"\n",(0,o.jsxs)(n.p,{children:["For each node at position ",(0,o.jsx)(n.code,{children:"(row, col)"}),", its left and right children will be at positions ",(0,o.jsx)(n.code,{children:"(row + 1, col - 1)"})," and ",(0,o.jsx)(n.code,{children:"(row + 1, col + 1)"})," respectively. The root of the tree is at ",(0,o.jsx)(n.code,{children:"(0, 0)"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"vertical order traversal"})," of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values."]}),"\n",(0,o.jsxs)(n.p,{children:["Return ",(0,o.jsxs)(n.em,{children:["the ",(0,o.jsx)(n.strong,{children:"vertical order traversal"})," of the binary tree"]}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation:\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: root = [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: root = [1,2,3,4,6,5,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The number of nodes in the tree is in the range ",(0,o.jsx)(n.code,{children:"[1, 1000]"}),"."]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"0 <= Node.val <= 1000"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-dfs",children:"Approach 1: DFS"}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsxs)(t,{value:"cpp",label:"C++",children:[(0,o.jsx)(r,{name:"@wingkwong"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n     void dfs(TreeNode* root, int col, int row, map<int, map<int, multiset<int>>>& nodes) {\n        // if root is nullptr, then skip it\n        if (!root) return;\n         \n        // insert the current node value to corresponding row and grouped by col.\n        // see above diagram for better understanding\n        // for example, \n        // we add node 1 to nodes[0][0]\n        // we add node 5 to nodes[0][2]. \n        // we add node 6 to nodes[0][2]\n        nodes[col][row].insert(root -> val);\n         \n        // then we perform pre order traversal\n        // see https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree#pre-order\n        // for more understanding on tree traversals\n        // dfs on left sub tree\n        dfs(root-> left, col - 1, row + 1, nodes);\n        // dfs on right sub tree\n        dfs(root-> right, col + 1, row + 1, nodes);\n    }\n    \n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n        // init ans - store the final ans\n        vector<vector<int>> ans;\n        // nodes is used to store the node values grouped by column \n        // see above diagram for better understanding\n        // use multiset here as the value could be same\n        // use map here to take care of the order\n        map<int, map<int, multiset<int>>> nodes;\n        // dfs starting from the root of the tree\n        dfs(root, 0, 0, nodes);\n        // for each column in nodes\n        for (auto column : nodes) {\n            // init col - store the node values for all rows at the current column \n            vector<int> col;\n            // for each row at the current column, we append all the node values to col\n            // for example: column idx = 0, we add row = 0 (node 1) and row = 2 (node 5 & node 6)\n            for (auto rows : column.second) {\n                // we can use `insert` to add all elelments to a vector\n                // instead of adding them one by one\n                col.insert(col.end(), rows.second.begin(), rows.second.end());\n            }\n            // we've processed this col, add it to ans\n            ans.push_back(col);\n        }\n        // return final ans\n        return ans;\n    }\n};\n"})})]}),(0,o.jsxs)(t,{value:"cs",label:"C#",children:[(0,o.jsx)(r,{name:"@lonyehan"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:"public class Solution {\n    public IList<IList<int>> VerticalTraversal(TreeNode root) {\n        Dictionary<int, PriorityQueue<int, double>> dict = new Dictionary<int, PriorityQueue<int, double>>();\n\t\t\n        DFS(root, dict);\n        \n        List<IList<int>> result = new List<IList<int>>();\n        foreach(var v in dict.Keys.OrderBy(x => x)){\n            List<int> temp = new List<int>();\n            while(dict[v].Count != 0){\n                temp.Add(dict[v].Dequeue());\n            }\n            result.Add(temp);\n        }\n        return result;\n    }\n    \n    public void DFS(TreeNode node, Dictionary<int, PriorityQueue<int, double>> dict, int row = 0, int col = 0){\n        if(node == null) return;\n        \n        DFS(node.left, dict, row + 1, col - 1);\n        \n        if(!dict.ContainsKey(col)){\n            dict[col] = new PriorityQueue<int, double>();\n            dict[col].Enqueue(node.val, row + 0.00001 * node.val);\n        }\n        else{\n            dict[col].Enqueue(node.val, row + 0.00001 * node.val);\n        }\n        \n        DFS(node.right, dict, row + 1, col + 1);\n    }\n}\n"})})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(96540);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);