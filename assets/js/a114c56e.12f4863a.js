"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[43617],{38080:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"0700-0799/flood-fill-easy","title":"0733 - Flood Fill (Easy)","description":"Author: @wkw, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/flood-fill/","source":"@site/solutions/0700-0799/0733-flood-fill-easy.md","sourceDirName":"0700-0799","slug":"/0700-0799/flood-fill-easy","permalink":"/solutions/0700-0799/flood-fill-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0700-0799/0733-flood-fill-easy.md","tags":[],"version":"current","sidebarPosition":733,"frontMatter":{"description":"Author: @wkw, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/flood-fill/"},"sidebar":"tutorialSidebar","previous":{"title":"0732 - My Calendar III (Hard)","permalink":"/solutions/0700-0799/my-calendar-iii-hard"},"next":{"title":"0739 - Daily Temperatures","permalink":"/solutions/0700-0799/daily-temperatures-medium"}}');var r=i(86070),t=i(40629);const l={description:"Author: @wkw, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/flood-fill/"},s="0733 - Flood Fill (Easy)",c={},a=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2},{value:"Approach 2: BFS",id:"approach-2-bfs",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{SolutionAuthor:i,TabItem:o,Tabs:l}=n;return i||m("SolutionAuthor",!0),o||m("TabItem",!0),l||m("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"0733---flood-fill-easy",children:"0733 - Flood Fill (Easy)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/flood-fill/",children:"https://leetcode.com/problems/flood-fill/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["An image is represented by an ",(0,r.jsx)(n.code,{children:"m x n"})," integer grid ",(0,r.jsx)(n.code,{children:"image"})," where ",(0,r.jsx)(n.code,{children:"image[i][j]"})," represents the pixel value of the image."]}),"\n",(0,r.jsxs)(n.p,{children:["You are also given three integers ",(0,r.jsx)(n.code,{children:"sr"}),", ",(0,r.jsx)(n.code,{children:"sc"}),", and ",(0,r.jsx)(n.code,{children:"newColor"}),". You should perform a ",(0,r.jsx)(n.strong,{children:"flood fill"})," on the image starting from the pixel ",(0,r.jsx)(n.code,{children:"image[sr][sc]"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To perform a ",(0,r.jsx)(n.strong,{children:"flood fill"}),", consider the starting pixel, plus any pixels connected ",(0,r.jsx)(n.strong,{children:"4-directionally"})," to the starting pixel of the same color as the starting pixel, plus any pixels connected ",(0,r.jsx)(n.strong,{children:"4-directionally"})," to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with ",(0,r.jsx)(n.code,{children:"newColor"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsx)(n.em,{children:"the modified image after performing the flood fill"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg",alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, newColor = 2\nOutput: [[2,2,2],[2,2,2]]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"m == image.length"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"n == image[i].length"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= m, n <= 50"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= image[i][j], newColor < 2^16"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= sr < m"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= sc < n"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-dfs",children:"Approach 1: DFS"}),"\n",(0,r.jsx)(n.p,{children:"First we check if the color at the starting point is same as the target one. If so, we return the input directly. Otherwise, we perform dfs from the starting point to replace the color and do the same thing for four directions. We only perform dfs when the next pixel is within the boundary."}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(o,{value:"py",label:"Python",children:[(0,r.jsx)(i,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:\n        R, C = len(image), len(image[0])\n        color = image[sr][sc]\n        # check if the color is same as the target one\n        # if so, return input directly\n        if color == newColor: return image\n        # dfs function\n        def dfs(r, c):\n            # check if it is same as the original color\n            if image[r][c] == color:\n                # paint it\n                image[r][c] = newColor\n                # check 4 directions\n                # perform dfs only if the next pixel is within boundary\n                if r > 0: dfs(r - 1, c)\n                if r < R - 1: dfs(r + 1, c)\n                if c > 0: dfs(r, c - 1)\n                if c < C - 1: dfs(r, c + 1)\n        # perform flood fill from the starting point\n        dfs(sr, sc)\n        return image\n"})})]}),(0,r.jsxs)(o,{value:"java",label:"Java",children:[(0,r.jsx)(i,{name:"@vigneshshiv"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class Solution {\n\n    public final int NO_DIRS = 4;\n    public int[] DIRS = {0, 1, 0, -1, 0};\n\n    public int[][] floodFill(int[][] image, int sr, int sc, int color) {\n        if (image[sr][sc] == color) return image;\n        Set<String> visited = new HashSet<>();\n        fill(image, sr, sc, image[sr][sc], color, visited);\n        return image;\n    }\n\n    public void fill(int[][] image, int sr, int sc, int color, int newColor, Set<String> visited) {\n        boolean rowInbounds = (0 <= sr && sr < image.length);\n        boolean colInbounds = (0 <= sc && sc < image[0].length);\n        // Check row and column bounds\n        if (!rowInbounds || !colInbounds) return;\n        // If color is not same as existing then skip\n        if (image[sr][sc] != color) return;\n        // Change the color\n        image[sr][sc] = newColor;\n        String key = sr + "#" + sc;\n        // Mark as visited, so that the same row and column won\'t be repeated\n        visited.add(key);\n        for (int idx = 0; idx < NO_DIRS; idx++) {\n            key = sr + DIRS[idx] + "#" + sc + DIRS[idx + 1];\n            if (!visited.contains(key)) {\n                fill(image, sr + DIRS[idx], sc + DIRS[idx + 1], color, newColor, visited);\n            }\n        }\n    }\n}\n'})})]}),(0,r.jsxs)(o,{value:"javascript",label:"JavaScript",children:[(0,r.jsx)(i,{name:"@radojicic23"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} color\n * @return {number[][]}\n */\nvar floodFill = function (image, sr, sc, color) {\n  if (image == null || image[sr][sc] == color) return image;\n  dfs(image, sr, sc, image[sr][sc], color);\n  return image;\n\n  function dfs(image, r, c, initial, color) {\n    if (\n      r < 0 ||\n      r >= image.length ||\n      c < 0 ||\n      c >= image[0].length ||\n      image[r][c] != initial\n    ) {\n      return;\n    }\n    image[r][c] = color;\n    dfs(image, r + 1, c, initial, color);\n    dfs(image, r - 1, c, initial, color);\n    dfs(image, r, c + 1, initial, color);\n    dfs(image, r, c - 1, initial, color);\n  }\n};\n"})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"approach-2-bfs",children:"Approach 2: BFS"}),"\n",(0,r.jsx)(n.p,{children:"Similar idea but in BFS way. Use queue to store the points and search for 4 directions to replace if possible."}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(o,{value:"cpp",label:"C++",children:[(0,r.jsx)(i,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int dirx[4] = { -1, 0, 0, 1};\n    int diry[4] = { 0, 1, -1, 0};\n\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {\n        int oriColor = image[sr][sc];\n        if (oriColor == newColor) return image;\n        int n = image.size(), m = image[0].size();\n        queue<pair<int, int>> q;\n        q.push({sr, sc});\n        while(!q.empty()) {\n            auto [x, y] = q.front();\n            q.pop();\n            image[x][y] = newColor;\n            for(int i = 0; i < 4; i++) {\n                int next_x = x + dirx[i];\n                int next_y = y + diry[i];\n                if(next_x < 0 || next_y < 0 || next_x > n - 1 || next_y > m - 1 || image[next_x][next_y] != oriColor) continue;\n                image[next_x][next_y] = newColor;\n                q.push({next_x, next_y});\n            }\n        }\n        return image;\n    }\n};\n"})})]}),(0,r.jsxs)(o,{value:"py",label:"Python",children:[(0,r.jsx)(i,{name:"@dhanu084"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"class Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:\n        queue = deque([(sr, sc)])\n        visited = set([(sr, sc)])\n        n,m = len(image), len(image[0])\n        source_color = image[sr][sc]\n\n        while queue:\n            size = len(queue)\n\n            for i in range(size):\n                x, y = queue.popleft()\n                image[x][y] = color\n                for r, c in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                    row = x + r\n                    col = y + c\n\n                    if row < 0 or row >= n or col < 0 or col >= m or image[row][col] != source_color or (row, col) in visited:\n                        continue\n                    visited.add((row, col))\n                    queue.append((row, col))\n        return image\n"})})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var o=i(30758);const r={},t=o.createContext(r);function l(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);