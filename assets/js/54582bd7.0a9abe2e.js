"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[85936],{63977:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"2100-2199/longest-palindrome-by-concatenating-two-letter-words-medium","title":"2131 - Longest Palindrome by Concatenating Two Letter Words (Medium)","description":"Author: @wkw | https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/","source":"@site/solutions/2100-2199/2131-longest-palindrome-by-concatenating-two-letter-words-medium.md","sourceDirName":"2100-2199","slug":"/2100-2199/longest-palindrome-by-concatenating-two-letter-words-medium","permalink":"/solutions/2100-2199/longest-palindrome-by-concatenating-two-letter-words-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2131-longest-palindrome-by-concatenating-two-letter-words-medium.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Hash Table","permalink":"/solutions/tags/hash-table"},{"inline":true,"label":"String","permalink":"/solutions/tags/string"},{"inline":true,"label":"Greedy","permalink":"/solutions/tags/greedy"},{"inline":true,"label":"Counting","permalink":"/solutions/tags/counting"}],"version":"current","sidebarPosition":2131,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/","tags":["Array","Hash Table","String","Greedy","Counting"]},"sidebar":"tutorialSidebar","previous":{"title":"2127 - Maximum Employees to Be Invited to a Meeting (Hard)","permalink":"/solutions/2100-2199/maximum-employees-to-be-invited-to-a-meeting-hard"},"next":{"title":"2144 - Minimum Cost of Buying Candies With Discount (Easy)","permalink":"/solutions/2100-2199/minimum-cost-of-buying-candies-with-discount-easy"}}');var o=t(86070),s=t(32790);const r={description:"Author: @wkw | https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/",tags:["Array","Hash Table","String","Greedy","Counting"]},i="2131 - Longest Palindrome by Concatenating Two Letter Words (Medium)",l={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map",id:"approach-1-hash-map",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:t,TabItem:a,Tabs:r}=n;return t||m("SolutionAuthor",!0),a||m("TabItem",!0),r||m("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"2131---longest-palindrome-by-concatenating-two-letter-words-medium",children:"2131 - Longest Palindrome by Concatenating Two Letter Words (Medium)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/",children:"https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["You are given an array of strings ",(0,o.jsx)(n.code,{children:"words"}),". Each element of ",(0,o.jsx)(n.code,{children:"words"})," consists of ",(0,o.jsx)(n.strong,{children:"two"})," lowercase English letters."]}),"\n",(0,o.jsxs)(n.p,{children:["Create the ",(0,o.jsx)(n.strong,{children:"longest possible palindrome"})," by selecting some elements from ",(0,o.jsx)(n.code,{children:"words"})," and concatenating them in ",(0,o.jsx)(n.strong,{children:"any order"}),". Each element can be selected ",(0,o.jsx)(n.strong,{children:"at most once"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Return ",(0,o.jsxs)(n.em,{children:["the ",(0,o.jsx)(n.strong,{children:"length"})," of the longest palindrome that you can create"]}),". If it is impossible to create any palindrome, return ",(0,o.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.strong,{children:"palindrome"})," is a string that reads the same forward and backward."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: words = ["lc","cl","gg"]\nOutput: 6\nExplanation: One longest palindrome is "lc" + "gg" + "cl" = "lcggcl", of length 6.\nNote that "clgglc" is another longest palindrome that can be created.\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: words = ["ab","ty","yt","lc","cl","ab"]\nOutput: 8\nExplanation: One longest palindrome is "ty" + "lc" + "cl" + "yt" = "tylcclyt", of length 8.\nNote that "lcyttycl" is another longest palindrome that can be created.\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: words = ["cc","ll","xx"]\nOutput: 2\nExplanation: One longest palindrome is "cc", of length 2.\nNote that "ll" is another longest palindrome that can be created, and so is "xx".\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= words.length <= 1e5"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"words[i].length == 2"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"words[i]"})," consists of lowercase English letters."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-hash-map",children:"Approach 1: Hash Map"}),"\n",(0,o.jsx)(r,{children:(0,o.jsxs)(a,{value:"cpp",label:"C++",children:[(0,o.jsx)(t,{name:"@wkw"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:'// a palindrome is a string that reads the same forward and backward\n// e.g. "aa", "abba", "aaaa", "lcggcl", etc ...\n// we can see that the left half part is the reversed version of the right half part\n// e.g. "a | a", "ab | ba", "aa | aa", "lcg | gcl", etc ...\n// for example, if we have "ab" and "ba", we can form "abba" which is a palindrome\n// and if we have "lc" and "cl", we can form "lccl"\n// and we can add it to the previous palindrome in the middle place to make it longer\n// e.g. ab[lccl]ba -> ablcclba\n\n// case 1: the word is not same as the reversed self, e.g. "ab" != "ba"\n// in this case, we need its reveresd string, i.e. ba to form "abba" as a palindrome\n\n// case 2: the word is same as the reversed self, e.g. "aa" == "aa"\n// case 2.1: if it is even, we could place it in the middle or on the side\n// e.g. [aa]abba[aa]\n// case 2.2: if the frequency of "aa" is odd, we could only place it in the middle\n// e.g. ab[aa]ba\n// since even + 1 = odd, we can put all even "aa" on the side, and put one in the middle\n// e.g. [aa]ab[aa]ba[aa]\n\nclass Solution {\npublic:\n    // to reverse a string, there are multiple ways to do it\n    // in this example, STL reverse will be used\n    string reversed(string s) {\n        string t = s;\n        reverse(t.begin(), t.end());\n        return t;\n    }\n    int longestPalindrome(vector<string>& words) {\n        int ans = 0, middle = 0;\n        // count the frequency of each word\n        unordered_map<string, int> cnt;\n        for (auto word : words) cnt[word]++;\n        for (auto [s, f] : cnt) {\n            // using rev(s) is just to generalise the solution\n            // in this problem, we can just check if s[0] != s[1]\n            string rev = reversed(s);\n            if (s != rev) {\n                // case 1: the word is not same as the reversed self, e.g. "ab" != "ba"\n                // find the reversed self\n                if (cnt.count(rev)) {\n                    // if it can be found,\n                    // then we can only include the min of their counts\n                    // e.g. "ab", "ba", "ba", "ba"\n                    // we can only form "abba" as we don\'t have enough "ab" for the rest of "ba"\n                    // p.s `cnt[s]` is same as `f`\n                    ans += min(cnt[s], cnt[rev]);\n                }\n                // Alternatively, you can use STL\n                // auto it = cnt.find(rev);\n                // if (it != cnt.end()) ans += min(f, it->second);\n\n            } else {\n                // case 2: both character are same, e.g. aa\n                // we can put it on both side\n                ans += f;\n                // however, if the frequency is odd\n                if (f & 1) {\n                    // we can place one in the middle and others on the side\n                    middle = 1;\n                    ans -= 1;\n                }\n            }\n        }\n        ans += middle;\n        // at the end, we need to multiply the answer by 2\n        // e.g. if frequency of "aa" is 2, the longest palindrome is 4 ("aaaa")\n        return 2 * ans;\n    }\n};\n'})})]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(30758);const o={},s=a.createContext(o);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);