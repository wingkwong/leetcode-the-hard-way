"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1359],{42145:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"1000-1099/greatest-common-divisor-of-strings-easy","title":"1071 - Greatest Common Divisor of Strings (Easy)","description":"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/greatest-common-divisor-of-strings/","source":"@site/solutions/1000-1099/1071-greatest-common-divisor-of-strings-easy.md","sourceDirName":"1000-1099","slug":"/1000-1099/greatest-common-divisor-of-strings-easy","permalink":"/solutions/1000-1099/greatest-common-divisor-of-strings-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1000-1099/1071-greatest-common-divisor-of-strings-easy.md","tags":[{"inline":true,"label":"Math","permalink":"/solutions/tags/math"},{"inline":true,"label":"String","permalink":"/solutions/tags/string"}],"version":"current","sidebarPosition":1071,"frontMatter":{"description":"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/greatest-common-divisor-of-strings/","tags":["Math","String"]},"sidebar":"tutorialSidebar","previous":{"title":"1066 - Campus Bikes II (Medium)","permalink":"/solutions/1000-1099/campus-bikes-ii-medium"},"next":{"title":"1100 - 1199","permalink":"/solutions/category/1100---1199"}}');var r=t(74848),i=t(28453);const o={description:"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/greatest-common-divisor-of-strings/",tags:["Math","String"]},l="1071 - Greatest Common Divisor of Strings (Easy)",c={},a=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Optimal Solution - String equals with GCD",id:"approach-1-optimal-solution---string-equals-with-gcd",level:2},{value:"Approach 2: Substring Division",id:"approach-2-substring-division",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:t,TabItem:s,Tabs:o}=n;return t||m("SolutionAuthor",!0),s||m("TabItem",!0),o||m("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"1071---greatest-common-divisor-of-strings-easy",children:"1071 - Greatest Common Divisor of Strings (Easy)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/greatest-common-divisor-of-strings/",children:"https://leetcode.com/problems/greatest-common-divisor-of-strings/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["For two strings ",(0,r.jsx)(n.code,{children:"s"})," and ",(0,r.jsx)(n.code,{children:"t"}),', we say "',(0,r.jsx)(n.code,{children:"t"})," divides ",(0,r.jsx)(n.code,{children:"s"}),'" if and only if ',(0,r.jsx)(n.code,{children:"s = t + ... + t"})," (i.e., ",(0,r.jsx)(n.code,{children:"t"})," is concatenated with itself one or more times)."]}),"\n",(0,r.jsxs)(n.p,{children:["Given two strings ",(0,r.jsx)(n.code,{children:"str1"})," and ",(0,r.jsx)(n.code,{children:"str2"}),", return ",(0,r.jsx)(n.em,{children:"the largest string"}),(0,r.jsx)(n.code,{children:"x"}),(0,r.jsx)(n.em,{children:"such that"}),(0,r.jsx)(n.code,{children:"x"}),(0,r.jsx)(n.em,{children:"divides both"}),(0,r.jsx)(n.code,{children:"str1"}),(0,r.jsx)(n.em,{children:"and"}),(0,r.jsx)(n.code,{children:"str2"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: str1 = "ABCABC", str2 = "ABC"\nOutput: "ABC"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: str1 = "ABABAB", str2 = "ABAB"\nOutput: "AB"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: str1 = "LEET", str2 = "CODE"\nOutput: ""\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= str1.length, str2.length <= 1000"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"str1"})," and ",(0,r.jsx)(n.code,{children:"str2"})," consist of English uppercase letters."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-optimal-solution---string-equals-with-gcd",children:"Approach 1: Optimal Solution - String equals with GCD"}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsxs)(s,{value:"py",label:"Python",children:[(0,r.jsx)(t,{name:"@wingkwong"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        # if str1 + str2 == str2 + str1 is true, that means they have the same divisor\n        # see example 1: "ABCABC" + "ABC" = "ABC" + "ABCABC"\n        # if there is no such divisor, then return ""\n        # otherwise, we can use gcd to find the lengths\n        # the answer is either \n        # - str1[0 .. g] or \n        # - str2[0 .. g]\n        # where g is the gcd of their length\n        return "" if str1 + str2 != str2 + str1 else str1[:gcd(len(str1), len(str2))]\n'})})]}),(0,r.jsxs)(s,{value:"java",label:"java",children:[(0,r.jsx)(t,{name:"@vigneshshiv"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class Solution {\n\n    /**\n     * m - Str1, n - str2\n     * \n     * Time complexity - O(m + n)\n     * Space complexity - O(1)\n     */\n    public String gcdOfStrings(String str1, String str2) {\n        if (!Objects.equals(str1 + str2, str2 + str1)) {\n            return "";\n        }\n        return str1.substring(0, gcd(str1.length(), str2.length()));\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) return a;\n        return gcd(b, a % b);\n    }\n}\n'})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"approach-2-substring-division",children:"Approach 2: Substring Division"}),"\n",(0,r.jsxs)(n.p,{children:["As stated in the problem, ",(0,r.jsx)(n.code,{children:"t"})," divides ",(0,r.jsx)(n.code,{children:"s"})," which means length of ",(0,r.jsx)(n.code,{children:"t"})," is either ",(0,r.jsx)(n.code,{children:"equal"})," or ",(0,r.jsx)(n.code,{children:"factor"})," of ",(0,r.jsx)(n.code,{children:"t"})," & ",(0,r.jsx)(n.code,{children:"s"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["First, iterate over the smallest string ",(0,r.jsx)(n.code,{children:"min(t, s)"}),", use the ",(0,r.jsx)(n.code,{children:"index"})," to substring(0, index) and divide both ",(0,r.jsx)(n.code,{children:"s"})," & ",(0,r.jsx)(n.code,{children:"t"})," and\nif there's no reminder then apply factor (no. of times) with str1 and str2 to find string equals."]}),"\n",(0,r.jsx)(o,{children:(0,r.jsxs)(s,{value:"java",label:"Java",children:[(0,r.jsx)(t,{name:"@vigneshshiv"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class Solution {\n\n    /**\n     * m - Str1, n - str2\n     * \n     * Time complexity - O(min(m, n) * (m + n))\n     * Space complexity - O(1)\n     */\n    public String gcdOfStrings(String str1, String str2) {\n        int str1Len = str1.length(), str2Len = str2.length();\n        // Check 1st char in both strings\n        if (str1.charAt(0) != str2.charAt(0)) {\n            return "";\n        }\n        // Function - Check both strings are factor by divisor substring length\n        Function<Integer, Boolean> isDivisor = len -> {\n            if (str1Len % len != 0 || str2Len % len != 0) {\n                return false;\n            }\n            int f1 = str1Len / len, f2 = str2Len / len;\n            String mini = str2.substring(0, len);\n            return Objects.equals(mini.repeat(f1), str1) && Objects.equals(mini.repeat(f2), str2);\n        };\n        for (int i = Math.min(str1Len, str2Len); i > 0; i--) {\n            if (isDivisor.apply(i)) {\n                return str1.substring(0, i);\n            }\n        }\n        return "";\n    }\n}\n'})})]})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);