"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[55507],{2241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"0000-0099/remove-nth-node-from-end-of-list-medium","title":"0019 - Remove Nth Node From End of List (Easy)","description":"Author: @vigneshshiv, @wkw, @radojicic23 | https://leetcode.com/problems/remove-nth-node-from-end-of-list/","source":"@site/solutions/0000-0099/0019-remove-nth-node-from-end-of-list-medium.md","sourceDirName":"0000-0099","slug":"/0000-0099/remove-nth-node-from-end-of-list-medium","permalink":"/solutions/0000-0099/remove-nth-node-from-end-of-list-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0019-remove-nth-node-from-end-of-list-medium.md","tags":[],"version":"current","sidebarPosition":19,"frontMatter":{"description":"Author: @vigneshshiv, @wkw, @radojicic23 | https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},"sidebar":"tutorialSidebar","previous":{"title":"0017 - Letter Combinations of a Phone Number (Medium)","permalink":"/solutions/0000-0099/letter-combinations-of-a-phone-number-medium"},"next":{"title":"0020 - Valid Parentheses (Easy)","permalink":"/solutions/0000-0099/valid-parentheses-easy"}}');var a=t(86070),i=t(68906);const l={description:"Author: @vigneshshiv, @wkw, @radojicic23 | https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},o="0019 - Remove Nth Node From End of List (Easy)",r={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Fast and Slow Pointer",id:"approach-1-fast-and-slow-pointer",level:2},{value:"Approach 2: Iteration with One Pass Solution",id:"approach-2-iteration-with-one-pass-solution",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:t,TabItem:s,Tabs:l}=n;return t||m("SolutionAuthor",!0),s||m("TabItem",!0),l||m("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"0019---remove-nth-node-from-end-of-list-easy",children:"0019 - Remove Nth Node From End of List (Easy)"})}),"\n",(0,a.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/",children:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"})}),"\n",(0,a.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,a.jsxs)(n.p,{children:["Given the ",(0,a.jsx)(n.code,{children:"head"})," of a linked list, remove the ",(0,a.jsx)(n.code,{children:"nth"})," node from the end of the list and return its head."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg",alt:"Alt text"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: head = [1], n = 1\nOutput: []\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: head = [1, 2], n = 1\nOutput: [1]\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The number of nodes in the list is ",(0,a.jsx)(n.code,{children:"sz"}),"."]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= sz <= 30"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"0 <= Node.val <= 100"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= n <= sz"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Follow up:"})," Could you do this in one pass?"]}),"\n",(0,a.jsx)(n.h2,{id:"approach-1-fast-and-slow-pointer",children:"Approach 1: Fast and Slow Pointer"}),"\n",(0,a.jsxs)(l,{children:[(0,a.jsxs)(s,{value:"cpp",label:"C++",children:[(0,a.jsx)(t,{name:"@wkw"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\nclass Solution {\npublic:\n    // the general idea is to use fast & slow pointers\n    // 1. traverse L - n nodes from the start of the list using fast pointer\n    // where L is the length of the linked list\n    // e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n    // 2. traverse slow pointer until fast pointer reaches the last node\n    // e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n    // 3. update slow next node\n    // e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n    // therefore, we have 1 -> 2 -> 3 -> 5 at the end\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n\t\t// move fast pointer to the n + 1 element\n        // now the distance between slow and fast pointer is n nodes\n        while (n--) fast = fast->next;\n        // if fast reached the end, we need to remove the first element\n        // e.g. head = [1], n = 1\n        if (fast == nullptr) return head->next;\n        // move both pointers at the same time until the fast pointer reaches the end\n        while (fast->next != nullptr) {\n            fast = fast->next;\n            slow = slow->next;\n        }\n        // slow pointer will be pointing to the node before the one to be removed\n        // then we update the next node of the slow pointer\n        slow->next = slow->next->next;\n        return head;\n    }\n};\n"})})]}),(0,a.jsxs)(s,{value:"java",label:"Java",children:[(0,a.jsx)(t,{name:"@wkw"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode slow = head;\n        ListNode fast = head;\n        // move fast pointer to the n + 1 element\n        // now the distance between slow and fast pointer is n nodes\n        for (int i = 0; i < n; i++) fast = fast.next;\n        // if fast reached the end, we need to remove the first element\n        // e.g. head = [1], n = 1\n        if (fast == null) return head.next;\n        // move both pointers at the same time until\n        // the fast pointer reaches the end\n        while (fast.next != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        // slow pointer will be pointing to the node before the one to be removed\n        // then we update the next node of the slow pointer\n        slow.next = slow.next.next;\n        return head;\n    }\n}\n"})})]}),(0,a.jsxs)(s,{value:"go",label:"Go",children:[(0,a.jsx)(t,{name:"@wkw"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\n\n// the general idea is to use fast & slow pointers\n// 1. traverse L - n nodes from the start of the list using fast pointer\n// where L is the length of the linked list\n// e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n// 2. traverse slow pointer until fast pointer reaches the last node\n// e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n// 3. update slow next node\n// e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n// therefore, we have 1 -> 2 -> 3 -> 5 at the end\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    slow := head\n    fast := head\n    // move fast pointer to the n + 1 element\n    // now the distance between slow and fast pointer is n nodes\n    for i := 0; i < n; i++ {\n        fast = fast.Next\n    }\n    // if fast reached the end, we need to remove the first element\n    // e.g. head = [1], n = 1\n    if fast == nil {\n        return head.Next\n    }\n    // move both pointers at the same time until\n    // the fast pointer reaches the end\n    for fast.Next != nil {\n        fast = fast.Next\n        slow = slow.Next\n    }\n    // slow pointer will be pointing to the node before to one to be removed\n    // then we update the next node of the slow pointer\n    slow.Next = slow.Next.Next\n    return head\n}\n"})})]}),(0,a.jsxs)(s,{value:"py",label:"Python",children:[(0,a.jsx)(t,{name:"@wkw"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\n# Time Complexity: O(N) where N is the number of nodes\n# Space Complexity: O(1)\nclass Solution:\n    # the general idea is to use fast & slow pointers\n    # 1. traverse L - n nodes from the start of the list using fast pointer\n    # where L is the length of the linked list\n    # e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n    # 2. traverse slow pointer until fast pointer reaches the last node\n    # e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n    # 3. update slow next node\n    # e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n    # therefore, we have 1 -> 2 -> 3 -> 5 at the end\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        slow = fast = head\n\t\t# move fast pointer to the n + 1 element\n        # now the distance between slow and fast pointer is n nodes\n        for i in range(n): fast = fast.next\n        # if fast reached the end, we need to remove the first element\n        # e.g. head = [1], n = 1\n        if fast is None: return head.next\n        # move both pointers at the same time until the fast pointer reaches the end\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        # slow pointer will be pointing to the node before the one to be removed\n        # then we update the next node of the slow pointer\n        slow.next = slow.next.next\n        return head\n"})})]}),(0,a.jsxs)(s,{value:"js",label:"JavaScript",children:[(0,a.jsx)(t,{name:"@radojicic23"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function (head, n) {\n  let slow = head;\n  let fast = head;\n  for (i = 0; i < n; i++) {\n    fast = fast.next;\n  }\n  if (fast == null) {\n    return head.next;\n  }\n  while (fast.next) {\n    slow = slow.next;\n    fast = fast.next;\n  }\n  slow.next = slow.next.next;\n  return head;\n};\n"})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"approach-2-iteration-with-one-pass-solution",children:"Approach 2: Iteration with One Pass Solution"}),"\n",(0,a.jsx)(n.p,{children:"Decrement N and iterate fast and slow pointers, but only start slow pointer once N hit zero.."}),"\n",(0,a.jsxs)(n.p,{children:["As stated in Example 1: ",(0,a.jsx)(n.code,{children:"1 -> 2 -> 3 -> 4 -> 5"}),", and ",(0,a.jsx)(n.code,{children:"n = 2"})]}),"\n",(0,a.jsxs)(n.p,{children:["Size of the linked list is ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"5"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"5"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"5"})]})})]}),", and remove 2nd Node (",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"4"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"4"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"4"})]})})]}),") from the last, so we need to stop at 3rd Node (",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"3"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"3"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"3"})]})})]}),") from first when we iterate."]}),"\n",(0,a.jsxs)(n.p,{children:["Iterate with fast pointer, till ",(0,a.jsx)(n.code,{children:"N"})," becomes ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"0"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"0"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"0"})]})})]}),", fast pointer move to 3rd Node (",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"3"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"3"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"3"})]})})]}),") then start with slow pointer."]}),"\n",(0,a.jsxs)(n.p,{children:["Fast pointer is ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"2"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"2"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"2"})]})})]})," steps away to reach end (from the current 3rd Node (",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"3"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"3"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"3"})]})})]}),")). While we iterate till last node, fast pointer reach end at 5th node (",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"5"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"5"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"5"})]})})]}),") and eventually slow pointer stops at 3rd Node (3), finally change the pointer to the ",(0,a.jsx)(n.strong,{children:"next next node"}),", that's it."]}),"\n",(0,a.jsxs)(n.p,{children:["Time Complexity: ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"O"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"("}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(n.span,{className:"mopen",children:"("}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mclose",children:")"})]})})]}),", where ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mi,{children:"n"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]})," - # of nodes in the list"]}),"\n",(0,a.jsxs)(n.p,{children:["Space complexity: ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"O"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"("}),(0,a.jsx)(n.mn,{children:"1"}),(0,a.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(n.span,{className:"mopen",children:"("}),(0,a.jsx)(n.span,{className:"mord",children:"1"}),(0,a.jsx)(n.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,a.jsxs)(l,{children:[(0,a.jsxs)(s,{value:"java",label:"Java",children:[(0,a.jsx)(t,{name:"@vigneshshiv"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        // Dummy head pointer to return head reference at the last\n        ListNode current = new ListNode();\n        current.next = head;\n        // Initialize slow and fast pointer to dummy head\n        ListNode slow = current, fast = current;\n        while (fast.next != null) {\n            fast = fast.next;\n            if (n <= 0) {\n                slow = slow.next;\n            }\n            n -= 1;\n        }\n        slow.next = slow.next.next;\n        // Head reference\n        return current.next;\n    }\n}\n"})})]}),(0,a.jsxs)(s,{value:"py",label:"Python",children:[(0,a.jsx)(t,{name:"@radojicic23"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        dummy = ListNode(next=head)\n        slow, fast = dummy, dummy\n        while fast.next:\n            fast = fast.next\n            if n <= 0:\n                slow = slow.next\n            n -= 1\n        slow.next = slow.next.next\n        return dummy.next\n"})})]}),(0,a.jsxs)(s,{value:"js",label:"JavaScript",children:[(0,a.jsx)(t,{name:"@radojicic23"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function (head, n) {\n  let dummy = new ListNode();\n  dummy.next = head;\n  let slow = dummy,\n    fast = dummy;\n  while (fast.next) {\n    fast = fast.next;\n    if (n <= 0) {\n      slow = slow.next;\n    }\n    n--;\n  }\n  slow.next = slow.next.next;\n  return dummy.next;\n};\n"})})]}),(0,a.jsxs)(s,{value:"cpp",label:"C++",children:[(0,a.jsx)(t,{name:"@radojicic23"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode();\n        dummy->next = head;\n        auto slow = dummy, fast = dummy;\n        while (fast->next) {\n            fast = fast->next;\n            if (n <= 0) {\n                slow = slow->next;\n            }\n            n--;\n        }\n        slow->next= slow->next->next;\n        return dummy->next;\n    }\n};\n"})})]})]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(30758);const a={},i=s.createContext(a);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);