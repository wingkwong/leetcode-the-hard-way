"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[75505],{53669:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"1700-1799/find-nearest-point-that-has-the-same-x-or-y-coordinate-easy","title":"1779 - Find Nearest Point That Has the Same X or Y Coordinate (Easy)","description":"Author: @wkw | https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/","source":"@site/solutions/1700-1799/1779-find-nearest-point-that-has-the-same-x-or-y-coordinate-easy.md","sourceDirName":"1700-1799","slug":"/1700-1799/find-nearest-point-that-has-the-same-x-or-y-coordinate-easy","permalink":"/solutions/1700-1799/find-nearest-point-that-has-the-same-x-or-y-coordinate-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1700-1799/1779-find-nearest-point-that-has-the-same-x-or-y-coordinate-easy.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"}],"version":"current","sidebarPosition":1779,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/","tags":["Array"]},"sidebar":"tutorialSidebar","previous":{"title":"1770 - Maximum Score from Performing Multiplication Operations (Medium)","permalink":"/solutions/1700-1799/maximum-score-from-performing-multiplication-operations-medium"},"next":{"title":"1790 - Check if One String Swap Can Make Strings Equal (Easy)","permalink":"/solutions/1700-1799/check-if-one-string-swap-can-make-strings-equal-easy"}}');var a=t(86070),i=t(32790);const r={description:"Author: @wkw | https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/",tags:["Array"]},o="1779 - Find Nearest Point That Has the Same X or Y Coordinate (Easy)",l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:t,TabItem:s,Tabs:r}=n;return t||p("SolutionAuthor",!0),s||p("TabItem",!0),r||p("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"1779---find-nearest-point-that-has-the-same-x-or-y-coordinate-easy",children:"1779 - Find Nearest Point That Has the Same X or Y Coordinate (Easy)"})}),"\n",(0,a.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/",children:"https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/"})}),"\n",(0,a.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,a.jsxs)(n.p,{children:["You are given two integers, ",(0,a.jsx)(n.code,{children:"x"})," and ",(0,a.jsx)(n.code,{children:"y"}),", which represent your current location on a Cartesian grid: ",(0,a.jsx)(n.code,{children:"(x, y)"}),". You are also given an array ",(0,a.jsx)(n.code,{children:"points"})," where each ",(0,a.jsx)(n.code,{children:"points[i] = [ai, bi]"})," represents that a point exists at ",(0,a.jsx)(n.code,{children:"(ai, bi)"}),". A point is ",(0,a.jsx)(n.strong,{children:"valid"})," if it shares the same x-coordinate or the same y-coordinate as your location."]}),"\n",(0,a.jsxs)(n.p,{children:["Return ",(0,a.jsxs)(n.em,{children:["the index ",(0,a.jsx)(n.strong,{children:"(0-indexed)"})," of the ",(0,a.jsx)(n.strong,{children:"valid"})," point with the smallest ",(0,a.jsx)(n.strong,{children:"Manhattan distance"})," from your current location"]}),". If there are multiple, return ",(0,a.jsxs)(n.em,{children:["the valid point with the ",(0,a.jsx)(n.strong,{children:"smallest"})," index"]}),". If there are no valid points, return ",(0,a.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Manhattan distance"})," between two points ",(0,a.jsx)(n.code,{children:"(x1, y1)"})," and ",(0,a.jsx)(n.code,{children:"(x2, y2)"})," is ",(0,a.jsx)(n.code,{children:"abs(x1 - x2) + abs(y1 - y2)"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\nOutput: 2\nExplanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: x = 3, y = 4, points = [[3,4]]\nOutput: 0\nExplanation: The answer is allowed to be on the same location as your current location.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: x = 3, y = 4, points = [[2,3]]\nOutput: -1\nExplanation: There are no valid points.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= points.length <= 10^4"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"points[i].length == 2"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= x, y, ai, bi <= 10^4"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"approach-1-brute-force",children:"Approach 1: Brute Force"}),"\n",(0,a.jsxs)(n.p,{children:["For each point, we simply check if the current point has the same X or Y coordinate and calculate the distance between that and the target point ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mo,{stretchy:"false",children:"("}),(0,a.jsx)(n.mi,{children:"x"}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"y"}),(0,a.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"(x, y)"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mopen",children:"("}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"y"}),(0,a.jsx)(n.span,{className:"mclose",children:")"})]})})]}),". If we find the one with smaller distance, update the distance and answer."]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsxs)(s,{value:"cpp",label:"C++",children:[(0,a.jsx)(t,{name:"@wkw"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int nearestValidPoint(int x, int y, vector<vector<int>>& points) {\n        int ans = -1, mi = INT_MAX;\n        for(int i = 0; i < points.size(); i++) {\n            auto p = points[i];\n            if(x == p[0] || y == p[1]) {\n                if(abs(x - p[0]) + abs(y - p[1]) < mi) {\n                    mi = abs(x - p[0]) + abs(y - p[1]);\n                    ans = i;\n                }\n            }\n        }\n        return ans;\n    }\n};\n"})})]}),(0,a.jsxs)(s,{value:"rs",label:"Rust",children:[(0,a.jsx)(t,{name:"@wkw"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rs",children:"impl Solution {\n    pub fn nearest_valid_point(x: i32, y: i32, points: Vec<Vec<i32>>) -> i32 {\n        let mut mi = std::i32::MAX;\n        let mut ans = -1;\n        for (i, p) in points.into_iter().enumerate() {\n            if p[0] == x || p[1] == y {\n                let d = (p[0] - x).abs() + (p[1] - y).abs();\n                if (d < mi) {\n                    mi = d;\n                    ans = i as i32;\n                }\n            }\n        }\n        ans\n    }\n}\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(30758);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);