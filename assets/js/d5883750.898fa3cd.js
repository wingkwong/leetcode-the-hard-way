"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[14099],{24547:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"0000-0099/add-binary-easy","title":"0067 - Add Binary (easy)","description":"Author: @DoubleSpicy | https://leetcode.com/problems/add-binary/","source":"@site/solutions/0000-0099/0067-add-binary-easy.md","sourceDirName":"0000-0099","slug":"/0000-0099/add-binary-easy","permalink":"/solutions/0000-0099/add-binary-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0067-add-binary-easy.md","tags":[],"version":"current","sidebarPosition":67,"frontMatter":{"description":"Author: @DoubleSpicy | https://leetcode.com/problems/add-binary/"},"sidebar":"tutorialSidebar","previous":{"title":"0066 - Plus One (Easy)","permalink":"/solutions/0000-0099/plus-one-easy"},"next":{"title":"0069 - Sqrt(x) (Easy)","permalink":"/solutions/0000-0099/sqrt-x-easy"}}');var i=n(74848),r=n(28453);const t={description:"Author: @DoubleSpicy | https://leetcode.com/problems/add-binary/"},l="0067 - Add Binary (easy)",c={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Adding Digits One By One",id:"approach-1-adding-digits-one-by-one",level:2}];function d(e){const s={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"0067---add-binary-easy",children:"0067 - Add Binary (easy)"})}),"\n",(0,i.jsx)(s.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://leetcode.com/problems/add-binary/",children:"https://leetcode.com/problems/add-binary/"})}),"\n",(0,i.jsx)(s.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(s.p,{children:["Given two binary strings ",(0,i.jsx)(s.code,{children:"a"})," and ",(0,i.jsx)(s.code,{children:"b"}),", return their sum as a binary string."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: a = "11", b = "1"\nOutput: "100"\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: a = "1010", b = "1011"\nOutput: "10101"\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: num = "10", k = 2\nOutput: "0"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mn,{children:"1"}),(0,i.jsx)(s.mo,{children:"<"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"."}),(0,i.jsx)(s.mi,{children:"l"}),(0,i.jsx)(s.mi,{children:"e"}),(0,i.jsx)(s.mi,{children:"n"}),(0,i.jsx)(s.mi,{children:"g"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mi,{children:"h"}),(0,i.jsx)(s.mo,{separator:"true",children:","}),(0,i.jsx)(s.mi,{children:"b"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"."}),(0,i.jsx)(s.mi,{children:"l"}),(0,i.jsx)(s.mi,{children:"e"}),(0,i.jsx)(s.mi,{children:"n"}),(0,i.jsx)(s.mi,{children:"g"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mi,{children:"h"}),(0,i.jsx)(s.mo,{children:"<"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mn,{children:"1"}),(0,i.jsxs)(s.msup,{children:[(0,i.jsx)(s.mn,{children:"0"}),(0,i.jsx)(s.mn,{children:"4"})]})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"1 <= a.length, b.length <= 10^4"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6835em",verticalAlign:"-0.0391em"}}),(0,i.jsx)(s.span,{className:"mord",children:"1"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"<="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mord",children:"."}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"h"}),(0,i.jsx)(s.span,{className:"mpunct",children:","}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"b"}),(0,i.jsx)(s.span,{className:"mord",children:"."}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"h"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"<="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.8141em"}}),(0,i.jsx)(s.span,{className:"mord",children:"1"}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord",children:"0"}),(0,i.jsx)(s.span,{className:"msupsub",children:(0,i.jsx)(s.span,{className:"vlist-t",children:(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.8141em"},children:(0,i.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(s.span,{className:"mord mtight",children:"4"})})]})})})})})]})]})]})]})}),"\n",(0,i.jsx)(s.li,{children:"a and b consist only of '0' or '1' characters."}),"\n",(0,i.jsx)(s.li,{children:"Each string does not contain leading zeros except for the zero itself."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"approach-1-adding-digits-one-by-one",children:"Approach 1: Adding Digits One By One"}),"\n",(0,i.jsx)(s.p,{children:"For each digit, start from least significant ones, calculate the sum of digits and the carry. If the value > 1 then carry to the next digit."}),"\n",(0,i.jsx)(s.p,{children:"The annoying part of this problem is taking care about index out-of-bound."}),"\n",(0,i.jsx)(n,{name:"@DoubleSpicy"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:"class Solution {\npublic:\n    string addBinary(string a, string b) {\n        // preallocate a long string, no copying is needed in iteration.\n        string ans(max(a.size(), b.size()), '0'); \n        int i = a.size()-1, j = b.size()-1, k = ans.size()-1, carry = 0;\n        while(i >= 0 || j >= 0){\n            // if all digits are used up for one of the string, give 0 for that part.\n            int digit = (i >= 0 ? a[i] - '0': 0) + (j >= 0 ? b[j] - '0': 0) + carry;\n            ans[k] = (digit % 2) + '0';\n            carry = digit / 2;\n            i--;\n            j--;\n            k--;\n        }\n        if(carry){\n            return to_string(carry) + ans;\n        }\n        return ans;\n    }\n};\n"})})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var a=n(96540);const i={},r=a.createContext(i);function t(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);