"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[90682],{89386:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"0800-0899/reordered-power-of-2-medium","title":"0869 - Reordered Power of 2 (Medium)","description":"Author: @wkw | https://leetcode.com/problems/reordered-power-of-2/","source":"@site/solutions/0800-0899/0869-reordered-power-of-2-medium.md","sourceDirName":"0800-0899","slug":"/0800-0899/reordered-power-of-2-medium","permalink":"/solutions/0800-0899/reordered-power-of-2-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0869-reordered-power-of-2-medium.md","tags":[{"inline":true,"label":"Math","permalink":"/solutions/tags/math"},{"inline":true,"label":"Sorting","permalink":"/solutions/tags/sorting"},{"inline":true,"label":"Counting","permalink":"/solutions/tags/counting"},{"inline":true,"label":"Enumeration","permalink":"/solutions/tags/enumeration"}],"version":"current","sidebarPosition":869,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/reordered-power-of-2/","tags":["Math","Sorting","Counting","Enumeration"]},"sidebar":"tutorialSidebar","previous":{"title":"0867 - Transpose Matrix (Easy)","permalink":"/solutions/0800-0899/transpose-matrix-easy"},"next":{"title":"0875 - Koko Eating Bananas","permalink":"/solutions/0800-0899/koko-eating-bananas-medium"}}');var o=t(86070),i=t(32790);const s={description:"Author: @wkw | https://leetcode.com/problems/reordered-power-of-2/",tags:["Math","Sorting","Counting","Enumeration"]},a="0869 - Reordered Power of 2 (Medium)",d={},l=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting",id:"approach-1-sorting",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"0869---reordered-power-of-2-medium",children:"0869 - Reordered Power of 2 (Medium)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["You are given an integer ",(0,o.jsx)(n.code,{children:"n"}),". We reorder the digits in any order (including the original order) such that the leading digit is not zero."]}),"\n",(0,o.jsxs)(n.p,{children:["Return ",(0,o.jsx)(n.code,{children:"true"})," ",(0,o.jsx)(n.em,{children:"if and only if we can do this so that the resulting number is a power of two"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: n = 1\nOutput: true\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: n = 10\nOutput: false\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= n <= 10^9"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-sorting",children:"Approach 1: Sorting"}),"\n",(0,o.jsx)(t,{name:"@wkw"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    string sortStr(int n) {\n        // since the input is an integer,\n        // we convert it to a string first\n        string t = to_string(n);\n        // use STL to sort\n        sort(t.begin(), t.end());\n        // return the string\n        return t;\n    }\n\n    // the idea is to sort `n` and compare all sorted power of two\n    // if they are matched, then it means they can be reordered to each other\n    bool reorderedPowerOf2(int n) {\n        // since the sorted string of n is always same\n        // so we convert it here instead of doing it in the loop\n        string s = sortStr(n);\n        for (int i = 0; i < 30; i++) {\n            // power of 2 = 1 << i\n            // we sort each power of 2 string\n            string t = sortStr(1 << i);\n            // and compare with `s`\n            // if they are matched, then return true\n            if (s == t) return true;\n        }\n        // otherwise it is not possible to reorder to a power of 2\n        return false;\n    }\n};\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},32790:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(30758);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);