"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[67878],{5067:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"1500-1599/stone-game-iv-hard","title":"1510 - Stone Game IV (Hard)","description":"Author: @wkw | https://leetcode.com/problems/stone-game-iv/","source":"@site/solutions/1500-1599/1510-stone-game-iv-hard.md","sourceDirName":"1500-1599","slug":"/1500-1599/stone-game-iv-hard","permalink":"/solutions/1500-1599/stone-game-iv-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1500-1599/1510-stone-game-iv-hard.md","tags":[],"version":"current","sidebarPosition":1510,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/stone-game-iv/"},"sidebar":"tutorialSidebar","previous":{"title":"1502 - Can Make Arithmetic Progression From Sequence (Easy)","permalink":"/solutions/1500-1599/can-make-arithmetic-progression-from-sequence-easy"},"next":{"title":"1514 - Path with Maximum Probability (Medium)","permalink":"/solutions/1500-1599/path-with-maximum-probability"}}');var o=t(86070),r=t(32790);const s={description:"Author: @wkw | https://leetcode.com/problems/stone-game-iv/"},a="1510 - Stone Game IV (Hard)",l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"1510---stone-game-iv-hard",children:"1510 - Stone Game IV (Hard)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/stone-game-iv/",children:"https://leetcode.com/problems/stone-game-iv/"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsx)(n.p,{children:"Alice and Bob take turns playing a game, with Alice starting first."}),"\n",(0,o.jsxs)(n.p,{children:["Initially, there are ",(0,o.jsx)(n.code,{children:"n"})," stones in a pile. On each player's turn, that player makes a ",(0,o.jsx)(n.em,{children:"move"})," consisting of removing ",(0,o.jsx)(n.strong,{children:"any"})," non-zero ",(0,o.jsx)(n.strong,{children:"square number"})," of stones in the pile."]}),"\n",(0,o.jsx)(n.p,{children:"Also, if a player cannot make a move, he/she loses the game."}),"\n",(0,o.jsxs)(n.p,{children:["Given a positive integer ",(0,o.jsx)(n.code,{children:"n"}),", return ",(0,o.jsx)(n.code,{children:"true"})," if and only if Alice wins the game otherwise return ",(0,o.jsx)(n.code,{children:"false"}),", assuming both players play optimally."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: n = 1\nOutput: true\nExplanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: n = 2\nOutput: false\nExplanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: n = 4\nOutput: true\nExplanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= n <= 10^5"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-dynamic-programming",children:"Approach 1: Dynamic Programming"}),"\n",(0,o.jsxs)(n.p,{children:["Let ",(0,o.jsx)(n.code,{children:"dp[i]"})," be the result of the game with ",(0,o.jsx)(n.code,{children:"i"})," stones. If it is true, it means Alice must win. If it is false, it means Bob must win. If there is any ",(0,o.jsx)(n.code,{children:"j"})," that ",(0,o.jsx)(n.code,{children:"dp[i - j * j]"})," make the other lose the game, then ",(0,o.jsx)(n.code,{children:"dp[i]"})," would be true. For example, Alice can take ",(0,o.jsx)(n.code,{children:"j * j"})," to make Bob into a losing state and end the game."]}),"\n",(0,o.jsx)(t,{name:"@wkw"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    bool winnerSquareGame(int n) {\n        int dp[n + 1];\n        memset(dp, 0, sizeof(dp));\n        for(int i = 1; i <= n; i++){\n            for(int j = 1; j * j <= i; j++){\n                dp[i] |= !dp[i - j * j];\n            }\n        }\n        return dp[n];\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},32790:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(30758);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);