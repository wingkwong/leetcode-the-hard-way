"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[48304],{17435:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"0400-0499/string-compression-medium","title":"0443 - String Compression (Medium)","description":"Author: @vigneshshiv | https://leetcode.com/problems/string-compression/","source":"@site/solutions/0400-0499/0443-string-compression-medium.md","sourceDirName":"0400-0499","slug":"/0400-0499/string-compression-medium","permalink":"/solutions/0400-0499/string-compression-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0443-string-compression-medium.md","tags":[],"version":"current","sidebarPosition":443,"frontMatter":{"description":"Author: @vigneshshiv | https://leetcode.com/problems/string-compression/"},"sidebar":"tutorialSidebar","previous":{"title":"0441 - Arranging Coins (Easy)","permalink":"/solutions/0400-0499/arranging-coins-easy"},"next":{"title":"0445 - Add two Numbers II (Medium)","permalink":"/solutions/0400-0499/Add-Two-Numbers-II"}}');var t=r(74848),i=r(28453);const o={description:"Author: @vigneshshiv | https://leetcode.com/problems/string-compression/"},c="0443 - String Compression (Medium)",a={},h=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iterative",id:"approach-1-iterative",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:r,TabItem:s,Tabs:o}=n;return r||p("SolutionAuthor",!0),s||p("TabItem",!0),o||p("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"0443---string-compression-medium",children:"0443 - String Compression (Medium)"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/string-compression/",children:"https://leetcode.com/problems/string-compression/"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["Given an array of characters ",(0,t.jsx)(n.code,{children:"chars"}),", compress it using the following algorithm:"]}),"\n",(0,t.jsxs)(n.p,{children:["Begin with an empty string ",(0,t.jsx)(n.code,{children:"s"}),". For each group of ",(0,t.jsx)(n.strong,{children:"consecutive repeating characters"})," in ",(0,t.jsx)(n.code,{children:"chars"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If the group's length is ",(0,t.jsx)(n.code,{children:"1"}),", append the character to ",(0,t.jsx)(n.code,{children:"s"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Otherwise, append the character followed by the group's length."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The compressed string ",(0,t.jsx)(n.code,{children:"s"})," ",(0,t.jsx)(n.strong,{children:"should not be returned separately"}),", but instead, be stored ",(0,t.jsx)(n.strong,{children:"in the input character array"})," ",(0,t.jsx)(n.code,{children:"chars"}),". Note that group lengths that are ",(0,t.jsx)(n.code,{children:"10"})," or longer will be split into multiple characters in ",(0,t.jsx)(n.code,{children:"chars"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["After you are done ",(0,t.jsx)(n.strong,{children:"modifying the input array"}),", return ",(0,t.jsx)(n.em,{children:"the new length of the array"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"You must write an algorithm that uses only constant extra space."}),"\n",(0,t.jsxs)(n.p,{children:["Given an integer array ",(0,t.jsx)(n.code,{children:"nums"}),", return ",(0,t.jsx)(n.code,{children:"true"})," ",(0,t.jsx)(n.em,{children:"if there exists a triple of indices"})," ",(0,t.jsx)(n.code,{children:"(i, j, k)"})," ",(0,t.jsx)(n.em,{children:"such that"})," ",(0,t.jsx)(n.code,{children:"i < j < k"})," ",(0,t.jsx)(n.em,{children:"and"})," ",(0,t.jsx)(n.code,{children:"nums[i] < nums[j] < nums[k]"}),". If no such indices exists, return ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: chars = ["a","a","b","b","c","c","c"]\nOutput: Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]\nExplanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: chars = ["a"]\nOutput: Return 1, and the first character of the input array should be: ["a"]\nExplanation: The only group is "a", which remains uncompressed since it\'s a single character.\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]\nOutput: Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].\nExplanation: The groups are "a" and "bbbbbbbbbbbb". This compresses to "ab12".\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= chars.length <= 2000"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chars[i]"})," is a lowercase English letter, uppercase English letter, digit, or symbol."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Follow up:"})," Could you implement a solution that runs in ",(0,t.jsx)(n.code,{children:"O(n)"})," time complexity and ",(0,t.jsx)(n.code,{children:"O(1)"})," space complexity?"]}),"\n",(0,t.jsx)(n.h2,{id:"approach-1-iterative",children:"Approach 1: Iterative"}),"\n",(0,t.jsxs)(n.p,{children:["As stated in the problem, find the ",(0,t.jsx)(n.strong,{children:"consecutive repeating characters"})," frequency and once a ",(0,t.jsx)(n.strong,{children:"set of group is found"})," then modify the array with the character, number of occurances in the next index and repeat the process till last."]}),"\n",(0,t.jsx)(n.p,{children:"Since it's input is a char array, if number of occurrance for a character is more than 9 times, place the numbers in an invididual position and move forward."}),"\n",(0,t.jsx)(o,{children:(0,t.jsxs)(s,{value:"java",label:"Java",children:[(0,t.jsx)(r,{name:"@vigneshshiv"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int compress(char[] chars) {\n        int i = 0, res = 0; \n        while (i < chars.length) {\n            int groupLength = 1;\n            while (i + groupLength < chars.length && chars[i + groupLength] == chars[i]) {\n                groupLength += 1;\n            }\n            chars[res++] = chars[i];\n            if (groupLength > 1) {\n                for (char c : Integer.toString(groupLength).toCharArray()) {\n                    chars[res++] = c;\n                }\n            }\n            i += groupLength;\n        }\n        return res;\n    }\n}\n"})})]})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var s=r(96540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);