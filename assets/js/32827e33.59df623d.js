"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[97112],{75963:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"0100-0199/binary-tree-postorder-traversal-easy","title":"0145 - Binary Tree Postorder Traversal (Easy)","description":"Author: @wkw, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/binary-tree-postorder-traversal/","source":"@site/solutions/0100-0199/0145-binary-tree-postorder-traversal-easy.md","sourceDirName":"0100-0199","slug":"/0100-0199/binary-tree-postorder-traversal-easy","permalink":"/solutions/0100-0199/binary-tree-postorder-traversal-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0145-binary-tree-postorder-traversal-easy.md","tags":[{"inline":true,"label":"Stack","permalink":"/solutions/tags/stack"},{"inline":true,"label":"Tree","permalink":"/solutions/tags/tree"},{"inline":true,"label":"Depth-First Search","permalink":"/solutions/tags/depth-first-search"},{"inline":true,"label":"Binary Tree","permalink":"/solutions/tags/binary-tree"}],"version":"current","sidebarPosition":145,"frontMatter":{"description":"Author: @wkw, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/binary-tree-postorder-traversal/","tags":["Stack","Tree","Depth-First Search","Binary Tree"]},"sidebar":"tutorialSidebar","previous":{"title":"0144 - Binary Tree Preorder Traversal (Easy)","permalink":"/solutions/0100-0199/binary-tree-preorder-traversal-easy"},"next":{"title":"0146 - LRU Cache (Medium)","permalink":"/solutions/0100-0199/lru-cache-medium"}}');var o=n(86070),a=n(68906);const s={description:"Author: @wkw, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/binary-tree-postorder-traversal/",tags:["Stack","Tree","Depth-First Search","Binary Tree"]},l="0145 - Binary Tree Postorder Traversal (Easy)",i={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS - Post-order traversal",id:"approach-1-dfs---post-order-traversal",level:2},{value:"Approach 2: Iterative",id:"approach-2-iterative",level:2}];function h(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:n,TabItem:t,Tabs:s}=r;return n||p("SolutionAuthor",!0),t||p("TabItem",!0),s||p("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"0145---binary-tree-postorder-traversal-easy",children:"0145 - Binary Tree Postorder Traversal (Easy)"})}),"\n",(0,o.jsx)(r.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-postorder-traversal/",children:"https://leetcode.com/problems/binary-tree-postorder-traversal/"})}),"\n",(0,o.jsx)(r.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(r.p,{children:["Given the ",(0,o.jsx)(r.code,{children:"root"})," of a\xa0binary tree, return ",(0,o.jsx)(r.em,{children:"the postorder traversal of its nodes' values"}),"."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Input: root = [1,null,2,3]\nOutput: [3,2,1]\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Input: root = []\nOutput: []\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Input: root = [1]\nOutput: [1]\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["The number of the nodes in the tree is in the range ",(0,o.jsx)(r.code,{children:"[0, 100]"}),"."]}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.code,{children:"-100 <= Node.val <= 100"})}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Follow up:"})," Recursive solution is trivial, could you do it iteratively?"]}),"\n",(0,o.jsx)(r.h2,{id:"approach-1-dfs---post-order-traversal",children:"Approach 1: DFS - Post-order traversal"}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsxs)(t,{value:"cpp",label:"C++",children:[(0,o.jsx)(n,{name:"@wkw"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-cpp",children:"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n// Time Complexity: O(N)\n// Space Complexity: O(N)\n\n// This is a standard post-order traversal problem, I'd suggest to learn in-order and pre-order as well.\n// Here's a short tutorial if you're interested.\n// https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree\n// then you may try the following problems\n// 94. Binary Tree Inorder Traversal: https://leetcode.com/problems/binary-tree-inorder-traversal/\n// 144. Binary Tree Postorder Traversal: https://leetcode.com/problems/binary-tree-preorder-traversal/\n\nclass Solution {\npublic:\n    vector<int> ans;\n    void postoder(TreeNode* node) {\n        if (node == NULL) return;\n        postoder(node->left);\n        // traverse the left node\n        postoder(node->right);\n        // traverse the right node\n        ans.push_back(node->val);\n        // do something with node value here\n    }\n\n    vector<int> postorderTraversal(TreeNode* root) {\n        postoder(root);\n        return ans;\n    }\n};\n"})})]}),(0,o.jsxs)(t,{value:"py",label:"Python",children:[(0,o.jsx)(n,{name:"@wkw"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-py",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# This is a standard post-order traversal problem, I'd suggest to learn in-order and pre-order as well.\n# Here's a short tutorial if you're interested.\n# https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree\n# then you may try the following problems\n# 94. Binary Tree Inorder Traversal: https://leetcode.com/problems/binary-tree-inorder-traversal/\n# 144. Binary Tree Postorder Traversal: https://leetcode.com/problems/binary-tree-preorder-traversal/\n\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n\t\t# root -> left  -> right\n        return self.preorderTraversal(root.left) + self.preorderTraversal(root.right) + [root.val] if root else []\n"})})]}),(0,o.jsxs)(t,{value:"java",label:"Java",children:[(0,o.jsx)(n,{name:"@ganajayant"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public static List<Integer> postorder(TreeNode root, List<Integer> ll) {\n        if (root == null) {\n            return ll;\n        }\n        ll.add(root.val);\n        postorder(root.left, ll);\n        postorder(root.right, ll);\n        return ll;\n    }\n   public static List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> ll = new LinkedList<Integer>();\n        ll = postorder(root, ll);\n        return ll;\n    }\n}\n"})})]}),(0,o.jsxs)(t,{value:"js",label:"JavaScript",children:[(0,o.jsx)(n,{name:"@radojicic23"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function (root) {\n  let ans = [];\n  function dfs(node) {\n    if (!node) return;\n    dfs(node.left);\n    dfs(node.right);\n    ans.push(node.val);\n  }\n  dfs(root);\n  return ans;\n};\n"})})]})]}),"\n",(0,o.jsx)(r.h2,{id:"approach-2-iterative",children:"Approach 2: Iterative"}),"\n",(0,o.jsx)(s,{children:(0,o.jsxs)(t,{value:"java",label:"Java",children:[(0,o.jsx)(n,{name:"@vigneshshiv"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n// Time complexity: O(n), where n - # of nodes in tree\n// Space complexity: O(n)\nclass Solution {\n    /**\n     * Sample binary tree\n     *\n     *    1\n     *   / \\\n     *  2   3\n     *\n     */\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> result = new LinkedList<>();\n        Stack<TreeNode> stack = new Stack<>();\n        // Reference for last visited right node, for when parent is on top of the stack\n        TreeNode last = null;\n        while (root != null || !stack.isEmpty()) {\n            // Keep pushing left nodes, all the way down onto stack\n            if (root != null) {\n                stack.push(root);\n                root = root.left;\n            } else {\n                TreeNode node = stack.peek();\n                // When Parent is on top stack, it checks with right node which has a refence in last variable\n                // If both are same, it will not add repeated reference onto stack\n                // Pops out stack top, i.e parent node, and level up higher for other nodes.\n                if (node.right != null && node.right != last) {\n                    root = node.right;\n                } else {\n                    // If any of the right node is empty, the block executes and add value from top of stack\n                    result.add(node.val);\n                    // Pops out stock top\n                    last = stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}\n"})})]})})]})}function c(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}function p(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var t=n(30758);const o={},a=t.createContext(o);function s(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);