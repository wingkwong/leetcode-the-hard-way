"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[11049],{54414:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"1800-1899/maximum-ascending-subarray-sum-easy","title":"1800 - Maximum Ascending Subarray Sum (Easy)","description":"Author: @wkw | https://leetcode.com/problems/maximum-ascending-subarray-sum/","source":"@site/solutions/1800-1899/1800-maximum-ascending-subarray-sum-easy.md","sourceDirName":"1800-1899","slug":"/1800-1899/maximum-ascending-subarray-sum-easy","permalink":"/solutions/1800-1899/maximum-ascending-subarray-sum-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1800-1899/1800-maximum-ascending-subarray-sum-easy.md","tags":[],"version":"current","sidebarPosition":1800,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/maximum-ascending-subarray-sum/"},"sidebar":"tutorialSidebar","previous":{"title":"1800 - 1899","permalink":"/solutions/category/1800---1899"},"next":{"title":"1822 - Sign of the Product of an Array (Easy)","permalink":"/solutions/1800-1899/sign-of-the-product-of-an-array-easy"}}');var t=s(86070),i=s(32790);const a={description:"Author: @wkw | https://leetcode.com/problems/maximum-ascending-subarray-sum/"},o="1800 - Maximum Ascending Subarray Sum (Easy)",u={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: One-Pass",id:"approach-1-one-pass",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"1800---maximum-ascending-subarray-sum-easy",children:"1800 - Maximum Ascending Subarray Sum (Easy)"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-ascending-subarray-sum/",children:"https://leetcode.com/problems/maximum-ascending-subarray-sum/"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["Given an array of positive integers ",(0,t.jsx)(n.code,{children:"nums"}),", return the ",(0,t.jsxs)(n.em,{children:["maximum possible sum of an ",(0,t.jsx)(n.strong,{children:"ascending"})," subarray in"]})," ",(0,t.jsx)(n.code,{children:"nums"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"A subarray is defined as a contiguous sequence of numbers in an array."}),"\n",(0,t.jsxs)(n.p,{children:["A subarray ",(0,t.jsx)(n.code,{children:"[numsl, numsl+1, ..., numsr-1, numsr]"})," is ",(0,t.jsx)(n.strong,{children:"ascending"})," if for all ",(0,t.jsx)(n.code,{children:"i"})," where ",(0,t.jsx)(n.code,{children:"l <= i < r"}),", ",(0,t.jsx)(n.code,{children:"numsi < numsi+1"}),". Note that a subarray of size ",(0,t.jsx)(n.code,{children:"1"})," is ",(0,t.jsx)(n.strong,{children:"ascending"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: nums = [10,20,30,5,10,50]\nOutput: 65\nExplanation: [5,10,50] is the ascending subarray with the maximum sum of 65.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: nums = [10,20,30,40,50]\nOutput: 150\nExplanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: nums = [12,17,15,13,10,11,12]\nOutput: 33\nExplanation: [10,11,12] is the ascending subarray with the maximum sum of 33.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= nums.length <= 100"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= nums[i] <= 100"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"approach-1-one-pass",children:"Approach 1: One-Pass"}),"\n",(0,t.jsx)(n.p,{children:"Check each number starting from the second one to see if the current number is greater than the previous one or not. If so, add the current number to total sum and compare with the answer. Else we reset the sum as the current number."}),"\n",(0,t.jsx)(s,{name:"@wkw"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maxAscendingSum(vector<int>& nums) {\n        int n = nums.size(), sum = nums[0], ans = nums[0];\n        for (int i = 1; i < n; i++) {\n            // check if it's ascending\n            if (nums[i] > nums[i - 1]) {\n                // it's ascending -> add this number to sum\n                sum += nums[i];\n                // update ans\n                ans = max(ans, sum);\n            } else {\n                // start a new ascending subarray\n                // reset sum to nums[i]\n                sum = nums[i];\n            }\n        }\n        return ans;\n    }\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},32790:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(30758);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);