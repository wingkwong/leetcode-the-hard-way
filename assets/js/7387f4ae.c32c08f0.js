"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[12402],{25334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>h,default:()=>a,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"2200-2299/count-positions-on-street-with-required-brightness-medium","title":"2237 - Count Positions on Street With Required Brightness (Medium)","description":"Author: @wingkwong | https://leetcode.com/problems/count-positions-on-street-with-required-brightness/","source":"@site/solutions/2200-2299/2237-count-positions-on-street-with-required-brightness-medium.md","sourceDirName":"2200-2299","slug":"/2200-2299/count-positions-on-street-with-required-brightness-medium","permalink":"/solutions/2200-2299/count-positions-on-street-with-required-brightness-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2237-count-positions-on-street-with-required-brightness-medium.md","tags":[],"version":"current","sidebarPosition":2237,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/count-positions-on-street-with-required-brightness/"},"sidebar":"tutorialSidebar","previous":{"title":"2235 - Add Two Integers (Easy)","permalink":"/solutions/2200-2299/add-two-integers-easy"},"next":{"title":"2239 - Find Closest Number to Zero (Easy)","permalink":"/solutions/2200-2299/find-closest-number-to-zero-easy"}}');var s=n(74848),r=n(28453);const o={description:"Author: @wingkwong | https://leetcode.com/problems/count-positions-on-street-with-required-brightness/"},h="2237 - Count Positions on Street With Required Brightness (Medium)",c={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Line Sweep",id:"approach-1-line-sweep",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"2237---count-positions-on-street-with-required-brightness-medium",children:"2237 - Count Positions on Street With Required Brightness (Medium)"})}),"\n",(0,s.jsx)(t.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/count-positions-on-street-with-required-brightness/",children:"https://leetcode.com/problems/count-positions-on-street-with-required-brightness/"})}),"\n",(0,s.jsx)(t.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(t.p,{children:["You are given an integer ",(0,s.jsx)(t.code,{children:"n"}),". A perfectly straight street is represented by a number line ranging from ",(0,s.jsx)(t.code,{children:"0"})," to ",(0,s.jsx)(t.code,{children:"n - 1"}),". You are given a 2D integer array ",(0,s.jsx)(t.code,{children:"lights"})," representing the street lamp(s) on the street. Each ",(0,s.jsx)(t.code,{children:"lights[i] = [positioni, rangei]"})," indicates that there is a street lamp at position ",(0,s.jsx)(t.code,{children:"positioni"})," that lights up the area from ",(0,s.jsx)(t.code,{children:"[max(0, positioni - rangei), min(n - 1, positioni + rangei)]"})," (",(0,s.jsx)(t.strong,{children:"inclusive"}),")."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"brightness"})," of a position ",(0,s.jsx)(t.code,{children:"p"})," is defined as the number of street lamps that light up the position ",(0,s.jsx)(t.code,{children:"p"}),". You are given a ",(0,s.jsx)(t.strong,{children:"0-indexed"})," integer array ",(0,s.jsx)(t.code,{children:"requirement"})," of size ",(0,s.jsx)(t.code,{children:"n"})," where ",(0,s.jsx)(t.code,{children:"requirement[i]"})," is the minimum ",(0,s.jsx)(t.strong,{children:"brightness"})," of the ",(0,s.jsx)(t.code,{children:"ith"})," position on the street."]}),"\n",(0,s.jsxs)(t.p,{children:["Return ",(0,s.jsx)(t.em,{children:"the number of positions"})," ",(0,s.jsx)(t.code,{children:"i"})," ",(0,s.jsx)(t.em,{children:"on the street between"})," ",(0,s.jsx)(t.code,{children:"0"})," ",(0,s.jsx)(t.em,{children:"and"})," ",(0,s.jsx)(t.code,{children:"n - 1"})," ",(0,s.jsxs)(t.em,{children:["that have a ",(0,s.jsx)(t.strong,{children:"brightness"})," of ",(0,s.jsx)(t.strong,{children:"at least"})," _ ",(0,s.jsx)(t.code,{children:"requirement[i]"})]}),"._"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://assets.leetcode.com/uploads/2022/04/11/screenshot-2022-04-11-at-22-24-43-diagramdrawio-diagramsnet.png",alt:""})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Input: n = 5, lights = [[0,1],[2,1],[3,2]], requirement = [0,2,1,4,1]\nOutput: 4\nExplanation:\n- The first street lamp lights up the area from [max(0, 0 - 1), min(n - 1, 0 + 1)] = [0, 1] (inclusive).\n- The second street lamp lights up the area from [max(0, 2 - 1), min(n - 1, 2 + 1)] = [1, 3] (inclusive).\n- The third street lamp lights up the area from [max(0, 3 - 2), min(n - 1, 3 + 2)] = [1, 4] (inclusive).\n\n- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is greater than requirement[0].\n- Position 1 is covered by the first, second, and third street lamps. It is covered by 3 street lamps which is greater than requirement[1].\n- Position 2 is covered by the second and third street lamps. It is covered by 2 street lamps which is greater than requirement[2].\n- Position 3 is covered by the second and third street lamps. It is covered by 2 street lamps which is less than requirement[3].\n- Position 4 is covered by the third street lamp. It is covered by 1 street lamp which is equal to requirement[4].\n\nPositions 0, 1, 2, and 4 meet the requirement so we return 4.\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Input: n = 1, lights = [[0,1]], requirement = [2]\nOutput: 0\nExplanation:\n- The first street lamp lights up the area from [max(0, 0 - 1), min(n - 1, 0 + 1)] = [0, 0] (inclusive).\n- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is less than requirement[0].\n- We return 0 because no position meets their brightness requirement.\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"1 <= n <= 10^5"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"1 <= lights.length <= 10^5"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"0 <= positioni < n"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"0 <= rangei <= 10^5"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"requirement.length == n"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"0 <= requirement[i] <= 10^5"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"approach-1-line-sweep",children:"Approach 1: Line Sweep"}),"\n",(0,s.jsx)(n,{name:"@wingkwong"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int meetRequirement(int n, vector<vector<int>>& lights, vector<int>& requirement) {\n        vector<int> brightness(n + 1);\n        for (auto x : lights) {\n            // start: + 1\n            brightness[max(0, x[0] - x[1])]++;\n            // end: -1\n            brightness[min(n, x[0] + x[1] + 1)]--;\n        }\n        // calculate the prefix sum\n        partial_sum(brightness.begin(), brightness.end(), brightness.begin());\n        int ans = 0;\n        // check each point's brightness to see if it meets its requirement\n        for (int i = 0; i < n; i++) ans += brightness[i] >= requirement[i];\n        return ans;\n    }\n};\n"})})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>h});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function h(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);