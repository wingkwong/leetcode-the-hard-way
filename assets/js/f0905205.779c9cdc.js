"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[29386],{95554:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"2200-2299/design-an-atm-machine-medium","title":"2241 - Design an ATM Machine (Medium)","description":"Author: @wkw| https://leetcode.com/problems/design-an-atm-machine/","source":"@site/solutions/2200-2299/2241-design-an-atm-machine-medium.md","sourceDirName":"2200-2299","slug":"/2200-2299/design-an-atm-machine-medium","permalink":"/solutions/2200-2299/design-an-atm-machine-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2241-design-an-atm-machine-medium.md","tags":[],"version":"current","sidebarPosition":2241,"frontMatter":{"description":"Author: @wkw| https://leetcode.com/problems/design-an-atm-machine/"},"sidebar":"tutorialSidebar","previous":{"title":"2240 - Number of Ways to Buy Pens and Pencils (Medium)","permalink":"/solutions/2200-2299/number-of-ways-to-buy-pens-and-pencils-medium"},"next":{"title":"2242 - Maximum Score of a Node Sequence (Hard)","permalink":"/solutions/2200-2299/maximum-score-of-a-node-sequence-hard"}}');var s=t(86070),a=t(68906);const o={description:"Author: @wkw| https://leetcode.com/problems/design-an-atm-machine/"},r="2241 - Design an ATM Machine (Medium)",d={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Implementation",id:"approach-1-implementation",level:2}];function l(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"2241---design-an-atm-machine-medium",children:"2241 - Design an ATM Machine (Medium)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/design-an-atm-machine/",children:"https://leetcode.com/problems/design-an-atm-machine/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["There is an ATM machine that stores banknotes of ",(0,s.jsx)(n.code,{children:"5"})," denominations: ",(0,s.jsx)(n.code,{children:"20"}),", ",(0,s.jsx)(n.code,{children:"50"}),", ",(0,s.jsx)(n.code,{children:"100"}),", ",(0,s.jsx)(n.code,{children:"200"}),", and ",(0,s.jsx)(n.code,{children:"500"})," dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money."]}),"\n",(0,s.jsxs)(n.p,{children:["When withdrawing, the machine prioritizes using banknotes of ",(0,s.jsx)(n.strong,{children:"larger"})," values."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For example, if you want to withdraw ",(0,s.jsx)(n.code,{children:"$300"})," and there are ",(0,s.jsx)(n.code,{children:"2"})," ",(0,s.jsx)(n.code,{children:"$50"})," banknotes, ",(0,s.jsx)(n.code,{children:"1"})," ",(0,s.jsx)(n.code,{children:"$100"})," banknote, and ",(0,s.jsx)(n.code,{children:"1"})," ",(0,s.jsx)(n.code,{children:"$200"})," banknote, then the machine will use the ",(0,s.jsx)(n.code,{children:"$100"})," and ",(0,s.jsx)(n.code,{children:"$200"})," banknotes."]}),"\n",(0,s.jsxs)(n.li,{children:["However, if you try to withdraw ",(0,s.jsx)(n.code,{children:"$600"})," and there are ",(0,s.jsx)(n.code,{children:"3"})," ",(0,s.jsx)(n.code,{children:"$200"})," banknotes and ",(0,s.jsx)(n.code,{children:"1"})," ",(0,s.jsx)(n.code,{children:"$500"})," banknote, then the withdraw request will be rejected because the machine will first try to use the ",(0,s.jsx)(n.code,{children:"$500"})," banknote and then be unable to use banknotes to complete the remaining ",(0,s.jsx)(n.code,{children:"$100"}),". Note that the machine is ",(0,s.jsx)(n.strong,{children:"not"})," allowed to use the ",(0,s.jsx)(n.code,{children:"$200"})," banknotes instead of the ",(0,s.jsx)(n.code,{children:"$500"})," banknote."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Implement the ATM class:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ATM()"})," Initializes the ATM object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"void deposit(int[] banknotesCount)"})," Deposits new banknotes in the order ",(0,s.jsx)(n.code,{children:"$20"}),", ",(0,s.jsx)(n.code,{children:"$50"}),", ",(0,s.jsx)(n.code,{children:"$100"}),", ",(0,s.jsx)(n.code,{children:"$200"}),", and ",(0,s.jsx)(n.code,{children:"$500"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"int[] withdraw(int amount)"})," Returns an array of length ",(0,s.jsx)(n.code,{children:"5"})," of the number of banknotes that will be handed to the user in the order ",(0,s.jsx)(n.code,{children:"$20"}),", ",(0,s.jsx)(n.code,{children:"$50"}),", ",(0,s.jsx)(n.code,{children:"$100"}),", ",(0,s.jsx)(n.code,{children:"$200"}),", and ",(0,s.jsx)(n.code,{children:"$500"}),", and update the number of banknotes in the ATM after withdrawing. Returns ",(0,s.jsx)(n.code,{children:"[-1]"})," if it is not possible (do ",(0,s.jsx)(n.strong,{children:"not"})," withdraw any banknotes in this case)."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Input\n["ATM", "deposit", "withdraw", "deposit", "withdraw", "withdraw"]\n[[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]]\nOutput\n[null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]\n\nExplanation\nATM atm = new ATM();\natm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,\n                          // and 1 $500 banknote.\natm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote\n                          // and 1 $500 banknote. The banknotes left over in the\n                          // machine are [0,0,0,2,0].\natm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.\n                          // The banknotes in the machine are now [0,1,0,3,1].\natm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote\n                          // and then be unable to complete the remaining $100,\n                          // so the withdraw request will be rejected.\n                          // Since the request is rejected, the number of banknotes\n                          // in the machine is not modified.\natm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote\n                          // and 1 $500 banknote.\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"banknotesCount.length == 5"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"0 <= banknotesCount[i] <= 10^9"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= amount <= 10^9"})}),"\n",(0,s.jsxs)(n.li,{children:["At most ",(0,s.jsx)(n.code,{children:"5000"})," calls ",(0,s.jsx)(n.strong,{children:"in total"})," will be made to ",(0,s.jsx)(n.code,{children:"withdraw"})," and ",(0,s.jsx)(n.code,{children:"deposit"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["At least ",(0,s.jsx)(n.strong,{children:"one"})," call will be made to each function ",(0,s.jsx)(n.code,{children:"withdraw"})," and ",(0,s.jsx)(n.code,{children:"deposit"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-implementation",children:"Approach 1: Implementation"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"b"}),(0,s.jsx)(n.mi,{children:"a"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mi,{children:"k"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"bank"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"bank"})]})})]})," to track the count of each note. When we withdraw, we only use the max possible currency count. If the amount still possible, then return -1. Otherwise, update ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"b"}),(0,s.jsx)(n.mi,{children:"a"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mi,{children:"k"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"bank"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"bank"})]})})]})," and return how many we've taken."]}),"\n",(0,s.jsx)(t,{name:"@wkw"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class ATM {\npublic:\n    ATM() {\n        bank = vector<long long>(5);\n        notes = { 20, 50, 100, 200, 500 };\n    }\n\n    void deposit(vector<int> banknotesCount) {\n        for (int i = 0; i < 5; i++) {\n            bank[i] += banknotesCount[i];\n        }\n    }\n\n    vector<int> withdraw(int amount) {\n        vector<int> take(5);\n        for (int i = 4; i >= 0; i--) {\n            take[i] = min(amount / notes[i], bank[i]);\n            amount -= take[i] * notes[i];\n        }\n        if (amount) return vector<int>{-1};\n        for (int i = 0; i < 5; i++) bank[i] -= take[i];\n        return take;\n    }\nprivate:\n    vector<long long> bank, notes;\n};\n\n/**\n * Your ATM object will be instantiated and called as such:\n * ATM* obj = new ATM();\n * obj->deposit(banknotesCount);\n * vector<int> param_2 = obj->withdraw(amount);\n */\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},68906:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(30758);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);