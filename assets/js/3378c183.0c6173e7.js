"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[17391],{18497:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"0200-0299/kth-smallest-element-in-a-bst-medium","title":"0230 - Kth Smallest Element in a BST (Medium)","description":"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/kth-smallest-element-in-a-bst/","source":"@site/solutions/0200-0299/0230-kth-smallest-element-in-a-bst-medium.md","sourceDirName":"0200-0299","slug":"/0200-0299/kth-smallest-element-in-a-bst-medium","permalink":"/solutions/0200-0299/kth-smallest-element-in-a-bst-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0230-kth-smallest-element-in-a-bst-medium.md","tags":[{"inline":true,"label":"Tree","permalink":"/solutions/tags/tree"},{"inline":true,"label":"Depth-First Search","permalink":"/solutions/tags/depth-first-search"},{"inline":true,"label":"Binary Search Tree","permalink":"/solutions/tags/binary-search-tree"},{"inline":true,"label":"Binary Tree","permalink":"/solutions/tags/binary-tree"}],"version":"current","sidebarPosition":230,"frontMatter":{"description":"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/kth-smallest-element-in-a-bst/","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},"sidebar":"tutorialSidebar","previous":{"title":"0228 - Summary Ranges (Easy)","permalink":"/solutions/0200-0299/summary-ranges-easy"},"next":{"title":"0231 - Power of Two (Easy)","permalink":"/solutions/0200-0299/power-of-two-easy"}}');var r=t(86070),a=t(40629);const l={description:"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/kth-smallest-element-in-a-bst/",tags:["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},i="0230 - Kth Smallest Element in a BST (Medium)",o={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Recursive Inorder Traversal",id:"approach-1-recursive-inorder-traversal",level:2},{value:"Approach 2: Iterative Inorder Traversal",id:"approach-2-iterative-inorder-traversal",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:t,TabItem:s,Tabs:l}=n;return t||m("SolutionAuthor",!0),s||m("TabItem",!0),l||m("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"0230---kth-smallest-element-in-a-bst-medium",children:"0230 - Kth Smallest Element in a BST (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/",children:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given the ",(0,r.jsx)(n.code,{children:"root"})," of a binary search tree, and an integer ",(0,r.jsx)(n.code,{children:"k"}),", return ",(0,r.jsxs)(n.em,{children:["the ",(0,r.jsx)(n.code,{children:"kth"})," smallest value (1-indexed) of all the values of the nodes in the tree"]}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg",alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: root = [3,1,4,null,2], k = 1\nOutput: 1\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg",alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The number of nodes in the tree is ",(0,r.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= k <= n <= 10^4"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= Node.val <= 10^4"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Follow up"}),": If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-recursive-inorder-traversal",children:"Approach 1: Recursive Inorder Traversal"}),"\n",(0,r.jsx)(n.p,{children:"If you know your tree traversals, specifically inorder traversal, and you understand the layouts of a binary search tree. Then that means you know the inorder traversal of a BST will give us the node values in sorted order. Knowing that we can simply generate the inorder traversal of the tree, and return the kth element."}),"\n",(0,r.jsxs)(n.p,{children:["Time Complexity: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]}),", must traverse each node to create the inorder traversal array."]}),"\n",(0,r.jsxs)(n.p,{children:["Space Complexity: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]}),", to store the values of each node inside an array and utilize recursive call stack."]}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(s,{value:"python",label:"Python",children:[(0,r.jsx)(t,{name:"@ColeB2"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorder(self, root) -> [int]:\n        # initialite array\n        arr = []\n        # if root is not a null node.\n        if root:\n            # recursively call on left side, adding output to arr.\n            arr += self.inorder(root.left)\n            # add the current value to arr\n            arr.append(root.val)\n            # recursively call on right side, adding output to arr.\n            arr += self.inorder(root.right)\n        # return the array.\n        return arr\n\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        # get the inorder traversal array.\n        inorder = self.inorder(root)\n        # return k-1 value since questions wants kth smallest, 1-indexed\n        return inorder[k-1]\n"})})]}),(0,r.jsxs)(s,{value:"cpp",label:"C++",children:[(0,r.jsx)(t,{name:"@radojicic23"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // initialize array\n    vector<int> res;\n    // recursive function\n    void inorder(TreeNode* root) {\n        // if root exist\n        if (root != NULL) {\n            // recursive call on the left side\n            inorder(root->left);\n            // insert current node to result array\n            res.push_back(root->val);\n            // recursive call on the right side\n            inorder(root->right);\n        }\n    }\n\n    int kthSmallest(TreeNode* root, int k) {\n        // get inorder traversal array\n        inorder(root);\n        // return kth smallest value\n        return res[k - 1];\n    }\n};\n"})})]}),(0,r.jsxs)(s,{value:"js",label:"JavaScript",children:[(0,r.jsx)(t,{name:"@radojicic23"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\n\n// recursive function\nconst inorder = function (root) {\n  // if root exist\n  if (root !== null) {\n    // recursive call on the left side\n    inorder(root.left);\n    // insert current node to result array\n    res.push(root.val);\n    // recursive call on the right side\n    inorder(root.right);\n  }\n};\n\nvar kthSmallest = function (root, k) {\n  // initialize result array\n  res = [];\n  // get inorder traversal array\n  inorder(root);\n  // return kth smallest value\n  return res[k - 1];\n};\n"})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"approach-2-iterative-inorder-traversal",children:"Approach 2: Iterative Inorder Traversal"}),"\n",(0,r.jsx)(n.p,{children:"We can also do our inorder traversal iteratively. This time, when we reach our answer, we can exit as soon as we find it, and save on space as we don't need to completely iterate over the whole tree, just until we reach the kth smallest."}),"\n",(0,r.jsx)(n.p,{children:"If you've never seen inorder traversal done iteratively before, we need both a stack and a variable to track the current node. Then we use 2 while loops, one while the stack and the current node exists."}),"\n",(0,r.jsx)(n.p,{children:"The second loop goes inside the first, and tracks the current node, adding the current node to the stack, so we can backtrack in the future, then we move our node pointer to the left."}),"\n",(0,r.jsx)(n.p,{children:"When we finally reach a null node, we then need to pop a node off the stack, process the node then move the node pointer right."}),"\n",(0,r.jsxs)(n.p,{children:["Time Complexity: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"h"}),(0,r.jsx)(n.mo,{children:"+"}),(0,r.jsx)(n.mi,{children:"k"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(h+k)"})]})})}),(0,r.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"h"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"+"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})]})]})," where ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"h"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"h"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"h"})]})})]})," is the height of the tree, and ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"k"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]})," is given. We will have to traverse down the tree to the lowest value node, then traverse back up k times to reach the kth. Given a skewed tree, this could be ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{children:"+"}),(0,r.jsx)(n.mi,{children:"k"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n+k)"})]})})}),(0,r.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"+"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["Space Complexity: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"h"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(h)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"h"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]})," where ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"h"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"h"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"h"})]})})]})," is the height of the tree to maintain our stack. In the worst case ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"h"}),(0,r.jsx)(n.mo,{children:"="}),(0,r.jsx)(n.mo,{children:"="}),(0,r.jsx)(n.mi,{children:"n"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"h == n"})]})})}),(0,r.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"h"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(n.span,{className:"mrel",children:"=="}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})]})]})," with a skewed trees."]}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(s,{value:"python",label:"Python",children:[(0,r.jsx)(t,{name:"@ColeB2"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        # initialize a current node pointer\n        node = root\n        # initialize stack for backtracking purposes\n        stack = []\n        # initialize an n counter to count up to k.\n        n = 0\n        # while our current node exists or the stack has values:\n        while node or stack:\n            # while our current node exists:\n            while node:\n                # add current node to the stack for backtracking\n                stack.append(node)\n                # move our current node pointer to the left child.\n                node = node.left\n            # Done going left, now we process the node and go right.\n            # node will equal null either from the above loop, or below process.\n            # So we need to pop a new node off the stack.\n            node = stack.pop()\n            # Update our n variable.\n            n += 1\n            # Check that n == k: if so we found the kth smallest.\n            if n == k:\n                # return the kth smallest value\n                return node.val\n            # Done the above process, we can move the current node pointer right.\n            # Note: if we reach a null node, the while loop will still run\n            # as long as values are inside the stack, which will backtrack us\n            # to the next node.\n            node = node.right\n"})})]}),(0,r.jsxs)(s,{value:"js",label:"JavaScript",children:[(0,r.jsx)(t,{name:"@radojicic23"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function (root, k) {\n  // initialize variable to count up to k\n  let n = 0;\n  // initialize stack\n  let stack = [];\n  // initialize curr node pointer\n  let curr = root;\n  // while current node is not null and stack is not empty\n  while (curr || stack) {\n    // while current node is not null\n    while (curr) {\n      // add current node to the stack\n      stack.push(curr);\n      // shift current pointer to the left\n      curr = curr.left;\n    }\n    // current pointer is done going left\n    // pop that current node from the stack\n    curr = stack.pop();\n    // update count variable\n    n++;\n    // if we found kth smallest element\n    if (n === k) {\n      // return kth smallest value\n      return curr.val;\n    }\n    // shift current pointer to the right\n    curr = curr.right;\n  }\n};\n"})})]}),(0,r.jsxs)(s,{value:"cpp",label:"C++",children:[(0,r.jsx)(t,{name:"@radojicic23"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        // initialize stack\n        stack<TreeNode*> st;\n        // initialize variable to count up to k\n        int n = 0;\n        // initialize current node pointer\n        TreeNode* curr = root;\n        // while current node is not NULL and stack is not empty\n        while (curr || st.size()) {\n            // while current node is not NULL\n            while (curr) {\n                // add current node to the stacl\n                st.push(curr);\n                // shift current pointer to the left\n                curr = curr->left;\n            }\n            // current pointer is done going left\n            // pop that current node from the stack\n            curr = st.top();\n            st.pop();\n            // update count variable\n            n++;\n            // if we found kth smallest element\n            if (n == k) {\n                // return kth smallest element\n                return curr->val;\n            }\n            // shift current pointer to the right\n            curr = curr->right;\n        }\n        // kth smallest not found so return -1\n        return -1;\n    }\n};\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(30758);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);