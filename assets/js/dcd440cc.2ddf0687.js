"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[80846],{50619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"2400-2499/longest-nice-subarray-medium","title":"2401 - Longest Nice Subarray (Medium)","description":"Author: @wkw | https://leetcode.com/problems/longest-nice-subarray/","source":"@site/solutions/2400-2499/2401-longest-nice-subarray-medium.md","sourceDirName":"2400-2499","slug":"/2400-2499/longest-nice-subarray-medium","permalink":"/solutions/2400-2499/longest-nice-subarray-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2401-longest-nice-subarray-medium.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Bit Manipulation","permalink":"/solutions/tags/bit-manipulation"},{"inline":true,"label":"Sliding Window","permalink":"/solutions/tags/sliding-window"}],"version":"current","sidebarPosition":2401,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/longest-nice-subarray/","tags":["Array","Bit Manipulation","Sliding Window"]},"sidebar":"tutorialSidebar","previous":{"title":"2400 - Number of Ways to Reach a Position After Exactly k Steps (Medium)","permalink":"/solutions/2400-2499/number-of-ways-to-reach-a-position-after-exactly-k-steps-medium"},"next":{"title":"2404 - Most Frequent Even Element (Easy)","permalink":"/solutions/2400-2499/most-frequent-even-element-easy"}}');var r=t(86070),s=t(40629);const o={description:"Author: @wkw | https://leetcode.com/problems/longest-nice-subarray/",tags:["Array","Bit Manipulation","Sliding Window"]},a="2401 - Longest Nice Subarray (Medium)",l={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window + Bit Manipulation",id:"approach-1-sliding-window--bit-manipulation",level:2}];function u(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"2401---longest-nice-subarray-medium",children:"2401 - Longest Nice Subarray (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["You are given an array ",(0,r.jsx)(n.code,{children:"nums"})," consisting of ",(0,r.jsx)(n.strong,{children:"positive"})," integers."]}),"\n",(0,r.jsxs)(n.p,{children:["We call a subarray of ",(0,r.jsx)(n.code,{children:"nums"})," ",(0,r.jsx)(n.strong,{children:"nice"})," if the bitwise ",(0,r.jsx)(n.strong,{children:"AND"})," of every pair of elements that are in ",(0,r.jsx)(n.strong,{children:"different"})," positions in the subarray is equal to ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsxs)(n.em,{children:["the length of the ",(0,r.jsx)(n.strong,{children:"longest"})," nice subarray"]}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"subarray"})," is a ",(0,r.jsx)(n.strong,{children:"contiguous"})," part of an array."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"})," that subarrays of length ",(0,r.jsx)(n.code,{children:"1"})," are always considered nice."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: nums = [1,3,8,48,10]\nOutput: 3\nExplanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:\n- 3 AND 8 = 0.\n- 3 AND 48 = 0.\n- 8 AND 48 = 0.\nIt can be proven that no longer nice subarray can be obtained, so we return 3.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: nums = [3,1,5,11,13]\nOutput: 1\nExplanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= nums.length <= 1e5"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= nums[i] <= 10^9"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-sliding-window--bit-manipulation",children:"Approach 1: Sliding Window + Bit Manipulation"}),"\n",(0,r.jsx)(t,{name:"@wkw"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int longestNiceSubarray(vector<int>& nums) {\n        // the observation is that each number has unique bits in the nice array\n        // finding a subarray of something -> a hint to use sliding window\n        int l = 0, n = nums.size(), x = 0, ans = 0;\n        // iterate right pointer\n        for (int r = 0; r < n; r++) {\n            // x is the current AND value of current window at this point\n            // now we want to include nums[r] in the window\n            // however, if we include it, the current window may become not nice (i.e. x_new != 0)\n            // therefore, in this case, we need to remove some bits using XOR,\n            // i.e shrinking the window from the left\n            while ((x & nums[r]) != 0) x ^= nums[l++];\n            // here we are good to include nums[r], we use OR to set the bits\n            x |= nums[r];\n            // record the max length\n            ans = max(ans, r - l + 1);\n        }\n        return ans;\n    }\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},40629:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(30758);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);