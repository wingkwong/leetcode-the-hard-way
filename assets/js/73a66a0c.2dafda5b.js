"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[91468],{38334:(i,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>a,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"2600-2699/find-the-maximum-divisibility-score-easy","title":"2644 - Find the Maximum Divisibility Score (Easy)","description":"Author: @wkw | https://leetcode.com/problems/find-the-maximum-divisibility-score/","source":"@site/solutions/2600-2699/2644-find-the-maximum-divisibility-score-easy.md","sourceDirName":"2600-2699","slug":"/2600-2699/find-the-maximum-divisibility-score-easy","permalink":"/solutions/2600-2699/find-the-maximum-divisibility-score-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2600-2699/2644-find-the-maximum-divisibility-score-easy.md","tags":[],"version":"current","sidebarPosition":2644,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/find-the-maximum-divisibility-score/"},"sidebar":"tutorialSidebar","previous":{"title":"2639 - Find the Width of Columns of a Grid (Easy)","permalink":"/solutions/2600-2699/find-the-width-of-columns-of-a-grid-easy"},"next":{"title":"2678 - Number of Senior Citizens (Easy)","permalink":"/solutions/2600-2699/number-of-senior-citizens-easy"}}');var t=n(86070),r=n(40629);const o={description:"Author: @wkw | https://leetcode.com/problems/find-the-maximum-divisibility-score/"},d="2644 - Find the Maximum Divisibility Score (Easy)",c={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2}];function m(i){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...i.components},{SolutionAuthor:n,TabItem:s,Tabs:o}=e;return n||h("SolutionAuthor",!0),s||h("TabItem",!0),o||h("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"2644---find-the-maximum-divisibility-score-easy",children:"2644 - Find the Maximum Divisibility Score (Easy)"})}),"\n",(0,t.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/find-the-maximum-divisibility-score/",children:"https://leetcode.com/problems/find-the-maximum-divisibility-score/"})}),"\n",(0,t.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(e.p,{children:["You are given two ",(0,t.jsx)(e.strong,{children:"0-indexed"})," integer arrays ",(0,t.jsx)(e.code,{children:"nums"})," and ",(0,t.jsx)(e.code,{children:"divisors"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.strong,{children:"divisibility score"})," of ",(0,t.jsx)(e.code,{children:"divisors[i]"})," is the number of indices ",(0,t.jsx)(e.code,{children:"j"})," such that ",(0,t.jsx)(e.code,{children:"nums[j]"})," is divisible by ",(0,t.jsx)(e.code,{children:"divisors[i]"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["Return ",(0,t.jsx)(e.em,{children:"the integer"})," ",(0,t.jsx)(e.code,{children:"divisors[i]"})," ",(0,t.jsx)(e.em,{children:"with the maximum divisibility score"}),". If there is more than one integer with the maximum score, return the minimum of them."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [4,7,9,3,9], divisors = [5,2,3]\nOutput: 3\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 0 since no number in nums is divisible by 5.\nThe divisibility score of divisors[1] is 1 since nums[0] is divisible by 2.\nThe divisibility score of divisors[2] is 3 since nums[2], nums[3], and nums[4] are divisible by 3.\nSince divisors[2] has the maximum divisibility score, we return it.\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [20,14,21,10], divisors = [5,7,5]\nOutput: 5\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 2 since nums[0] and nums[3] are divisible by 5.\nThe divisibility score of divisors[1] is 2 since nums[1] and nums[2] are divisible by 7.\nThe divisibility score of divisors[2] is 2 since nums[0] and nums[3] are divisible by 5.\nSince divisors[0], divisors[1], and divisors[2] all have the maximum divisibility score, we return the minimum of them (i.e., divisors[2]).\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [12], divisors = [10,16]\nOutput: 10\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 0 since no number in nums is divisible by 10.\nThe divisibility score of divisors[1] is 0 since no number in nums is divisible by 16.\nSince divisors[0] and divisors[1] both have the maximum divisibility score, we return the minimum of them (i.e., divisors[0]).\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"1 <= nums.length, divisors.length <= 1000"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"1 <= nums[i], divisors[i] <= 10^9"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"approach-1-brute-force",children:"Approach 1: Brute Force"}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsxs)(s,{value:"cpp",label:"C++",children:[(0,t.jsx)(n,{name:"@wkw"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maxDivScore(vector<int>& nums, vector<int>& divisors) {\n        int ans = -1, mx_cnt = -1;\n        // for each divisor\n        for (auto d : divisors) {\n            int cnt = 0;\n            // we check each number `x`\n            for (auto x : nums) {\n                // to see if `x` can be divisible by `d`\n                if (x % d == 0) {\n                    // if so, increase the counter by 1\n                    cnt += 1;\n                }\n            }\n            // if the counter is greater than the current max\n            if (cnt > mx_cnt) {\n                // then update hte current max\n                mx_cnt = cnt;\n                // `d` will be the possible answer\n                ans = d;\n            } else if (cnt == mx_cnt) {\n                // however, if the counter is same as the current max\n                // then we need to take the min one\n                ans = min(ans, d);\n            }\n        }\n        return ans;\n    }\n};\n"})})]}),(0,t.jsxs)(s,{value:"py",label:"Python",children:[(0,t.jsx)(n,{name:"@wkw"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"class Solution:\n    def maxDivScore(self, nums: List[int], divisors: List[int]) -> int:\n        res = -1\n        mx_cnt = -1\n        # for each divisor\n        for d in divisors:\n            cnt = 0\n            # we check each number `x`\n            for x in nums:\n                # to see if `x` can be divisible by `d`\n                if x % d == 0:\n                    # if so, increase the counter by 1\n                    cnt += 1\n            # if the counter is greater than the current max\n            if cnt > mx_cnt:\n                # then update hte current max\n                mx_cnt = cnt\n                # `d` will be the possible answer\n                res = d\n            elif cnt == mx_cnt:\n                # however, if the counter is same as the current max\n                # then we need to take the min one\n                res = min(res, d)\n        return res\n"})})]})]})]})}function a(i={}){const{wrapper:e}={...(0,r.R)(),...i.components};return e?(0,t.jsx)(e,{...i,children:(0,t.jsx)(m,{...i})}):m(i)}function h(i,e){throw new Error("Expected "+(e?"component":"object")+" `"+i+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(i,e,n)=>{n.d(e,{R:()=>o,x:()=>d});var s=n(30758);const t={},r=s.createContext(t);function o(i){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof i?i(e):{...e,...i}}),[e,i])}function d(i){let e;return e=i.disableParentContext?"function"==typeof i.components?i.components(t):i.components||t:o(i.components),s.createElement(r.Provider,{value:e},i.children)}}}]);