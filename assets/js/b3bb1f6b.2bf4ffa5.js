"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4183],{37513:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"0600-0699/baseball-game-easy","title":"0682 - Baseball Game (Easy)","description":"Author: @wkw | https://leetcode.com/problems/baseball-game/","source":"@site/solutions/0600-0699/0682-baseball-game-easy.md","sourceDirName":"0600-0699","slug":"/0600-0699/baseball-game-easy","permalink":"/solutions/0600-0699/baseball-game-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0600-0699/0682-baseball-game-easy.md","tags":[],"version":"current","sidebarPosition":682,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/baseball-game/"},"sidebar":"tutorialSidebar","previous":{"title":"0680 - Valid Palindrome II (Easy)","permalink":"/solutions/0600-0699/valid-palindrome-ii-easy"},"next":{"title":"0684 - Redundant Connection (Medium)","permalink":"/solutions/0600-0699/redundant-connection-medium"}}');var s=n(86070),t=n(32790);const i={description:"Author: @wkw | https://leetcode.com/problems/baseball-game/"},l="0682 - Baseball Game (Easy)",a={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Simulation",id:"approach-1-simulation",level:2}];function d(e){const o={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{SolutionAuthor:n}=o;return n||function(e,o){throw new Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"0682---baseball-game-easy",children:"0682 - Baseball Game (Easy)"})}),"\n",(0,s.jsx)(o.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.a,{href:"https://leetcode.com/problems/baseball-game/",children:"https://leetcode.com/problems/baseball-game/"})}),"\n",(0,s.jsx)(o.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsx)(o.p,{children:"You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores."}),"\n",(0,s.jsxs)(o.p,{children:["At the beginning of the game, you start with an empty record. You are given a list of strings ",(0,s.jsx)(o.code,{children:"ops"}),", where ",(0,s.jsx)(o.code,{children:"ops[i]"})," is the ",(0,s.jsx)(o.code,{children:"ith"})," operation you must apply to the record and is one of the following:"]}),"\n",(0,s.jsxs)(o.ol,{children:["\n",(0,s.jsxs)(o.li,{children:["An integer ",(0,s.jsx)(o.code,{children:"x"})," - Record a new score of ",(0,s.jsx)(o.code,{children:"x"}),"."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:'"+"'})," - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:'"D"'})," - Record a new score that is double the previous score. It is guaranteed there will always be a previous score."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:'"C"'})," - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score."]}),"\n"]}),"\n",(0,s.jsxs)(o.p,{children:["Return ",(0,s.jsx)(o.em,{children:"the sum of all the scores on the record"}),"."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:'Input: ops = ["5","2","C","D","+"]\nOutput: 30\nExplanation:\n"5" - Add 5 to the record, record is now [5].\n"2" - Add 2 to the record, record is now [5, 2].\n"C" - Invalidate and remove the previous score, record is now [5].\n"D" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n"+" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.\n'})}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:'Input: ops = ["5","-2","4","C","D","9","+","+"]\nOutput: 27\nExplanation:\n"5" - Add 5 to the record, record is now [5].\n"-2" - Add -2 to the record, record is now [5, -2].\n"4" - Add 4 to the record, record is now [5, -2, 4].\n"C" - Invalidate and remove the previous score, record is now [5, -2].\n"D" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n"9" - Add 9 to the record, record is now [5, -2, -4, 9].\n"+" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n"+" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n'})}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.strong,{children:"Example 3:"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:'Input: ops = ["1"]\nOutput: 1\n'})}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.code,{children:"1 <= ops.length <= 1000"})}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"ops[i]"})," is ",(0,s.jsx)(o.code,{children:'"C"'}),", ",(0,s.jsx)(o.code,{children:'"D"'}),", ",(0,s.jsx)(o.code,{children:'"+"'}),", or a string representing an integer in the range ",(0,s.jsx)(o.code,{children:"[-3 * 104, 3 * 104]"}),"."]}),"\n",(0,s.jsxs)(o.li,{children:["For operation ",(0,s.jsx)(o.code,{children:'"+"'}),", there will always be at least two previous scores on the record."]}),"\n",(0,s.jsxs)(o.li,{children:["For operations ",(0,s.jsx)(o.code,{children:'"C"'})," and ",(0,s.jsx)(o.code,{children:'"D"'}),", there will always be at least one previous score on the record."]}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"approach-1-simulation",children:"Approach 1: Simulation"}),"\n",(0,s.jsx)(o.p,{children:"Just do what it says."}),"\n",(0,s.jsx)(n,{name:"@wkw"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-cpp",children:'class Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        vector<int> s;\n        for (auto op: ops) {\n            int n = s.size();\n            // Record a new score that is the sum of the previous two scores.\n            // It is guaranteed there will always be two previous scores.\n            if (op == "+") s.push_back(s[n - 2] + s[n - 1]);\n            // Record a new score that is double the previous score.\n            // It is guaranteed there will always be a previous score.\n            else if (op == "D") s.push_back(2 * s[n - 1]);\n            // Invalidate the previous score, removing it from the record.\n            // It is guaranteed there will always be a previous score.\n            else if (op == "C") s.pop_back();\n            // An integer x - Record a new score of x.\n            else s.push_back(stoi(op));\n        }\n        // the sum of all the scores on the record\n        return accumulate(s.begin(), s.end(), 0);\n    }\n};\n'})})]})}function h(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},32790:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>l});var r=n(30758);const s={},t=r.createContext(s);function i(e){const o=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(t.Provider,{value:o},e.children)}}}]);