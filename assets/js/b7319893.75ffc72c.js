"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[58549],{88413:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>m,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"1800-1899/maximum-population-year-easy","title":"1854 - Maximum Population Year (Easy)","description":"Author: @wkw | https://leetcode.com/problems/maximum-population-year/","source":"@site/solutions/1800-1899/1854-maximum-population-year-easy.md","sourceDirName":"1800-1899","slug":"/1800-1899/maximum-population-year-easy","permalink":"/solutions/1800-1899/maximum-population-year-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1800-1899/1854-maximum-population-year-easy.md","tags":[],"version":"current","sidebarPosition":1854,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/maximum-population-year/"},"sidebar":"tutorialSidebar","previous":{"title":"1851 - Minimum Interval to Include Each Query","permalink":"/solutions/1800-1899/minimum-interval-to-include-each-query-hard"},"next":{"title":"1855 - Maximum Distance Between a Pair of Values (Medium)","permalink":"/solutions/1800-1899/maximum-distance-between-a-pair-of-values-medium"}}');var i=n(86070),t=n(68906);const l={description:"Author: @wkw | https://leetcode.com/problems/maximum-population-year/"},r="1854 - Maximum Population Year (Easy)",m={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Line Sweep",id:"approach-1-line-sweep",level:2}];function o(e){const s={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{SolutionAuthor:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"1854---maximum-population-year-easy",children:"1854 - Maximum Population Year (Easy)"})}),"\n",(0,i.jsx)(s.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://leetcode.com/problems/maximum-population-year/",children:"https://leetcode.com/problems/maximum-population-year/"})}),"\n",(0,i.jsx)(s.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(s.p,{children:["You are given a 2D integer array ",(0,i.jsx)(s.code,{children:"logs"})," where each ",(0,i.jsx)(s.code,{children:"logs[i] = [birthi, deathi]"})," indicates the birth and death years of the ",(0,i.jsx)(s.code,{children:"ith"})," person."]}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.strong,{children:"population"})," of some year ",(0,i.jsx)(s.code,{children:"x"})," is the number of people alive during that year. The ",(0,i.jsx)(s.code,{children:"ith"})," person is counted in year ",(0,i.jsx)(s.code,{children:"x"}),"'s population if ",(0,i.jsx)(s.code,{children:"x"})," is in the ",(0,i.jsx)(s.strong,{children:"inclusive"})," range ",(0,i.jsx)(s.code,{children:"[birthi, deathi - 1]"}),". Note that the person is ",(0,i.jsx)(s.strong,{children:"not"})," counted in the year that they die."]}),"\n",(0,i.jsxs)(s.p,{children:["Return ",(0,i.jsxs)(s.em,{children:["the ",(0,i.jsx)(s.strong,{children:"earliest"})," year with the ",(0,i.jsx)(s.strong,{children:"maximum population"})]}),"."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"Input: logs = [[1993,1999],[2000,2010]]\nOutput: 1993\nExplanation: The maximum population is 1, and 1993 is the earliest year with this population.\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"Input: logs = [[1950,1961],[1960,1971],[1970,1981]]\nOutput: 1960\nExplanation:\nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"1 <= logs.length <= 100"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"1950 <= birthi < deathi <= 2050"})}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"approach-1-line-sweep",children:"Approach 1: Line Sweep"}),"\n",(0,i.jsx)(n,{name:"@wkw"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maximumPopulation(vector<vector<int>>& logs) {\n        vector<int> cnt(2100);\n        for (auto x : logs) {\n            // start: + 1\n            cnt[x[0]]++;\n            // end: - 1\n            cnt[x[1]]--;\n        }\n        // calculate prefix sum\n        partial_sum(cnt.begin(), cnt.end(), cnt.begin());\n        // check the maximum\n        int mx = *max_element(cnt.begin(), cnt.end());\n        // find the first year with the max population\n        for (int i = 1950; i <= 2050; i++) {\n            if (mx == cnt[i]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n"})}),"\n",(0,i.jsxs)(s.p,{children:["We can further revise it due to the constraint ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mn,{children:"1950"}),(0,i.jsx)(s.mo,{children:"<"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mi,{children:"b"}),(0,i.jsx)(s.mi,{children:"i"}),(0,i.jsx)(s.mi,{children:"r"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsxs)(s.msub,{children:[(0,i.jsx)(s.mi,{children:"h"}),(0,i.jsx)(s.mi,{children:"i"})]}),(0,i.jsx)(s.mo,{children:"<"}),(0,i.jsx)(s.mi,{children:"d"}),(0,i.jsx)(s.mi,{children:"e"}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsxs)(s.msub,{children:[(0,i.jsx)(s.mi,{children:"h"}),(0,i.jsx)(s.mi,{children:"i"})]}),(0,i.jsx)(s.mo,{children:"<"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mn,{children:"2050"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"1950 <= birth_i < death_i <= 2050"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6835em",verticalAlign:"-0.0391em"}}),(0,i.jsx)(s.span,{className:"mord",children:"1950"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"<="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.8444em",verticalAlign:"-0.15em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"bi"}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord mathnormal",children:"h"}),(0,i.jsx)(s.span,{className:"msupsub",children:(0,i.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(s.span,{className:"vlist-r",children:[(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.3117em"},children:(0,i.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(s.span,{className:"mord mathnormal mtight",children:"i"})})]})}),(0,i.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,i.jsx)(s.span,{})})})]})})]}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"<"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.8444em",verticalAlign:"-0.15em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord mathnormal",children:"h"}),(0,i.jsx)(s.span,{className:"msupsub",children:(0,i.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(s.span,{className:"vlist-r",children:[(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.3117em"},children:(0,i.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(s.span,{className:"mord mathnormal mtight",children:"i"})})]})}),(0,i.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,i.jsx)(s.span,{})})})]})})]}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"<="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"2050"})]})]})]}),"."]}),"\n",(0,i.jsx)(n,{name:"@wkw"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maximumPopulation(vector<vector<int>>& logs) {\n        vector<int> cnt(101);\n        for (auto x : logs) {\n            // start: + 1\n            cnt[x[0] - 1950]++;\n            // end: - 1\n            cnt[x[1] - 1950]--;\n        }\n        // calculate prefix sum\n        partial_sum(cnt.begin(), cnt.end(), cnt.begin());\n        // check the maximum\n        int mx = *max_element(cnt.begin(), cnt.end());\n        // find the first year with the max population\n        for (int i = 0; i <= 100; i++) {\n            if (mx == cnt[i]) {\n                return 1950 + i;\n            }\n        }\n        return -1;\n    }\n};\n"})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},68906:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var a=n(30758);const i={},t=a.createContext(i);function l(e){const s=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(t.Provider,{value:s},e.children)}}}]);