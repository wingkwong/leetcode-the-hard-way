"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[93813],{13246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"0700-0799/find-pivot-index-easy","title":"0724 - Find Pivot Index (Easy)","description":"Author: @wkw | https://leetcode.com/problems/find-pivot-index/","source":"@site/solutions/0700-0799/0724-find-pivot-index-easy.md","sourceDirName":"0700-0799","slug":"/0700-0799/find-pivot-index-easy","permalink":"/solutions/0700-0799/find-pivot-index-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0700-0799/0724-find-pivot-index-easy.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Prefix Sum","permalink":"/solutions/tags/prefix-sum"}],"version":"current","sidebarPosition":724,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/find-pivot-index/","tags":["Array","Prefix Sum"]},"sidebar":"tutorialSidebar","previous":{"title":"0718 - Maximum Length of Repeated Subarray (Medium)","permalink":"/solutions/0700-0799/maximum-length-of-repeated-subarray-medium"},"next":{"title":"0732 - My Calendar III (Hard)","permalink":"/solutions/0700-0799/my-calendar-iii-hard"}}');var s=t(86070),r=t(40629);const o={description:"Author: @wkw | https://leetcode.com/problems/find-pivot-index/",tags:["Array","Prefix Sum"]},l="0724 - Find Pivot Index (Easy)",a={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix Sum",id:"approach-1-prefix-sum",level:2},{value:"Approach 2: Prefix Sum with Space Optimizated",id:"approach-2-prefix-sum-with-space-optimizated",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"0724---find-pivot-index-easy",children:"0724 - Find Pivot Index (Easy)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["Given an array of integers ",(0,s.jsx)(n.code,{children:"nums"}),", calculate the ",(0,s.jsx)(n.strong,{children:"pivot index"})," of this array."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"pivot index"})," is the index where the sum of all the numbers ",(0,s.jsx)(n.strong,{children:"strictly"})," to the left of the index is equal to the sum of all the numbers ",(0,s.jsx)(n.strong,{children:"strictly"})," to the index's right."]}),"\n",(0,s.jsxs)(n.p,{children:["If the index is on the left edge of the array, then the left sum is ",(0,s.jsx)(n.code,{children:"0"})," because there are no elements to the left. This also applies to the right edge of the array."]}),"\n",(0,s.jsxs)(n.p,{children:["Return *the ",(0,s.jsx)(n.strong,{children:"leftmost pivot index*"}),". If no such index exists, return -1."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [1,7,3,6,5,6]\nOutput: 3\nExplanation:\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [1,2,3]\nOutput: -1\nExplanation:\nThere is no index that satisfies the conditions in the problem statement.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [2,1,-1]\nOutput: 0\nExplanation:\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= nums.length <= 10^4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"-1000 <= nums[i] <= 1000"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," This question is the same as\xa01991:\xa0",(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-middle-index-in-array/",children:"https://leetcode.com/problems/find-the-middle-index-in-array/"})]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-prefix-sum",children:"Approach 1: Prefix Sum"}),"\n",(0,s.jsx)(t,{name:"@wkw"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int n = nums.size(), totalSum = 0;\n        vector<int> pref(n + 1, 0);\n        // Example 1\n        // pref = [0, 1, 8, 11, 17, 22, 28]\n        // totalSum = 28\n        for (int i = 0; i < n; i++) pref[i + 1] = pref[i] + nums[i], totalSum += nums[i];\n        for (int i = 0; i < n; i++) {\n            // if the current number is nums[i],\n            // then we can get the left part easily - just pref[i]\n            // the right part would be the total sum - pref[i] - the current number\n            int leftSum = pref[i], rightSum = sum - left - nums[i];\n            // if the left sum is same as the right sum,\n            // then i is the pivot index\n            if(leftSum == rightSum) {\n                return i;\n            }\n        }\n        // no such index exists\n        return -1;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"approach-2-prefix-sum-with-space-optimizated",children:"Approach 2: Prefix Sum with Space Optimizated"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int n = nums.size(), leftSum = 0, totalSum = 0;\n        // calculate the total sum\n        // alternative, we can use `accumulate(nums.begin(), nums.end(), 0);`\n        for (int i = 0; i < n; i++) totalSum += nums[i];\n        for (int i = 0; i < n; i++) {\n            // if the current number is nums[i],\n            // then we can get the left part easily - i.e leftSum\n            // the right part would be the total sum - leftSum - the current number\n            int rightSum = totalSum - leftSum - nums[i];\n            // if the left sum is same as the right sum,\n            // then i is the pivot index\n            if(leftSum == rightSum) {\n                return i;\n            }\n            // add the current number to leftSum\n            leftSum += nums[i];\n        }\n        // no such index exists\n        return -1;\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},40629:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(30758);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);