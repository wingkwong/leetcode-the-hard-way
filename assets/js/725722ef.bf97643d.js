"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[50849],{57604:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"0700-0799/kth-largest-element-in-a-stream-easy","title":"0703 - Kth Largest Element in a Stream (Easy)","description":"Author: @wkw | https://leetcode.com/problems/kth-largest-element-in-a-stream/","source":"@site/solutions/0700-0799/0703-kth-largest-element-in-a-stream-easy.md","sourceDirName":"0700-0799","slug":"/0700-0799/kth-largest-element-in-a-stream-easy","permalink":"/solutions/0700-0799/kth-largest-element-in-a-stream-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0700-0799/0703-kth-largest-element-in-a-stream-easy.md","tags":[{"inline":true,"label":"Tree","permalink":"/solutions/tags/tree"},{"inline":true,"label":"Design","permalink":"/solutions/tags/design"},{"inline":true,"label":"Binary Search Tree","permalink":"/solutions/tags/binary-search-tree"},{"inline":true,"label":"Heap (Priority Queue)","permalink":"/solutions/tags/heap-priority-queue"},{"inline":true,"label":"Binary  Tree","permalink":"/solutions/tags/binary-tree"},{"inline":true,"label":"Data Stream","permalink":"/solutions/tags/data-stream"}],"version":"current","sidebarPosition":703,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/kth-largest-element-in-a-stream/","tags":["Tree","Design","Binary Search Tree","Heap (Priority Queue)","Binary  Tree","Data Stream"]},"sidebar":"tutorialSidebar","previous":{"title":"0700 - 0799","permalink":"/solutions/category/0700---0799"},"next":{"title":"0704 - Binary Search (Easy)","permalink":"/solutions/0700-0799/binary-search-easy"}}');var s=n(86070),r=n(40629);const i={description:"Author: @wkw | https://leetcode.com/problems/kth-largest-element-in-a-stream/",tags:["Tree","Design","Binary Search Tree","Heap (Priority Queue)","Binary  Tree","Data Stream"]},l="0703 - Kth Largest Element in a Stream (Easy)",o={},h=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:n,TabItem:a,Tabs:i}=t;return n||c("SolutionAuthor",!0),a||c("TabItem",!0),i||c("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"0703---kth-largest-element-in-a-stream-easy",children:"0703 - Kth Largest Element in a Stream (Easy)"})}),"\n",(0,s.jsx)(t.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.com/problems/kth-largest-element-in-a-stream/",children:"https://leetcode.com/problems/kth-largest-element-in-a-stream/"})}),"\n",(0,s.jsx)(t.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(t.p,{children:["Design a class to find the ",(0,s.jsx)(t.code,{children:"kth"})," largest element in a stream. Note that it is the ",(0,s.jsx)(t.code,{children:"kth"})," largest element in the sorted order, not the ",(0,s.jsx)(t.code,{children:"kth"})," distinct element."]}),"\n",(0,s.jsxs)(t.p,{children:["Implement ",(0,s.jsx)(t.code,{children:"KthLargest"})," class:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"KthLargest(int k, int[] nums)"})," Initializes the object with the integer ",(0,s.jsx)(t.code,{children:"k"})," and the stream of integers ",(0,s.jsx)(t.code,{children:"nums"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"int add(int val)"})," Appends the integer ",(0,s.jsx)(t.code,{children:"val"})," to the stream and returns the element representing the ",(0,s.jsx)(t.code,{children:"kth"})," largest element in the stream."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Input\n["KthLargest", "add", "add", "add", "add", "add"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"1 <= k <= 10^4"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"0 <= nums.length <= 10^4"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"-10^4 <= nums[i] <= 10^4"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"-10^4 <= val <= 10^4"})}),"\n",(0,s.jsxs)(t.li,{children:["At most ",(0,s.jsx)(t.code,{children:"10^4"})," calls will be made to ",(0,s.jsx)(t.code,{children:"add"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["It is guaranteed that there will be at least ",(0,s.jsx)(t.code,{children:"k"})," elements in the array when you search for the ",(0,s.jsx)(t.code,{children:"kth"})," element."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"approach-1-priority-queue",children:"Approach 1: Priority Queue"}),"\n",(0,s.jsx)(t.p,{children:"We can use priority queue to handle the sort order and only maintain at most k element. Return to the top, which is the k-th element in a stream."}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsxs)(a,{value:"cpp",label:"C++",children:[(0,s.jsx)(n,{name:"@wkw"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"class KthLargest {\npublic:\n    KthLargest(int k, vector<int>& nums) {\n        // add val to priority queue\n        for (auto x : nums) pq.push(x);\n        // here the queue is sorted\n        // only keep at most k elements\n        // pop out first pq.size() - k elements\n        while (pq.size() > k) pq.pop();\n        K = k;\n    }\n\n    int add(int val) {\n        // add val to priority queue\n        pq.push(val);\n        // here the queue is sorted\n        // only keep at most k elements\n        // pop out first pq.size() - k elements\n        while (pq.size() > K) pq.pop();\n        return pq.top();\n    }\nprivate:\n    int K;\n    // smaller first\n    priority_queue<int, vector<int>, greater<int>> pq;\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */\n"})})]}),(0,s.jsxs)(a,{value:"python",label:"Python",children:[(0,s.jsx)(n,{name:"@ColeB2"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:"class KthLargest:\n    # Utilizes Pythons HeapQ --\x3e Minheap implementation\n    # Time Complexity: O(n*logk + A*logk) where n is the length of nums,\n    # as we have to loop through all the nums initially to create our\n    # heap. A is the number of calls made to self.add method.\n    # and logk is the time it takes to add values to the heap.\n    # Space Complexity: O(k). Only need to maintain a k-sized heap.\n    def __init__(self, k: int, nums: List[int]):\n        # Python heap utilizes an array, initialize empty array\n        self.heap = []\n        # initialize self.k for access inside our add method.\n        self.k = k\n        # loop through each num, calling self.add to add to heap.\n        for num in nums:\n            self.add(num)\n\n\n    def add(self, val: int) -> int:\n        # length of heap < k --\x3e push it to the heap.\n        if len(self.heap) < self.k:\n            # Python heapq, works by calling heapq.heappush and\n            # supplying 2 parameters, the heap you want to add values\n            # to and the number you want to add to the heap.\n            heapq.heappush(self.heap, val)\n        # Heap already has k elements we push then pop.\n        else:\n            # Similar to heappush, takes a heap and a number to push\n            # to the heap. heappushpop pushes first, then pops, and in\n            # Python it is more efficient than using\n            # heappush first, then using heappop.\n            heapq.heappushpop(self.heap, val)\n        # return the first/top value of our heap.\n        return self.heap[0]\n"})})]})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function c(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(30758);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);