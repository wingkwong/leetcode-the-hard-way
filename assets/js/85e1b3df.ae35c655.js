"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[33943],{59583:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>t,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"0100-0199/compare-version-numbers-medium","title":"0165 - Compare Version Numbers (Medium)","description":"Author: @wingkwong | https://leetcode.com/problems/compare-version-numbers/","source":"@site/solutions/0100-0199/0165-compare-version-numbers-medium.md","sourceDirName":"0100-0199","slug":"/0100-0199/compare-version-numbers-medium","permalink":"/solutions/0100-0199/compare-version-numbers-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0165-compare-version-numbers-medium.md","tags":[],"version":"current","sidebarPosition":165,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/compare-version-numbers/"},"sidebar":"tutorialSidebar","previous":{"title":"0162 - Find Peak Element (Medium)","permalink":"/solutions/0100-0199/find-peak-element-medium"},"next":{"title":"0169 - Majority Element (Easy)","permalink":"/solutions/0100-0199/majority-element-easy"}}');var i=n(74848),a=n(28453);const o={description:"Author: @wingkwong | https://leetcode.com/problems/compare-version-numbers/"},t="0165 - Compare Version Numbers (Medium)",l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Split",id:"approach-1-split",level:2}];function m(e){const s={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"0165---compare-version-numbers-medium",children:"0165 - Compare Version Numbers (Medium)"})}),"\n",(0,i.jsx)(s.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://leetcode.com/problems/compare-version-numbers/",children:"https://leetcode.com/problems/compare-version-numbers/"})}),"\n",(0,i.jsx)(s.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(s.p,{children:["Given two version numbers, ",(0,i.jsx)(s.code,{children:"version1"})," and ",(0,i.jsx)(s.code,{children:"version2"}),", compare them."]}),"\n",(0,i.jsxs)(s.p,{children:["Version numbers consist of ",(0,i.jsx)(s.strong,{children:"one or more revisions"})," joined by a dot ",(0,i.jsx)(s.code,{children:"'.'"}),". Each revision consists of ",(0,i.jsx)(s.strong,{children:"digits"})," and may contain leading ",(0,i.jsx)(s.strong,{children:"zeros"}),". Every revision contains ",(0,i.jsx)(s.strong,{children:"at least one character"}),". Revisions are ",(0,i.jsx)(s.strong,{children:"0-indexed from left to right"}),", with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example ",(0,i.jsx)(s.code,{children:"2.5.33"})," and ",(0,i.jsx)(s.code,{children:"0.1"})," are valid version numbers."]}),"\n",(0,i.jsxs)(s.p,{children:["To compare version numbers, compare their revisions in ",(0,i.jsx)(s.strong,{children:"left-to-right order"}),". Revisions are compared using their ",(0,i.jsx)(s.strong,{children:"integer value ignoring any leading zeros"}),". This means that revisions ",(0,i.jsx)(s.code,{children:"1"})," and ",(0,i.jsx)(s.code,{children:"001"})," are considered ",(0,i.jsx)(s.strong,{children:"equal"}),". If a version number does not specify a revision at an index, then ",(0,i.jsxs)(s.strong,{children:["treat the revision as ",(0,i.jsx)(s.code,{children:"0"})]}),". For example, version ",(0,i.jsx)(s.code,{children:"1.0"})," is less than version ",(0,i.jsx)(s.code,{children:"1.1"})," because their revision 0s are the same, but their revision 1s are ",(0,i.jsx)(s.code,{children:"0"})," and ",(0,i.jsx)(s.code,{children:"1"})," respectively, and ",(0,i.jsx)(s.code,{children:"0 < 1"}),"."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Return the following:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["If ",(0,i.jsx)(s.code,{children:"version1 < version2"}),", return ",(0,i.jsx)(s.code,{children:"-1"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["If ",(0,i.jsx)(s.code,{children:"version1 > version2"}),", return ",(0,i.jsx)(s.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["Otherwise, return ",(0,i.jsx)(s.code,{children:"0"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: version1 = "1.01", version2 = "1.001"\nOutput: 0\nExplanation: Ignoring leading zeroes, both "01" and "001" represent the same integer "1".\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: version1 = "1.0", version2 = "1.0.0"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as "0".\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: version1 = "0.1", version2 = "1.1"\nOutput: -1\nExplanation: version1\'s revision 0 is "0", while version2\'s revision 0 is "1". 0 < 1, so version1 < version2.\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"1 <= version1.length, version2.length <= 500"})}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"version1"})," and ",(0,i.jsx)(s.code,{children:"version2"})," only contain digits and ",(0,i.jsx)(s.code,{children:"'.'"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"version1"})," and ",(0,i.jsx)(s.code,{children:"version2"})," ",(0,i.jsx)(s.strong,{children:"are valid version numbers"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["All the given revisions in ",(0,i.jsx)(s.code,{children:"version1"})," and ",(0,i.jsx)(s.code,{children:"version2"})," can be stored in a ",(0,i.jsx)(s.strong,{children:"32-bit integer"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"approach-1-split",children:"Approach 1: Split"}),"\n",(0,i.jsxs)(s.p,{children:['We split the input strings by "." and store the digit into a list. Then we pad 0s to the shortest list to make the length for both list equal. Then we can compare both list. In Python3, ',(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"c"}),(0,i.jsx)(s.mi,{children:"m"}),(0,i.jsx)(s.mi,{children:"p"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mo,{separator:"true",children:","}),(0,i.jsx)(s.mi,{children:"b"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"cmp(a, b)"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"c"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"p"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mpunct",children:","}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"b"}),(0,i.jsx)(s.span,{className:"mclose",children:")"})]})})]})," is gone so the equivalent for it is ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mo,{children:">"}),(0,i.jsx)(s.mi,{children:"b"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"\u2212"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mo,{children:"<"}),(0,i.jsx)(s.mi,{children:"b"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"(a > b) - (a < b)"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:">"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"b"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"<"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"b"}),(0,i.jsx)(s.span,{className:"mclose",children:")"})]})]})]}),"."]}),"\n",(0,i.jsx)(n,{name:"@wingkwong"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        v1 = [int(i) for i in version1.split(".")]\n        v2 = [int(i) for i in version2.split(".")]\n        l1, l2 = len(v1), len(v2)\n        if l1 < l2: v1 += [0] * (l2 - l1)\n        else: v2 += [0] * (l1 - l2)\n        return (v1 > v2) - (v1 < v2)\n'})})]})}function d(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>t});var r=n(96540);const i={},a=r.createContext(i);function o(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);