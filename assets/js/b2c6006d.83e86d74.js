"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[46874],{6543:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"0200-0299/word-pattern-easy","title":"0290 - Word Pattern (Easy)","description":"Author: @wkw | https://leetcode.com/problems/word-pattern/","source":"@site/solutions/0200-0299/0290-word-pattern-easy.md","sourceDirName":"0200-0299","slug":"/0200-0299/word-pattern-easy","permalink":"/solutions/0200-0299/word-pattern-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0290-word-pattern-easy.md","tags":[{"inline":true,"label":"Hash Table","permalink":"/solutions/tags/hash-table"},{"inline":true,"label":"String","permalink":"/solutions/tags/string"}],"version":"current","sidebarPosition":290,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/word-pattern/","tags":["Hash Table","String"]},"sidebar":"tutorialSidebar","previous":{"title":"0287 - Find the Duplicate Number (Medium)","permalink":"/solutions/0200-0299/find-the-duplicate-number-medium"},"next":{"title":"0295 - Find Median from Data Stream (Hard)","permalink":"/solutions/0200-0299/find-median-from-data-stream-hard"}}');var s=t(86070),o=t(68906);const a={description:"Author: @wkw | https://leetcode.com/problems/word-pattern/",tags:["Hash Table","String"]},i="0290 - Word Pattern (Easy)",d={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hashmap",id:"approach-1-hashmap",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{SolutionAuthor:t,TabItem:r,Tabs:a}=n;return t||p("SolutionAuthor",!0),r||p("TabItem",!0),a||p("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"0290---word-pattern-easy",children:"0290 - Word Pattern (Easy)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/word-pattern/",children:"https://leetcode.com/problems/word-pattern/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["Given a ",(0,s.jsx)(n.code,{children:"pattern"})," and a string ",(0,s.jsx)(n.code,{children:"s"}),", find if ",(0,s.jsx)(n.code,{children:"s"}),"\xa0follows the same pattern."]}),"\n",(0,s.jsxs)(n.p,{children:["Here ",(0,s.jsx)(n.strong,{children:"follow"})," means a full match, such that there is a bijection between a letter in ",(0,s.jsx)(n.code,{children:"pattern"})," and a ",(0,s.jsx)(n.strong,{children:"non-empty"})," word in ",(0,s.jsx)(n.code,{children:"s"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Input: pattern = "abba", s = "dog cat cat dog"\nOutput: true\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Input: pattern = "abba", s = "dog cat cat fish"\nOutput: false\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Input: pattern = "aaaa", s = "dog cat cat dog"\nOutput: false\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= pattern.length <= 300"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern"})," contains only lower-case English letters."]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= s.length <= 3000"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"s"})," contains only lowercase English letters and spaces ",(0,s.jsx)(n.code,{children:"' '"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"s"})," ",(0,s.jsx)(n.strong,{children:"does not contain"})," any leading or trailing spaces."]}),"\n",(0,s.jsxs)(n.li,{children:["All the words in ",(0,s.jsx)(n.code,{children:"s"})," are separated by a ",(0,s.jsx)(n.strong,{children:"single space"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-hashmap",children:"Approach 1: Hashmap"}),"\n",(0,s.jsx)(a,{children:(0,s.jsxs)(r,{value:"cpp",label:"C++",children:[(0,s.jsx)(t,{name:"@wkw"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'class Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        // convert s to a vector of strings\n        // e.g. "dog cat cat dog" -> ["dog", "cat", "cat", "dog"]\n        stringstream ss(s);\n        string word;\n        vector<string> words;\n        while (ss >> word) {\n            words.push_back(word);\n        }\n        // the size of words needs to be same as that of pattern\n        // e.g. words = ["xxx"], pattern = "xxx"\n        if (words.size() != pattern.size()) {\n            return false;\n        }\n        // for each word in words ...\n        // char in pattern -> word\n        // e.g. a -> dog\n        // e.g. b -> cat\n        unordered_map<char, string> m;\n        set<string> used;\n        for (int i = 0; i < words.size(); i++) {\n            // check if map the pattern\n            if (m.count(pattern[i])) {\n                // if pattern[i] exists in the hashmap,\n                // then we need to make sure that the word is correct\n                if (m[pattern[i]] != words[i]) {\n                    return false;\n                }\n            } else {\n                // each word can only map to one pattern\n                // e.g. pattern = "ab", s = "dog dog"\n                if (used.find(words[i]) != used.end()) {\n                    return false;\n                }\n                // if not, then map it\n                // e.g. a -> dog\n                m[pattern[i]] = words[i];\n                used.insert(words[i]);\n            }\n        }\n        return true;\n    }\n};\n'})})]})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(30758);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);