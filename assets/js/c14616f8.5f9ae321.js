"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[47066],{82632:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy","title":"1365 - How Many Numbers Are Smaller Than the Current Number (Easy)","description":"Author: @wkw | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/","source":"@site/solutions/1300-1399/1365-how-many-numbers-are-smaller-than-the-current-number-easy.md","sourceDirName":"1300-1399","slug":"/1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy","permalink":"/solutions/1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1365-how-many-numbers-are-smaller-than-the-current-number-easy.md","tags":[],"version":"current","sidebarPosition":1365,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"},"sidebar":"tutorialSidebar","previous":{"title":"1359 - Count All Valid Pickup and Delivery Options (Hard)","permalink":"/solutions/1300-1399/count-all-valid-pickup-and-delivery-options-hard"},"next":{"title":"1371 - Find the Longest Substring Containing Vowels in Even Counts (Medium)","permalink":"/solutions/1300-1399/find-the-longest-substring-containing-vowels-in-even-counts-medium"}}');var s=r(86070),o=r(40629);const a={description:"Author: @wkw | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"},l="1365 - How Many Numbers Are Smaller Than the Current Number (Easy)",i={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2},{value:"Approach 2: Sorting",id:"approach-2-sorting",level:2},{value:"Approach 3: Sorting + Lower Bound",id:"approach-3-sorting--lower-bound",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{SolutionAuthor:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"1365---how-many-numbers-are-smaller-than-the-current-number-easy",children:"1365 - How Many Numbers Are Smaller Than the Current Number (Easy)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/",children:"https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["Given the array ",(0,s.jsx)(n.code,{children:"nums"}),", for each ",(0,s.jsx)(n.code,{children:"nums[i]"})," find out how many numbers in the array are smaller than it. That is, for each ",(0,s.jsx)(n.code,{children:"nums[i]"})," you have to count the number of valid ",(0,s.jsx)(n.code,{children:"j's"})," such that ",(0,s.jsx)(n.code,{children:"j != i"})," ",(0,s.jsx)(n.strong,{children:"and"})," ",(0,s.jsx)(n.code,{children:"nums[j] < nums[i]"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Return the answer in an array. "}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation:\nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3).\nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1).\nFor nums[3]=2 there exist one smaller number than it (1).\nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [7,7,7,7]\nOutput: [0,0,0,0]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"2 <= nums.length <= 500"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"0 <= nums[i] <= 100"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-brute-force",children:"Approach 1: Brute Force"}),"\n",(0,s.jsx)(r,{name:"@wkw"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        int n = (int) nums.size();\n        vector<int> ans;\n        // iterate each element\n        for(int i = 0; i < n; i++){\n            // init a var called smaller\n            int smaller = 0;\n            // iterate each element\n            for(int j = 0; j < n; j++){\n                // if they are equal, skip it\n                if(i == j) continue;\n                // if nums[j] is smaller, increase the counter\n                if(nums[j] < nums[i]) smaller++;\n            }\n            // push the result to ans\n            ans.push_back(smaller);\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"approach-2-sorting",children:"Approach 2: Sorting"}),"\n",(0,s.jsx)(r,{name:"@wkw"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> sorted_nums { nums }, ans;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        // nums: 8 1 2 2 3\n        // sorted_nums: 1 2 2 3 8\n\n        // iterate each element in nums\n        // since we need the original order in ans\n        for (auto& x : nums) {\n            // init a var called smaller\n            int smaller = 0;\n            // walk thru sorted_nums\n            for (auto& y : sorted_nums) {\n                // if they are not equal, it means y is smaller than x\n                if (x != y) {\n                    smaller += 1;\n                } else {\n                    // otherwise, we got all elements smaller than x\n                    // so break it here\n                    break;\n                }\n            }\n            // push the result to ans\n            ans.push_back(smaller);\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"approach-3-sorting--lower-bound",children:"Approach 3: Sorting + Lower Bound"}),"\n",(0,s.jsx)(r,{name:"@wkw"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> sorted_nums { nums }, ans;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        // nums: 8 1 2 2 3\n        // sorted_nums: 1 2 2 3 8\n        for (auto& x : nums) {\n            // we can use lower_bound to calculate the smaller\n            // lower_bound: returns an iterator pointing to the first element in the range [first,last)\n            // which does not compare less than val\n            // since it is a iterator, we need to add "- sorted_nums.begin()" to get the number of elements.\n            ans.push_back(\n                lower_bound(sorted_nums.begin(), sorted_nums.end(), x)\n                            - sorted_nums.begin()\n            );\n        }\n        return ans;\n    }\n};\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},40629:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(30758);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);