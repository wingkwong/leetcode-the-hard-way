"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4697],{98535:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"0400-0499/can-i-win-medium","title":"0464 - Can I Win (Medium)","description":"Author: @wkw | https://leetcode.com/problems/can-i-win/","source":"@site/solutions/0400-0499/0464-can-i-win-medium.md","sourceDirName":"0400-0499","slug":"/0400-0499/can-i-win-medium","permalink":"/solutions/0400-0499/can-i-win-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0464-can-i-win-medium.md","tags":[{"inline":true,"label":"Math","permalink":"/solutions/tags/math"},{"inline":true,"label":"Dynamic Programming","permalink":"/solutions/tags/dynamic-programming"},{"inline":true,"label":"Bit Manipulation","permalink":"/solutions/tags/bit-manipulation"},{"inline":true,"label":"Memoization","permalink":"/solutions/tags/memoization"},{"inline":true,"label":"Game Theory","permalink":"/solutions/tags/game-theory"},{"inline":true,"label":"Bitmask","permalink":"/solutions/tags/bitmask"}],"version":"current","sidebarPosition":464,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/can-i-win/","tags":["Math","Dynamic Programming","Bit Manipulation","Memoization","Game Theory","Bitmask"]},"sidebar":"tutorialSidebar","previous":{"title":"0452 - Minimum Number of Arrows to Burst Balloons (Medium)","permalink":"/solutions/0400-0499/minimum-number-of-arrows-to-burst-balloons-medium"},"next":{"title":"0465 - Optimal Account Balancing (Hard)","permalink":"/solutions/0400-0499/optimal-account-balancing-hard"}}');var o=t(86070),r=t(32790);const a={description:"Author: @wkw | https://leetcode.com/problems/can-i-win/",tags:["Math","Dynamic Programming","Bit Manipulation","Memoization","Game Theory","Bitmask"]},s="0464 - Can I Win (Medium)",l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Bitmask",id:"approach-1-bitmask",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:t,TabItem:i,Tabs:a}=n;return t||h("SolutionAuthor",!0),i||h("TabItem",!0),a||h("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"0464---can-i-win-medium",children:"0464 - Can I Win (Medium)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/can-i-win/",children:"https://leetcode.com/problems/can-i-win/"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:['In the "100 game" two players take turns adding, to a running total, any integer from ',(0,o.jsx)(n.code,{children:"1"})," to ",(0,o.jsx)(n.code,{children:"10"}),". The player who first causes the running total to ",(0,o.jsx)(n.strong,{children:"reach or exceed"})," 100 wins."]}),"\n",(0,o.jsxs)(n.p,{children:["What if we change the game so that players ",(0,o.jsx)(n.strong,{children:"cannot"})," re-use integers?"]}),"\n",(0,o.jsx)(n.p,{children:"For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100."}),"\n",(0,o.jsxs)(n.p,{children:["Given two integers ",(0,o.jsx)(n.code,{children:"maxChoosableInteger"})," and ",(0,o.jsx)(n.code,{children:"desiredTotal"}),", return ",(0,o.jsx)(n.code,{children:"true"})," if the first player to move can force a win, otherwise, return ",(0,o.jsx)(n.code,{children:"false"}),". Assume both players play ",(0,o.jsx)(n.strong,{children:"optimally"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= maxChoosableInteger <= 20"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"0 <= desiredTotal <= 300"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-bitmask",children:"Approach 1: Bitmask"}),"\n",(0,o.jsx)(a,{children:(0,o.jsxs)(i,{value:"py",label:"Python",children:[(0,o.jsx)(t,{name:"@wkw"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"class Solution:\n    @lru_cache(None)\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int, b = 0) -> bool:\n        # 1 + 2 + 3 + .. maxChoosableInteger < desiredTotal -> no one can win\n        # desiredTotal <= 0 and b is set -> can't make a move\n        if maxChoosableInteger * (maxChoosableInteger + 1) // 2 < desiredTotal or desiredTotal <= 0 and b:\n            return False\n        # try each number in [1, maxChoosableInteger]\n        for i in range(1, maxChoosableInteger + 1):\n            # if this number is not used\n            if not (1 << i) & b:\n                # then mark it used -> b | (1 << i)\n                # update desiredTotal to desiredTotal - i\n                if not self.canIWin(maxChoosableInteger, desiredTotal - i, b | (1 << i)):\n                    return True\n"})})]})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(30758);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);