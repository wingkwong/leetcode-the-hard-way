"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[19116],{10865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"0900-0999/time-based-key-value-store-medium","title":"0981 - Time Based Key-Value Store (Medium)","description":"Author: @ganajayant | https://leetcode.com/problems/time-based-key-value-store/","source":"@site/solutions/0900-0999/0981-time-based-key-value-store-medium.md","sourceDirName":"0900-0999","slug":"/0900-0999/time-based-key-value-store-medium","permalink":"/solutions/0900-0999/time-based-key-value-store-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0981-time-based-key-value-store-medium.md","tags":[],"version":"current","sidebarPosition":981,"frontMatter":{"description":"Author: @ganajayant | https://leetcode.com/problems/time-based-key-value-store/"},"sidebar":"tutorialSidebar","previous":{"title":"0976 - Largest Perimeter Triangle (Easy)","permalink":"/solutions/0900-0999/largest-perimeter-triangle-easy"},"next":{"title":"0985 - Sum of Even Numbers After Queries (Medium)","permalink":"/solutions/0900-0999/sum-of-even-numbers-after-queries.medium"}}');var i=n(86070),s=n(68906);const l={description:"Author: @ganajayant | https://leetcode.com/problems/time-based-key-value-store/"},r="0981 - Time Based Key-Value Store (Medium)",o={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:n,TabItem:a,Tabs:l}=t;return n||c("SolutionAuthor",!0),a||c("TabItem",!0),l||c("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"0981---time-based-key-value-store-medium",children:"0981 - Time Based Key-Value Store (Medium)"})}),"\n",(0,i.jsx)(t.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/time-based-key-value-store/",children:"https://leetcode.com/problems/time-based-key-value-store/"})}),"\n",(0,i.jsx)(t.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsx)(t.p,{children:"Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp."}),"\n",(0,i.jsxs)(t.p,{children:["Implement the ",(0,i.jsx)(t.code,{children:"TimeMap"})," class:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"TimeMap()"})," Initializes the object of the data structure."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"void set(String key, String value, int timestamp)"})," Stores the key ",(0,i.jsx)(t.code,{children:"key"})," with the value ",(0,i.jsx)(t.code,{children:"value"})," at the given time ",(0,i.jsx)(t.code,{children:"timestamp"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"String get(String key, int timestamp)"})," Returns a value such that ",(0,i.jsx)(t.code,{children:"set"})," was called previously, with ",(0,i.jsx)(t.code,{children:"timestamp_prev <= timestamp"}),". If there are multiple such values, it returns the value associated with the largest ",(0,i.jsx)(t.code,{children:"timestamp_prev"}),". If there are no values, it returns ",(0,i.jsx)(t.code,{children:'""'}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Input: ["TimeMap", "set", "get", "get", "set", "get", "get"]\n        [[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]\nOutput: [null, null, "bar", "bar", null, "bar2", "bar2"]\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"1 <= key.length, value.length <= 100"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"key"})," and ",(0,i.jsx)(t.code,{children:"value"})," consist of lowercase English letters and digits."]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"1 <= timestamp <= 10^7"})}),"\n",(0,i.jsxs)(t.li,{children:["All the timestamps ",(0,i.jsx)(t.code,{children:"timestamp"})," of ",(0,i.jsx)(t.code,{children:"set"})," are strictly increasing."]}),"\n",(0,i.jsxs)(t.li,{children:["At most ",(0,i.jsx)(t.code,{children:"2 * 10^5"})," calls will be made to ",(0,i.jsx)(t.code,{children:"set"})," and ",(0,i.jsx)(t.code,{children:"get"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"approach-1-binary-search",children:"Approach 1: Binary Search"}),"\n",(0,i.jsx)(t.p,{children:"Create a hashmap to store key, value pairs. Here the value timestamp value with acutal value which is stored in another Object of class Element Whenever get used for a particular element we will be going to get all the values of corresponding key and binary search the list of timestamps"}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsxs)(a,{value:"java",label:"Java",children:[(0,i.jsx)(n,{name:"@ganajayant"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'class Element {\n    String val;\n    int timestamp;\n\n    public Element(String val, int timestamp) {\n        this.val = val;\n        this.timestamp = timestamp;\n    }\n\n}\n\nclass TimeMap {\n    HashMap<String, LinkedList<Element>> hm;\n\n    public TimeMap() {\n        hm = new HashMap<>();\n    }\n\n    public void set(String key, String value, int timestamp) {\n        if (hm.containsKey(key)) {\n            LinkedList<Element> ll = hm.get(key);\n            ll.add(new Element(value, timestamp));\n            hm.put(key, ll);\n        } else {\n            LinkedList<Element> ll = new LinkedList<>();\n            ll.add(new Element(value, timestamp));\n            hm.put(key, ll);\n        }\n    }\n\n    public String get(String key, int timestamp) {\n        LinkedList<Element> ll = hm.getOrDefault(key, null);\n        if (ll == null) {\n            return "";\n        }\n        int low = 0, high = ll.size() - 1;\n        if (ll.get(low).timestamp > timestamp) {\n            return "";\n        }\n        if (ll.get(high).timestamp <= timestamp) {\n            return ll.get(high).val;\n        }\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (ll.get(mid).timestamp == timestamp) {\n                return ll.get(mid).val;\n            }\n            if (ll.get(mid).timestamp < timestamp) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n\n        }\n        return ll.get(low - 1).val;\n    }\n}\n'})})]}),(0,i.jsxs)(a,{value:"python",label:"Python",children:[(0,i.jsx)(n,{name:"@ColeB2"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:'class TimeMap:\n    # Here we will implement our TimeMap. We need easy access to our values, via\n    # a key,value pair system, as well as we may also have multiple values for\n    # each key, which will be inputted at a given timestamp. So a hash map, for\n    # O(1) access given keys, with values being an array of all our values at a given\n    # timestamp. ie: { key: [(timestamp1, value1), (timestamp2, value2)...] }\n    # That gives us O(1) access to the arrays, then we just need to search. Knowing\n    # values will be added in strictly increasing order means they will be sorted\n    # by time, allowing us to use Binary Search, O(logn), to search over timestamps.\n    def __init__(self):\n        # initialize empty hash map, O(1) to init.\n        self.map = {}\n\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # add key, value, timestamps to hash map, O(1) to add to hash map.\n        # key doesn\'t yet exist in our hash map, initialize as empty array.\n        if key not in self.map:\n            self.map[key] = []\n        # add tuple to hash map @ key, consisting of (timestamp, value)\n        self.map[key].append((timestamp, value))\n\n\n    def get(self, key: str, timestamp: int) -> str:\n        # Get value from key, #O(logn) where n length of array we are searching.\n        # base case: key doesn\'t exist, return early\n        if key not in self.map:\n            return ""\n        # get value at key, which is an array we will be binary searching.\n        arr = self.map[key]\n        # base case: checking if timestamp predates all times in array,\n        # if timestamp does predate all times, return early\n        if timestamp < arr[0][0]:\n            return ""\n        # binary search, initialize left, l and right, r pointers.\n        l, r = 0, len(arr)\n        while l < r:\n            # calculate middle, m. Do it this way as good practice\n            # for languages that might overflow max integer.\n            m = l + (r - l) // 2\n            time = arr[m][0]\n            # found time, return early\n            if time == timestamp:\n                return arr[m][1]\n            # time looking at is smaller than timestamp we need.\n            elif time < timestamp:\n                # move left pointer, scan the array, right of m.\n                l = m + 1\n            # time we are looking at is larger than timestamp we need.\n            else:\n                # move right pointer, scan the array, left of m.\n                r = m\n        # our binary search will always either return the proper answer\n        # or finish with left pointer 1 above the answer, as it didn\'t\n        # exactly find the answer, so we can return:\n        return arr[l - 1][1]\n'})})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function c(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var a=n(30758);const i={},s=a.createContext(i);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);