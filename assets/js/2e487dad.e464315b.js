"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[14254],{60111:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"0000-0099/spiral-matrix-medium","title":"0054 - Spiral Matrix (Medium)","description":"Author: @ColeB2 | https://leetcode.com/problems/spiral-matrix/","source":"@site/solutions/0000-0099/0054-spiral-matrix-medium.md","sourceDirName":"0000-0099","slug":"/0000-0099/spiral-matrix-medium","permalink":"/solutions/0000-0099/spiral-matrix-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0054-spiral-matrix-medium.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Matrix","permalink":"/solutions/tags/matrix"},{"inline":true,"label":"Simulation","permalink":"/solutions/tags/simulation"}],"version":"current","sidebarPosition":54,"frontMatter":{"description":"Author: @ColeB2 | https://leetcode.com/problems/spiral-matrix/","tags":["Array","Matrix","Simulation"]},"sidebar":"tutorialSidebar","previous":{"title":"0053 - Maximum Subarray (Medium)","permalink":"/solutions/0000-0099/maximum-subarray-medium"},"next":{"title":"0055 - Jump Game (Medium)","permalink":"/solutions/0000-0099/jump-game-medium"}}');var r=n(74848),i=n(28453);const t={description:"Author: @ColeB2 | https://leetcode.com/problems/spiral-matrix/",tags:["Array","Matrix","Simulation"]},l="0054 - Spiral Matrix (Medium)",c={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Spiral Order Search using Set.",id:"approach-1-spiral-order-search-using-set",level:2}];function d(e){const s={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:n,TabItem:a,Tabs:t}=s;return n||o("SolutionAuthor",!0),a||o("TabItem",!0),t||o("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"0054---spiral-matrix-medium",children:"0054 - Spiral Matrix (Medium)"})}),"\n",(0,r.jsx)(s.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/spiral-matrix/",children:"https://leetcode.com/problems/spiral-matrix/"})}),"\n",(0,r.jsx)(s.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(s.p,{children:["Given an ",(0,r.jsx)(s.strong,{children:"m x n"})," ",(0,r.jsx)(s.strong,{children:"matrix"}),", return ",(0,r.jsx)(s.em,{children:"all elements of the"})," ",(0,r.jsx)(s.strong,{children:"matrix"})," ",(0,r.jsx)(s.em,{children:"in spiral order"}),"."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg",alt:""})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg",alt:""})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"m == matrix.length"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"n == matrix[i].length"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"1 <= m, n <= 10"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"-100 <= matrix[i][j] <= 100"})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"approach-1-spiral-order-search-using-set",children:"Approach 1: Spiral Order Search using Set."}),"\n",(0,r.jsx)(s.p,{children:"We can just iterate the matrix in a spiral order, starting at the top left, and moving in the 4 cardinal directions, changing the direction if we ever hit a boundary or a previously visited cell."}),"\n",(0,r.jsxs)(s.p,{children:["This means we will need a few things, the order of our 4 directions, that is ",(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mn,{children:"0"}),(0,r.jsx)(s.mo,{separator:"true",children:","}),(0,r.jsx)(s.mn,{children:"1"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"}),(0,r.jsx)(s.mo,{separator:"true",children:","}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mn,{children:"1"}),(0,r.jsx)(s.mo,{separator:"true",children:","}),(0,r.jsx)(s.mn,{children:"0"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"}),(0,r.jsx)(s.mo,{separator:"true",children:","}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mn,{children:"0"}),(0,r.jsx)(s.mo,{separator:"true",children:","}),(0,r.jsx)(s.mo,{children:"\u2212"}),(0,r.jsx)(s.mn,{children:"1"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"}),(0,r.jsx)(s.mo,{separator:"true",children:","}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mo,{children:"\u2212"}),(0,r.jsx)(s.mn,{children:"1"}),(0,r.jsx)(s.mo,{separator:"true",children:","}),(0,r.jsx)(s.mn,{children:"0"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"((0,1), (1,0), (0,-1), (-1,0))"})]})})}),(0,r.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(s.span,{className:"mopen",children:"(("}),(0,r.jsx)(s.span,{className:"mord",children:"0"}),(0,r.jsx)(s.span,{className:"mpunct",children:","}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mord",children:"1"}),(0,r.jsx)(s.span,{className:"mclose",children:")"}),(0,r.jsx)(s.span,{className:"mpunct",children:","}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsx)(s.span,{className:"mord",children:"1"}),(0,r.jsx)(s.span,{className:"mpunct",children:","}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mord",children:"0"}),(0,r.jsx)(s.span,{className:"mclose",children:")"}),(0,r.jsx)(s.span,{className:"mpunct",children:","}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsx)(s.span,{className:"mord",children:"0"}),(0,r.jsx)(s.span,{className:"mpunct",children:","}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mord",children:"\u2212"}),(0,r.jsx)(s.span,{className:"mord",children:"1"}),(0,r.jsx)(s.span,{className:"mclose",children:")"}),(0,r.jsx)(s.span,{className:"mpunct",children:","}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsx)(s.span,{className:"mord",children:"\u2212"}),(0,r.jsx)(s.span,{className:"mord",children:"1"}),(0,r.jsx)(s.span,{className:"mpunct",children:","}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mord",children:"0"}),(0,r.jsx)(s.span,{className:"mclose",children:"))"})]})})]})," which is right, down, left, up. We will need an index to track where we are in our directions, and a visited set to prevent us from going to the same cell twice."]}),"\n",(0,r.jsxs)(s.p,{children:["With all that set, we can just loop until our return array reaches the length of ",(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"R"}),(0,r.jsx)(s.mi,{children:"O"}),(0,r.jsx)(s.mi,{children:"W"}),(0,r.jsx)(s.mi,{children:"S"}),(0,r.jsx)(s.mo,{children:"\u2217"}),(0,r.jsx)(s.mi,{children:"C"}),(0,r.jsx)(s.mi,{children:"O"}),(0,r.jsx)(s.mi,{children:"L"}),(0,r.jsx)(s.mi,{children:"U"}),(0,r.jsx)(s.mi,{children:"M"}),(0,r.jsx)(s.mi,{children:"N"}),(0,r.jsx)(s.mi,{children:"S"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"ROWS * COLUMNS"})]})})}),(0,r.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.6833em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"RO"}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.13889em"},children:"W"}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"S"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mbin",children:"\u2217"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.6833em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"CO"}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"LU"}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"MNS"})]})]})]})," adding each cell to our array and visited set, and then checking our boundaries to make sure we move our position to the proper spot."]}),"\n",(0,r.jsxs)(s.p,{children:["Time Complexity: ",(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"O"}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mi,{children:"m"}),(0,r.jsx)(s.mo,{children:"\u2217"}),(0,r.jsx)(s.mi,{children:"n"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(m * n)"})]})})}),(0,r.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mbin",children:"\u2217"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(s.span,{className:"mclose",children:")"})]})]})]})," where m is the number of rows, and n is the number of columns. We have to iterate each cell once in order to return the spiral order."]}),"\n",(0,r.jsxs)(s.p,{children:["Space Complexity: ",(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"O"}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mi,{children:"m"}),(0,r.jsx)(s.mo,{children:"\u2217"}),(0,r.jsx)(s.mi,{children:"n"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(m * n)"})]})})}),(0,r.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mbin",children:"\u2217"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(s.span,{className:"mclose",children:")"})]})]})]}),", we need an array to return all the numbers in the matrix, and will also utilize a set to prevent revisiting cells."]}),"\n",(0,r.jsx)(t,{children:(0,r.jsxs)(a,{value:"python",label:"Python",children:[(0,r.jsx)(n,{name:"@ColeB2"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-py",children:"class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        # INITILIZE the ROWS, COLS of matrix, the directions of\n        # spiral order, and an index to track which direction we are\n        # traversing.\n        ROWS, COLS = len(matrix), len(matrix[0])\n        dirs = ((0,1), (1,0), (0,-1), (-1,0))\n        direction = 0\n        # initialize our return array, our visited set\n        spiral_order = []\n        visited = set()\n        # position in the matrix\n        r, c = 0, 0\n        while not len(spiral_order) == (ROWS * COLS):\n            # For our loop we will always just blindly add to the \n            # array and visited set, then check boundaries after.\n            spiral_order.append(matrix[r][c])\n            visited.add((r,c))\n            # check the next direction\n            dr, dc = dirs[direction]\n            nr, nc = dr + r, dc + c\n            # if next direction doesn't work.\n            if (nr >= ROWS or nr < 0 or\n                nc >= COLS or nc < 0 or\n                (nr, nc) in visited\n                ):\n                # change direction\n                direction = direction + 1 if direction < len(dirs) - 1 else 0\n            # update the next cell using the direction we need to be\n            # travelling. Since we are using a visited, and boundary\n            # checking above, the new cell r,c will always point to an\n            # unvisited, inbounds cell.\n            dr, dc = dirs[direction]\n            r, c = r + dr, c + dc\n        \n        return spiral_order\n"})})]})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function o(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var a=n(96540);const r={},i=a.createContext(r);function t(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);