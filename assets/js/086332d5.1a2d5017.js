"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[82404],{76536:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"1600-1699/ways-to-make-a-fair-array-medium","title":"1664 - Ways to Make a Fair Array (Medium)","description":"Author: @wkw | https://leetcode.com/problems/ways-to-make-a-fair-array/","source":"@site/solutions/1600-1699/1664-ways-to-make-a-fair-array-medium.md","sourceDirName":"1600-1699","slug":"/1600-1699/ways-to-make-a-fair-array-medium","permalink":"/solutions/1600-1699/ways-to-make-a-fair-array-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1600-1699/1664-ways-to-make-a-fair-array-medium.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Dynamic Programming","permalink":"/solutions/tags/dynamic-programming"}],"version":"current","sidebarPosition":1664,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/ways-to-make-a-fair-array/","tags":["Array","Dynamic Programming"]},"sidebar":"tutorialSidebar","previous":{"title":"1662 - Check If Two String Arrays are Equivalent (Easy)","permalink":"/solutions/1600-1699/check-if-two-string-arrays-are-equivalent-easy"},"next":{"title":"1672 - Richest Customer Wealth (Easy)","permalink":"/solutions/1600-1699/richest-customer-wealth-easy"}}');var i=r(86070),a=r(32790);const s={description:"Author: @wkw | https://leetcode.com/problems/ways-to-make-a-fair-array/",tags:["Array","Dynamic Programming"]},o="1664 - Ways to Make a Fair Array (Medium)",d={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix Sum",id:"approach-1-prefix-sum",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:r,TabItem:t,Tabs:s}=n;return r||c("SolutionAuthor",!0),t||c("TabItem",!0),s||c("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"1664---ways-to-make-a-fair-array-medium",children:"1664 - Ways to Make a Fair Array (Medium)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/ways-to-make-a-fair-array/",children:"https://leetcode.com/problems/ways-to-make-a-fair-array/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["You are given an integer array\xa0",(0,i.jsx)(n.code,{children:"nums"}),". You can choose ",(0,i.jsx)(n.strong,{children:"exactly one"})," index (",(0,i.jsx)(n.strong,{children:"0-indexed"}),") and remove the element. Notice that the index of the elements may change after the removal."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, if ",(0,i.jsx)(n.code,{children:"nums = [6,1,7,4,1]"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Choosing to remove index ",(0,i.jsx)(n.code,{children:"1"})," results in ",(0,i.jsx)(n.code,{children:"nums = [6,7,4,1]"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Choosing to remove index ",(0,i.jsx)(n.code,{children:"2"})," results in ",(0,i.jsx)(n.code,{children:"nums = [6,1,4,1]"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Choosing to remove index ",(0,i.jsx)(n.code,{children:"4"})," results in ",(0,i.jsx)(n.code,{children:"nums = [6,1,7,4]"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["An array is ",(0,i.jsx)(n.strong,{children:"fair"})," if the sum of the odd-indexed values equals the sum of the even-indexed values."]}),"\n",(0,i.jsxs)(n.p,{children:["Return the ",(0,i.jsx)(n.strong,{children:"*number"})," of indices that you could choose such that after the removal,*",(0,i.jsx)(n.code,{children:"nums"}),"*is ",(0,i.jsx)(n.strong,{children:"fair"}),".*"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: nums = [2,1,6,4]\nOutput: 1\nExplanation:\nRemove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\nRemove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\nRemove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\nRemove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\nThere is 1 index that you can remove to make nums fair.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: nums = [1,1,1]\nOutput: 3\nExplanation:\xa0You can remove any index and the remaining array is fair.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: nums = [1,2,3]\nOutput: 0\nExplanation:\xa0You cannot make a fair array after removing any index.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= nums.length <= 1e5"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= nums[i] <= 10^4"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-prefix-sum",children:"Approach 1: Prefix Sum"}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(t,{value:"cpp",label:"C++",children:[(0,i.jsx)(r,{name:"@wkw"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int waysToMakeFair(vector<int>& nums) {\n        int ans = 0, odd = 0, even = 0, n = nums.size();\n        for (int i = 0; i < n; i++) {\n            // calculate the sum at odd index\n            if (i & 1) odd += nums[i];\n            // calculate the sum at even index\n            else even += nums[i];\n        }\n        // we want to simulate the removal and calculate the result on the fly\n        // if we remove a number at index i,\n        // then the parity of all numbers after nums[i] will be changed\n        // i.e. even -> odd and odd -> even\n        // while that of numbers before nums[i] will not changed\n        // we can calculate the prefix sum at odd index & even index for the calculation\n        int preOdd = 0, preEven = 0;\n        for (int i = 0; i < n; i++) {\n            if (i & 1) {\n                // 1. remove nums[i] at odd index -> `odd` would become `odd - nums[i]`\n                // 2. the odd sum after index i = `odd - nums[i] - preOdd`\n                // 3. since nums[i] is removed, all numbers after that will shift to the left by 1 position\n                //    `odd - nums[i] - preOdd` would contribute to even sum\n                // 4. since the parity of numbers before index i won't be changed,\n                //    the new even sum would be `preEven + (odd - nums[i] - preOdd)`\n\n                // similarly, the new odd would be preOdd + even - preEven\n                // where preOdd doesn't change and (even - preEven) is the even sum after index i\n\n                int new_even = preEven + (odd - nums[i] - preOdd);\n                int new_odd = preOdd + (even - preEven);\n                ans += new_odd == new_even;\n                // add the current number to preOdd\n                preOdd += nums[i];\n            } else {\n                // 1. remove nums[i] at even index -> `even` would become `even - nums[i]`\n                // 2. the even sum after index i = `even - nums[i] - preEven`\n                // 3. since nums[i] is removed, all numbers after that will shift to the left by 1 position\n                //    `even - nums[i] - preEven` would contribute to odd sum\n                // 4. since the parity of numbers before index i won't be changed,\n                //    the new odd sum would be `preOdd + even - nums[i] - preEven`\n\n                // similarly, the new even would be preEven + odd - preOdd\n                // where preEven doesn't change and (odd - preOdd) is the even sum after index i\n                int new_odd = preOdd + (even - nums[i] - preEven);\n                int new_even = preEven + (odd - preOdd);\n                ans += new_odd == new_even;\n                // add the current number to preEven\n                preEven += nums[i];\n            }\n        }\n        return ans;\n    }\n};\n"})})]})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(30758);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);