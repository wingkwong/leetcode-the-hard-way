"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[39985],{72807:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"2100-2199/counting-words-with-a-given-prefix-easy","title":"2185 - Counting Words With a Given Prefix (Easy)","description":"Author: @heiheihang, @wkw | https://leetcode.com/problems/counting-words-with-a-given-prefix/","source":"@site/solutions/2100-2199/2185-counting-words-with-a-given-prefix-easy.md","sourceDirName":"2100-2199","slug":"/2100-2199/counting-words-with-a-given-prefix-easy","permalink":"/solutions/2100-2199/counting-words-with-a-given-prefix-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2185-counting-words-with-a-given-prefix-easy.md","tags":[],"version":"current","sidebarPosition":2185,"frontMatter":{"description":"Author: @heiheihang, @wkw | https://leetcode.com/problems/counting-words-with-a-given-prefix/"},"sidebar":"tutorialSidebar","previous":{"title":"2183 - Count Array Pairs Divisible by K (Hard)","permalink":"/solutions/2100-2199/count-array-pairs-divisible-by-k-hard"},"next":{"title":"2186 - Minimum Number of Steps to Make Two Strings Anagram II (Medium)","permalink":"/solutions/2100-2199/minimum-number-of-steps-to-make-two-strings-anagram-ii-medium"}}');var i=t(86070),s=t(40629);const o={description:"Author: @heiheihang, @wkw | https://leetcode.com/problems/counting-words-with-a-given-prefix/"},a="2185 - Counting Words With a Given Prefix (Easy)",c={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iteration",id:"approach-1-iteration",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"2185---counting-words-with-a-given-prefix-easy",children:"2185 - Counting Words With a Given Prefix (Easy)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/counting-words-with-a-given-prefix/",children:"https://leetcode.com/problems/counting-words-with-a-given-prefix/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["You are given an array of strings ",(0,i.jsx)(n.code,{children:"words"})," and a string ",(0,i.jsx)(n.code,{children:"pref"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Return ",(0,i.jsx)(n.em,{children:"the number of strings in"})," ",(0,i.jsx)(n.code,{children:"words"})," ",(0,i.jsx)(n.em,{children:"that contain"})," ",(0,i.jsx)(n.code,{children:"pref"})," ",(0,i.jsxs)(n.em,{children:["as a ",(0,i.jsx)(n.strong,{children:"prefix"})]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"prefix"})," of a string ",(0,i.jsx)(n.code,{children:"s"})," is any leading contiguous substring of ",(0,i.jsx)(n.code,{children:"s"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input: words = ["pay","attention","practice","attend"], pref = "at"\nOutput: 2\nExplanation: The 2 strings that contain "at" as a prefix are: "attention" and "attend".\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input: words = ["leetcode","win","loops","success"], pref = "code"\nOutput: 0\nExplanation: There are no strings that contain "code" as a prefix.\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= words.length <= 100"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= words[i].length, pref.length <= 100"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"words[i]"})," and ",(0,i.jsx)(n.code,{children:"pref"})," consist of lowercase English letters."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-iteration",children:"Approach 1: Iteration"}),"\n",(0,i.jsxs)(n.p,{children:["We can define the length of the prefix string to be ",(0,i.jsx)(n.code,{children:"n"})," , then we need to grab the first ",(0,i.jsx)(n.code,{children:"n"})," characters of each word and compare their substrings. In the case the word has length less than ",(0,i.jsx)(n.code,{children:"n"}),", we skip the word."]}),"\n",(0,i.jsx)(t,{name:"@heiheihang"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def prefixCount(self, words: List[str], pref: str) -> int:\n\n        #define the length of prefix\n        n = len(pref)\n\n        res = 0\n\n        #iterate each word\n        for s in words:\n\n            #cannot get first n characters if it is shorter than n, so skip\n            if( len(s) < n):\n                continue\n            #compare the first n characters\n            if(s[:n] == pref):\n                res += 1\n\n        return res\n"})}),"\n",(0,i.jsx)(t,{name:"@wkw"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int prefixCount(vector<string>& words, string pref) {\n        int ans = 0;\n        // string::find returns the first position\n        // of the first character of the first match\n        for (auto s: words) ans += s.find(pref) == 0;\n        return ans;\n    }\n};\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},40629:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(30758);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);