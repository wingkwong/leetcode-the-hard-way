"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[24030],{78450:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"2200-2299/count-integers-in-intervals-hard","title":"2276 - Count Integers in Intervals (Hard)","description":"Author: @wkw | https://leetcode.com/problems/count-integers-in-intervals","source":"@site/solutions/2200-2299/2276-count-integers-in-intervals-hard.md","sourceDirName":"2200-2299","slug":"/2200-2299/count-integers-in-intervals-hard","permalink":"/solutions/2200-2299/count-integers-in-intervals-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2276-count-integers-in-intervals-hard.md","tags":[],"version":"current","sidebarPosition":2276,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/count-integers-in-intervals"},"sidebar":"tutorialSidebar","previous":{"title":"2275 - Largest Combination With Bitwise AND Greater Than Zero (Medium)","permalink":"/solutions/2200-2299/largest-combination-with-bitwise-and-greater-than-zero-medium"},"next":{"title":"2278 - Percentage of Letter in String (Easy)","permalink":"/solutions/2200-2299/percentage-of-letter-in-string"}}');var i=t(86070),s=t(32790);const l={description:"Author: @wkw | https://leetcode.com/problems/count-integers-in-intervals"},o="2276 - Count Integers in Intervals (Hard)",a={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sweep Line &amp; Merge",id:"approach-1-sweep-line--merge",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"2276---count-integers-in-intervals-hard",children:"2276 - Count Integers in Intervals (Hard)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/count-integers-in-intervals",children:"https://leetcode.com/problems/count-integers-in-intervals"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["Given an ",(0,i.jsx)(n.strong,{children:"empty"})," set of intervals, implement a data structure that can:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add"})," an interval to the set of intervals."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Count"})," the number of integers that are present in ",(0,i.jsx)(n.strong,{children:"at least one"})," interval."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Implement the ",(0,i.jsx)(n.code,{children:"CountIntervals"})," class:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CountIntervals()"})," Initializes the object with an empty set of intervals."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"void add(int left, int right)"})," Adds the interval ",(0,i.jsx)(n.code,{children:"[left, right]"})," to the set of intervals."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"int count()"})," Returns the number of integers that are present in ",(0,i.jsx)(n.strong,{children:"at least one"})," interval."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"})," that an interval ",(0,i.jsx)(n.code,{children:"[left, right]"})," denotes all the integers ",(0,i.jsx)(n.code,{children:"x"})," where ",(0,i.jsx)(n.code,{children:"left <= x <= right"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input\n["CountIntervals", "add", "add", "count", "add", "count"]\n[[], [2, 3], [7, 10], [], [5, 8], []]\nOutput\n[null, null, null, 6, null, 8]\n\nExplanation\nCountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set of intervals.\ncountIntervals.add(2, 3);  // add [2, 3] to the set of intervals.\ncountIntervals.add(7, 10); // add [7, 10] to the set of intervals.\ncountIntervals.count();    // return 6\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 7, 8, 9, and 10 are present in the interval [7, 10].\ncountIntervals.add(5, 8);  // add [5, 8] to the set of intervals.\ncountIntervals.count();    // return 8\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 5 and 6 are present in the interval [5, 8].\n                           // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10].\n                           // the integers 9 and 10 are present in the interval [7, 10].\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= left <= right <= 10^9"})}),"\n",(0,i.jsxs)(n.li,{children:["At most ",(0,i.jsx)(n.code,{children:"1e5"})," calls ",(0,i.jsx)(n.strong,{children:"in total"})," will be made to ",(0,i.jsx)(n.code,{children:"add"})," and ",(0,i.jsx)(n.code,{children:"count"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["At least ",(0,i.jsx)(n.strong,{children:"one"})," call will be made to ",(0,i.jsx)(n.code,{children:"count"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-sweep-line--merge",children:"Approach 1: Sweep Line & Merge"}),"\n",(0,i.jsx)(t,{name:"@wkw"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class CountIntervals {\npublic:\n    CountIntervals() {\n        modified = 0;\n        res = 0;\n    }\n\n    void add(int left, int right) {\n        // in\n        m[left] += 1;\n        // out\n        m[right + 1] -= 1;\n        // mark as modified to check if we need to recalculate the count\n        modified = 1;\n    }\n\n    int count() {\n        if (modified) {\n            res = 0;\n            map<int, int> m2;\n            int l = 0, n = 0;\n            for (auto& x : m) {\n                // start of interval\n                if (n == 0) l = x.first;\n                n += x.second;\n                // end of interval\n                if (n == 0) {\n                    // update the new map\n                    m2[l] += 1;\n                    m2[x.first] -= 1;\n                    // calculate the range\n                    res += x.first - l;\n                }\n            }\n            // replace the map\n            m = m2;\n        }\n        modified = 0;\n        return res;\n    }\nprivate:\n    map<int, int> m;\n    int modified, res;\n};\n\n/**\n * Your CountIntervals object will be instantiated and called as such:\n * CountIntervals* obj = new CountIntervals();\n * obj->add(left,right);\n * int param_2 = obj->count();\n */\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},32790:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var r=t(30758);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);