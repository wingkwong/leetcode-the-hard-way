"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[99232],{68967:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>m,contentTitle:()=>r,default:()=>o,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"0000-0099/add-two-numbers-medium","title":"0002 - Add Two Numbers (Medium)","description":"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/add-two-numbers/","source":"@site/solutions/0000-0099/0002-add-two-numbers-medium.md","sourceDirName":"0000-0099","slug":"/0000-0099/add-two-numbers-medium","permalink":"/solutions/0000-0099/add-two-numbers-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0002-add-two-numbers-medium.md","tags":[{"inline":true,"label":"Linked List","permalink":"/solutions/tags/linked-list"},{"inline":true,"label":"Math","permalink":"/solutions/tags/math"},{"inline":true,"label":"Recursion","permalink":"/solutions/tags/recursion"}],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/add-two-numbers/","tags":["Linked List","Math","Recursion"]},"sidebar":"tutorialSidebar","previous":{"title":"0001 - Two Sum (Easy)","permalink":"/solutions/0000-0099/two-sum"},"next":{"title":"0003 - Longest Substring Without Repeating Characters (Medium)","permalink":"/solutions/0000-0099/longest-substring-without-repeating-characters-medium"}}');var l=n(86070),t=n(32790);const i={description:"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/add-two-numbers/",tags:["Linked List","Math","Recursion"]},r="0002 - Add Two Numbers (Medium)",m={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iterative",id:"approach-1-iterative",level:2}];function d(e){const s={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",mspace:"mspace",mtext:"mtext",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{SolutionAuthor:n,TabItem:a,Tabs:i}=s;return n||h("SolutionAuthor",!0),a||h("TabItem",!0),i||h("Tabs",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"0002---add-two-numbers-medium",children:"0002 - Add Two Numbers (Medium)"})}),"\n",(0,l.jsx)(s.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.a,{href:"https://leetcode.com/problems/add-two-numbers/",children:"https://leetcode.com/problems/add-two-numbers/"})}),"\n",(0,l.jsx)(s.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,l.jsxs)(s.p,{children:["You are given two ",(0,l.jsx)(s.strong,{children:"non-empty"})," linked lists representing two non-negative integers. The digits are stored in ",(0,l.jsx)(s.strong,{children:"reverse order"}),", and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."]}),"\n",(0,l.jsx)(s.p,{children:"You may assume the two numbers do not contain any leading zero, except the number 0 itself."}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.img,{src:"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg",alt:""})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{children:"Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n"})}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{children:"Input: l1 = [0], l2 = [0]\nOutput: [0]\n"})}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.strong,{children:"Example 3:"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{children:"Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n"})}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["The number of nodes in each linked list is in the range ",(0,l.jsx)(s.code,{children:"[1, 100]"}),"."]}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"0 <= Node.val <= 9"})}),"\n",(0,l.jsx)(s.li,{children:"It is guaranteed that the list represents a number that does not have leading zeros."}),"\n"]}),"\n",(0,l.jsx)(s.h2,{id:"approach-1-iterative",children:"Approach 1: Iterative"}),"\n",(0,l.jsxs)(s.p,{children:["So we must add 2 numbers together, given in reverse, and then return it. So just like adding 2 numbers on a piece of paper, we must start with the one's digits, and incrementally move up to the tens, hundreds etc. We must also track a carry-over number in case 2 numbers added together go over 9 and reach double digits. We know then if we add 2 digits plus a carry, that the largest our future carry can ever be is 1 as ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mn,{children:"9"}),(0,l.jsx)(s.mo,{children:"+"}),(0,l.jsx)(s.mn,{children:"9"}),(0,l.jsx)(s.mo,{children:"+"}),(0,l.jsx)(s.mn,{children:"1"}),(0,l.jsx)(s.mo,{children:"="}),(0,l.jsx)(s.mn,{children:"19"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"9 + 9 + 1 = 19"})]})})}),(0,l.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,l.jsx)(s.span,{className:"mord",children:"9"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(s.span,{className:"mbin",children:"+"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,l.jsx)(s.span,{className:"mord",children:"9"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(s.span,{className:"mbin",children:"+"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,l.jsx)(s.span,{className:"mord",children:"1"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,l.jsx)(s.span,{className:"mrel",children:"="}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,l.jsx)(s.span,{className:"mord",children:"19"})]})]})]}),", so our carry will never be anything either than 1 or a 0."]}),"\n",(0,l.jsx)(s.p,{children:"So knowing that we know we can use a dummy node to help with returning the head, and a variable to track our current node as well as a variable to track our carry-over. Then inside our loop we have 3 main steps."}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsxs)(s.li,{children:["Get all 3 digits, that is ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{children:"l"}),(0,l.jsx)(s.mn,{children:"1."}),(0,l.jsx)(s.mi,{children:"v"}),(0,l.jsx)(s.mi,{children:"a"}),(0,l.jsx)(s.mi,{children:"l"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"l1.val"})]})})}),(0,l.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.6944em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,l.jsx)(s.span,{className:"mord",children:"1."}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"})]})})]}),", ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{children:"l"}),(0,l.jsx)(s.mn,{children:"2."}),(0,l.jsx)(s.mi,{children:"v"}),(0,l.jsx)(s.mi,{children:"a"}),(0,l.jsx)(s.mi,{children:"l"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"l2.val"})]})})}),(0,l.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.6944em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,l.jsx)(s.span,{className:"mord",children:"2."}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"})]})})]})," and ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{children:"c"}),(0,l.jsx)(s.mi,{children:"a"}),(0,l.jsx)(s.mi,{children:"r"}),(0,l.jsx)(s.mi,{children:"r"}),(0,l.jsx)(s.mi,{children:"y"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"carry"})]})})}),(0,l.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"c"}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"rry"})]})})]}),". Make sure they are valid, and if not we can set them to 0."]}),"\n",(0,l.jsxs)(s.li,{children:["Get our result. Once we have our 3 digits, we can add them and have a digit for our next node. Note that the digit will be ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{children:"a"}),(0,l.jsx)(s.mi,{children:"n"}),(0,l.jsx)(s.mi,{children:"s"}),(0,l.jsx)(s.mspace,{}),(0,l.jsx)(s.mspace,{width:"0.6667em"}),(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{mathvariant:"normal",children:"m"}),(0,l.jsx)(s.mi,{mathvariant:"normal",children:"o"}),(0,l.jsx)(s.mi,{mathvariant:"normal",children:"d"})]}),(0,l.jsx)(s.mtext,{children:"\u2009"}),(0,l.jsx)(s.mtext,{children:"\u2009"}),(0,l.jsx)(s.mn,{children:"10"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"ans \\mod  10"})]})})}),(0,l.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"an"}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"s"}),(0,l.jsx)(s.span,{className:"mspace allowbreak"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.6667em"}})]}),(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.6944em"}}),(0,l.jsx)(s.span,{className:"mord",children:(0,l.jsx)(s.span,{className:"mord",children:(0,l.jsx)(s.span,{className:"mord mathrm",children:"mod"})})}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(s.span,{className:"mord",children:"10"})]})]})]})," as we want just the one's digit. We will also have to update our carry variable to be a 1 or a 0."]}),"\n",(0,l.jsx)(s.li,{children:"Finally we can move all our pointers, that is update our l1, l2 and current node pointer, making sure to only move l1 and l2 if they are nodes."}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["Time Complexity: ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{children:"O"}),(0,l.jsx)(s.mo,{stretchy:"false",children:"("}),(0,l.jsx)(s.mi,{children:"m"}),(0,l.jsx)(s.mi,{children:"a"}),(0,l.jsx)(s.mi,{children:"x"}),(0,l.jsx)(s.mo,{stretchy:"false",children:"("}),(0,l.jsx)(s.mi,{children:"m"}),(0,l.jsx)(s.mo,{separator:"true",children:","}),(0,l.jsx)(s.mi,{children:"n"}),(0,l.jsx)(s.mo,{stretchy:"false",children:")"}),(0,l.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(max(m,n))"})]})})}),(0,l.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(s.span,{className:"mopen",children:"("}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"ma"}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,l.jsx)(s.span,{className:"mopen",children:"("}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,l.jsx)(s.span,{className:"mpunct",children:","}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(s.span,{className:"mclose",children:"))"})]})})]}),". We know that our time will depend on whichever linked list is longer, which will be ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{children:"m"}),(0,l.jsx)(s.mi,{children:"a"}),(0,l.jsx)(s.mi,{children:"x"}),(0,l.jsx)(s.mo,{stretchy:"false",children:"("}),(0,l.jsx)(s.mi,{children:"m"}),(0,l.jsx)(s.mo,{separator:"true",children:","}),(0,l.jsx)(s.mi,{children:"n"}),(0,l.jsx)(s.mo,{stretchy:"false",children:")"}),(0,l.jsx)(s.mo,{children:"+"}),(0,l.jsx)(s.mn,{children:"1"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"max(m,n) + 1"})]})})}),(0,l.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"ma"}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,l.jsx)(s.span,{className:"mopen",children:"("}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,l.jsx)(s.span,{className:"mpunct",children:","}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(s.span,{className:"mclose",children:")"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(s.span,{className:"mbin",children:"+"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,l.jsx)(s.span,{className:"mord",children:"1"})]})]})]}),"."]}),"\n",(0,l.jsxs)(s.p,{children:["Space Complexity: ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{children:"O"}),(0,l.jsx)(s.mo,{stretchy:"false",children:"("}),(0,l.jsx)(s.mi,{children:"m"}),(0,l.jsx)(s.mi,{children:"a"}),(0,l.jsx)(s.mi,{children:"x"}),(0,l.jsx)(s.mo,{stretchy:"false",children:"("}),(0,l.jsx)(s.mi,{children:"m"}),(0,l.jsx)(s.mo,{separator:"true",children:","}),(0,l.jsx)(s.mi,{children:"n"}),(0,l.jsx)(s.mo,{stretchy:"false",children:")"}),(0,l.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(max(m,n))"})]})})}),(0,l.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(s.span,{className:"mopen",children:"("}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"ma"}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,l.jsx)(s.span,{className:"mopen",children:"("}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,l.jsx)(s.span,{className:"mpunct",children:","}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(s.span,{className:"mclose",children:"))"})]})})]}),". Similarly we know our answer will have the same amount of nodes as the longest number, ",(0,l.jsxs)(s.span,{className:"katex",children:[(0,l.jsx)(s.span,{className:"katex-mathml",children:(0,l.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(s.semantics,{children:[(0,l.jsxs)(s.mrow,{children:[(0,l.jsx)(s.mi,{children:"m"}),(0,l.jsx)(s.mi,{children:"a"}),(0,l.jsx)(s.mi,{children:"x"}),(0,l.jsx)(s.mo,{stretchy:"false",children:"("}),(0,l.jsx)(s.mi,{children:"m"}),(0,l.jsx)(s.mo,{separator:"true",children:","}),(0,l.jsx)(s.mi,{children:"n"}),(0,l.jsx)(s.mo,{stretchy:"false",children:")"}),(0,l.jsx)(s.mo,{children:"+"}),(0,l.jsx)(s.mn,{children:"1"})]}),(0,l.jsx)(s.annotation,{encoding:"application/x-tex",children:"max(m,n) + 1"})]})})}),(0,l.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"ma"}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,l.jsx)(s.span,{className:"mopen",children:"("}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,l.jsx)(s.span,{className:"mpunct",children:","}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(s.span,{className:"mclose",children:")"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(s.span,{className:"mbin",children:"+"}),(0,l.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(s.span,{className:"base",children:[(0,l.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,l.jsx)(s.span,{className:"mord",children:"1"})]})]})]}),"."]}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsxs)(a,{value:"python",label:"Python",children:[(0,l.jsx)(n,{name:"@ColeB2"}),(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-py",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        # first we create a dummy node, and point our current node to the dummy\n        # as well. This helps with the return as we can just return dummy.next\n        # and not lose our head node.\n        dummy = node = ListNode(val=None)\n        # track our carry value. It will only ever be a 1 or a 0.\n        carry = 0\n        # Continue our loop as long as we have values to add.\n        while l1 or l2 or carry:\n            # Get our linked list values. If the list is no longer valid default\n            # the value to 0.\n            n1 = l1.val if l1 else 0\n            n2 = l2.val if l2 else 0\n            # Add our values together.\n            num = n1 + n2 + carry\n            # Update our carry for the next loop. It can only ever be 1 or 0.\n            # Python integer division will mean anything < 10 will be 0 and >= 1.\n            carry = num // 10\n            # Get the one's column of the digit. If it is 2 digits, ie 10,11,12 etc.\n            # We only want the one's column so taking the modulo 10 of the num, will\n            # give us whatever is in the one's column.\n            digit = num % 10\n            # Create the next node, with the val being the digit we got above.\n            node.next = ListNode(digit)\n            # Update our pointers. If l1 or l2 reach the end, just set them to None.\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n            node = node.next\n        # We created a dummy node above so we can return dummy.next as our answer.\n        return dummy.next\n"})})]}),(0,l.jsxs)(a,{value:"js",label:"JavaScript",children:[(0,l.jsx)(n,{name:"@radojicic23"}),(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-js",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  let dummy = new ListNode();\n  let curr = dummy;\n  let carry = 0;\n  while (l1 || l2 || carry) {\n    // get values if linked list is not null\n    // otherwise the value is 0\n    let v1 = l1 ? l1.val : 0;\n    let v2 = l2 ? l2.val : 0;\n    // add values\n    let value = v1 + v2 + carry;\n    // update carry value\n    // it can only be 1 or 0\n    carry = Math.floor(value / 10);\n    // our value can be two digits number\n    // we want only one's place digit\n    value %= 10;\n    // insert it into new list\n    curr.next = new ListNode(value);\n    // update pointers\n    curr = curr.next;\n    l1 = l1 ? l1.next : 0;\n    l2 = l2 ? l2.next : 0;\n  }\n  return dummy.next;\n};\n"})})]}),(0,l.jsxs)(a,{value:"cpp",label:"C++",children:[(0,l.jsx)(n,{name:"@radojicic23"}),(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* dummy = new ListNode();\n        ListNode* curr = dummy;\n        int carry = 0;\n        while (l1 || l2 || carry) {\n            // get values if linked list is not null\n            // otherwise the value is 0\n            int v1 = l1 ? l1->val : 0;\n            int v2 = l2 ? l2->val : 0;\n            // add values\n            int value = v1 + v2 + carry;\n            // update carry value\n            // only can be 0 or 1\n            carry = floor(value / 10);\n            // value can be two digits number\n            // we only want one digit number\n            value %= 10;\n            // insert it into new linked list\n            curr->next = new ListNode(value);\n            // update pointers\n            curr = curr->next;\n            l1 = l1 ? l1->next : NULL;\n            l2 = l2 ? l2->next : NULL;\n        }\n        return dummy->next;\n    }\n};\n"})})]})]})]})}function o(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}function h(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>r});var a=n(30758);const l={},t=a.createContext(l);function i(e){const s=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),a.createElement(t.Provider,{value:s},e.children)}}}]);