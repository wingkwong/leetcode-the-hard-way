"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[93089],{73683:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"0000-0099/validate-binary-search-tree-medium","title":"0098 - Validate Binary Search Tree (Medium)","description":"Author: @dhanu084, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/validate-binary-search-tree/","source":"@site/solutions/0000-0099/0098-validate-binary-search-tree-medium.md","sourceDirName":"0000-0099","slug":"/0000-0099/validate-binary-search-tree-medium","permalink":"/solutions/0000-0099/validate-binary-search-tree-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0098-validate-binary-search-tree-medium.md","tags":[],"version":"current","sidebarPosition":98,"frontMatter":{"description":"Author: @dhanu084, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/validate-binary-search-tree/"},"sidebar":"tutorialSidebar","previous":{"title":"0097 - Interleaving String (Medium)","permalink":"/solutions/0000-0099/interleaving-string-medium"},"next":{"title":"0100 - 0199","permalink":"/solutions/category/0100---0199"}}');var r=s(86070),t=s(68906);const l={description:"Author: @dhanu084, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/validate-binary-search-tree/"},i="0098 - Validate Binary Search Tree (Medium)",o={},h=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Preorder Traversal",id:"approach-1-preorder-traversal",level:2}];function c(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{SolutionAuthor:s,TabItem:a,Tabs:l}=n;return s||m("SolutionAuthor",!0),a||m("TabItem",!0),l||m("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"0098---validate-binary-search-tree-medium",children:"0098 - Validate Binary Search Tree (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/validate-binary-search-tree/",children:"https://leetcode.com/problems/validate-binary-search-tree/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsx)(n.p,{children:"Given the root of a binary tree, determine if it is a valid binary search tree (BST)."}),"\n",(0,r.jsx)(n.p,{children:"A valid BST is defined as follows:"}),"\n",(0,r.jsx)(n.p,{children:"The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg",alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: root = [2,1,3]\nOutput: true\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg",alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The number of nodes in the tree is in the range [1, 104]."}),"\n",(0,r.jsxs)(n.li,{children:["-",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsxs)(n.msup,{children:[(0,r.jsx)(n.mn,{children:"2"}),(0,r.jsx)(n.mn,{children:"3"})]}),(0,r.jsx)(n.mn,{children:"1"}),(0,r.jsx)(n.mo,{children:"<"}),(0,r.jsx)(n.mo,{children:"="}),(0,r.jsx)(n.mi,{children:"N"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"d"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,r.jsx)(n.mi,{children:"v"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"l"}),(0,r.jsx)(n.mo,{children:"<"}),(0,r.jsx)(n.mo,{children:"="}),(0,r.jsxs)(n.msup,{children:[(0,r.jsx)(n.mn,{children:"2"}),(0,r.jsx)(n.mn,{children:"3"})]}),(0,r.jsx)(n.mn,{children:"1"}),(0,r.jsx)(n.mo,{children:"\u2212"}),(0,r.jsx)(n.mn,{children:"1"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"2^31 <= Node.val <= 2 ^ 31 - 1"})]})})}),(0,r.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.8532em",verticalAlign:"-0.0391em"}}),(0,r.jsxs)(n.span,{className:"mord",children:[(0,r.jsx)(n.span,{className:"mord",children:"2"}),(0,r.jsx)(n.span,{className:"msupsub",children:(0,r.jsx)(n.span,{className:"vlist-t",children:(0,r.jsx)(n.span,{className:"vlist-r",children:(0,r.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,r.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,r.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(n.span,{className:"mord mtight",children:"3"})})]})})})})})]}),(0,r.jsx)(n.span,{className:"mord",children:"1"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(n.span,{className:"mrel",children:"<="}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.7335em",verticalAlign:"-0.0391em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,r.jsx)(n.span,{className:"mord",children:"."}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(n.span,{className:"mrel",children:"<="}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.8974em",verticalAlign:"-0.0833em"}}),(0,r.jsxs)(n.span,{className:"mord",children:[(0,r.jsx)(n.span,{className:"mord",children:"2"}),(0,r.jsx)(n.span,{className:"msupsub",children:(0,r.jsx)(n.span,{className:"vlist-t",children:(0,r.jsx)(n.span,{className:"vlist-r",children:(0,r.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,r.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,r.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(n.span,{className:"mord mtight",children:"3"})})]})})})})})]}),(0,r.jsx)(n.span,{className:"mord",children:"1"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,r.jsx)(n.span,{className:"mord",children:"1"})]})]})]})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-preorder-traversal",children:"Approach 1: Preorder Traversal"}),"\n",(0,r.jsxs)(n.p,{children:["Time Complexity: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,r.jsxs)(n.p,{children:["Space Complexity: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]})," for recursive stack space"]}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(a,{value:"py",label:"Python",children:[(0,r.jsx)(s,{name:"@dhanu084"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n\n        def validate(root, left, right):\n            if root is None:\n                return True\n            # Validate the condition for each subtree\n            if root.val <= left or root.val >= right:\n                return False\n            # all subtrees left of root should be less than right so pass root.val as right\n            left = validate(root.left, left, root.val)\n            # all subtrees right of root should be greater than right so pass root.val as left\n            right = validate(root.right, root.val, right)\n            # only if left and right subtrees are valid return true\n            return left and right\n        # pass -inf as the left minimum and inf as right maximum initially\n        return validate(root, -inf, inf)\n"})})]}),(0,r.jsxs)(a,{value:"java",label:"Java",children:[(0,r.jsx)(s,{name:"@vigneshshiv"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        if (root == null) return true;\n        return checkBST(root, null, null);\n    }\n\n    public boolean checkBST(TreeNode root, Integer min, Integer max) {\n        if (root == null) return true;\n        // Check the node value with it's parent\n        // If node is left, then value should be less than or equal to it's parent\n        // If node is right, then value should be greater than or equal to it's parent\n        if ((min != null && root.val <= min) || (max != null && root.val >= max)) {\n            return false;\n        }\n        return checkBST(root.left, min, root.val) && checkBST(root.right, root.val, max);\n    }\n}\n"})})]}),(0,r.jsxs)(a,{value:"cpp",label:"C++",children:[(0,r.jsx)(s,{name:"@radojicic23"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool valid(TreeNode* node, long left, long right) {\n        if (!node) {\n            return true;\n        }\n        if (!(node->val > left && node->val < right)) {\n            return false;\n        }\n        return (valid(node->left, left, node->val) &&\n                valid(node->right, node->val, right));\n    }\n\n    bool isValidBST(TreeNode* root) {\n        return valid(root, LONG_MIN, LONG_MAX);\n    }\n};\n"})})]}),(0,r.jsxs)(a,{value:"js",label:"JavaScript",children:[(0,r.jsx)(s,{name:"@radojicic23"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function (root) {\n  function valid(node, left, right) {\n    if (!node) {\n      return true;\n    }\n    if (!(node.val > left && node.val < right)) {\n      return false;\n    }\n    return (\n      valid(node.left, left, node.val) && valid(node.right, node.val, right)\n    );\n  }\n  return valid(root, parseFloat(-Infinity), parseFloat(Infinity));\n};\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var a=s(30758);const r={},t=a.createContext(r);function l(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);