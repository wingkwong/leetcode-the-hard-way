"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[79427],{536:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"0200-0299/isomorphic-strings-easy","title":"0205 - Isomorphic Strings (Easy)","description":"Author: @wkw, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/isomorphic-strings/","source":"@site/solutions/0200-0299/0205-isomorphic-strings-easy.md","sourceDirName":"0200-0299","slug":"/0200-0299/isomorphic-strings-easy","permalink":"/solutions/0200-0299/isomorphic-strings-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0205-isomorphic-strings-easy.md","tags":[{"inline":true,"label":"Hash Table","permalink":"/solutions/tags/hash-table"},{"inline":true,"label":"String","permalink":"/solutions/tags/string"}],"version":"current","sidebarPosition":205,"frontMatter":{"description":"Author: @wkw, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/isomorphic-strings/","tags":["Hash Table","String"]},"sidebar":"tutorialSidebar","previous":{"title":"0204 - Count Primes","permalink":"/solutions/0200-0299/count-primes"},"next":{"title":"0206 - Reverse Linked List (Easy)","permalink":"/solutions/0200-0299/reverse-linked-list-easy"}}');var t=i(86070),r=i(32790);const a={description:"Author: @wkw, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/isomorphic-strings/",tags:["Hash Table","String"]},o="0205 - Isomorphic Strings (Easy)",c={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map",id:"approach-1-hash-map",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:i,TabItem:s,Tabs:a}=n;return i||p("SolutionAuthor",!0),s||p("TabItem",!0),a||p("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"0205---isomorphic-strings-easy",children:"0205 - Isomorphic Strings (Easy)"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/isomorphic-strings/",children:"https://leetcode.com/problems/isomorphic-strings/"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["Given two strings ",(0,t.jsx)(n.code,{children:"s"})," and ",(0,t.jsx)(n.code,{children:"t"}),", ",(0,t.jsx)(n.em,{children:"determine if they are isomorphic"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Two strings ",(0,t.jsx)(n.code,{children:"s"})," and ",(0,t.jsx)(n.code,{children:"t"})," are isomorphic if the characters in ",(0,t.jsx)(n.code,{children:"s"})," can be replaced to get ",(0,t.jsx)(n.code,{children:"t"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: s = "egg", t = "add"\nOutput: true\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: s = "foo", t = "bar"\nOutput: false\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: s = "paper", t = "title"\nOutput: true\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= s.length <= 5 * 10^4"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"t.length == s.length"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"s"})," and ",(0,t.jsx)(n.code,{children:"t"})," consist of any valid ascii character."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"approach-1-hash-map",children:"Approach 1: Hash Map"}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsxs)(s,{value:"cpp",label:"C++",children:[(0,t.jsx)(i,{name:"@wkw"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        // m1 is used to map s[i] to t[i]\n        // m2 is used to map t[i] to s[i]\n        // example 1:\n        // m1['e'] --\x3e 'a'\n        // m1['g'] --\x3e 'd'\n        // m2['a'] --\x3e 'e'\n        // m2['d'] --\x3e 'g'\n        unordered_map<char, char> m1, m2;\n        for (int i = 0; i < s.size(); i++) {\n            // if s[i] isn't in m1 and t[i] isn't in m2\n            if (!m1.count(s[i]) && !m2.count(t[i])) {\n                // then we can map s[i] to t[i]\n                m1[s[i]] = t[i];\n                // and t[i] to s[i]\n                m2[t[i]] = s[i];\n            } else {\n                // if they are they are isomorphic,\n                // m1[s[i]] should map to t[i], and m2[t[i]] should map to s[i]\n                // we return false here if this condition is not satisfied\n                if (m1[s[i]] != t[i] || m2[t[i]] != s[i]) {\n                    return false;\n                }\n            }\n        }\n        // they are isomorphic\n        return true;\n    }\n};\n"})})]}),(0,t.jsxs)(s,{value:"java",label:"Java",children:[(0,t.jsx)(i,{name:"@vigneshshiv"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public boolean isIsomorphic(String s, String t) {\n        // ASCII char range, partitioning first half for s and 2nd half for t.\n        // Partition can be done by ascii + 128 (range) for the 2nd half.\n        int[] table = new int[256];\n        for (int i = 0; i < s.length(); i++) {\n            // If the char count from s & t is not match, then return false\n            if (table[s.charAt(i)] != table[t.charAt(i) + 128]) {\n                return false;\n            }\n            // Char similarity found (non matching char, but can help to transform to other char)\n            // so just keeping the index reference\n            table[s.charAt(i)] = table[t.charAt(i) + 128] = i + 1;\n        }\n        return true;\n    }\n}\n"})})]}),(0,t.jsxs)(s,{value:"py",label:"Python",children:[(0,t.jsx)(i,{name:"@radojicic23"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        map1 = {}\n        map2 = {}\n        for i in range(len(s)):\n            if s[i] in map1 and map1[s[i]] != t[i]:\n                return False\n            if t[i] in map2 and map2[t[i]] != s[i]:\n                return False\n            map1[s[i]] = t[i]\n            map2[t[i]] = s[i]\n        return True\n"})})]}),(0,t.jsxs)(s,{value:"js",label:"JavaScript",children:[(0,t.jsx)(i,{name:"@radojicic23"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isIsomorphic = function (s, t) {\n  let map1 = {};\n  let map2 = {};\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] in map1 && map1[s[i]] != t[i]) {\n      return false;\n    }\n    if (t[i] in map2 && map2[t[i]] != s[i]) {\n      return false;\n    }\n    map1[s[i]] = t[i];\n    map2[t[i]] = s[i];\n  }\n  return true;\n};\n"})})]})]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(30758);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);