"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[18748],{62761:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"2300-2399/largest-palindromic-number-medium","title":"2384 - Largest Palindromic Number (Medium)","description":"Author: @wingkwong | https://leetcode.com/problems/largest-palindromic-number/","source":"@site/solutions/2300-2399/2384-largest-palindromic-number-medium.md","sourceDirName":"2300-2399","slug":"/2300-2399/largest-palindromic-number-medium","permalink":"/solutions/2300-2399/largest-palindromic-number-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2384-largest-palindromic-number-medium.md","tags":[],"version":"current","sidebarPosition":2384,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/largest-palindromic-number/"},"sidebar":"tutorialSidebar","previous":{"title":"2383 - Minimum Hours of Training to Win a Competition (Easy)","permalink":"/solutions/2300-2399/minimum-hours-of-training-to-win-a-competition-easy"},"next":{"title":"2392 - Build a Matrix With Conditions (Hard)","permalink":"/solutions/2300-2399/build-a-matrix-with-conditions-hard"}}');var r=t(74848),o=t(28453);const s={description:"Author: @wingkwong | https://leetcode.com/problems/largest-palindromic-number/"},l="2384 - Largest Palindromic Number (Medium)",a={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting and Building String",id:"approach-1-counting-and-building-string",level:2}];function c(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components},{SolutionAuthor:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"2384---largest-palindromic-number-medium",children:"2384 - Largest Palindromic Number (Medium)"})}),"\n",(0,r.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(e.p,{children:["You are given a string ",(0,r.jsx)(e.code,{children:"num"})," consisting of digits only."]}),"\n",(0,r.jsxs)(e.p,{children:["Return ",(0,r.jsxs)(e.em,{children:["the ",(0,r.jsx)(e.strong,{children:"largest palindromic"})," integer (in the form of a string) that can be formed using digits taken from"]}),(0,r.jsx)(e.code,{children:"num"}),". It should not contain ",(0,r.jsx)(e.strong,{children:"leading zeroes"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["You do ",(0,r.jsx)(e.strong,{children:"not"})," need to use all the digits of ",(0,r.jsx)(e.code,{children:"num"}),", but you must use ",(0,r.jsx)(e.strong,{children:"at least"})," one digit."]}),"\n",(0,r.jsx)(e.li,{children:"The digits can be reordered."}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'Input: num = "444947137"\nOutput: "7449447"\nExplanation: \nUse the digits "4449477" from "444947137" to form the palindromic integer "7449447".\nIt can be shown that "7449447" is the largest palindromic integer that can be formed.\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'Input: num = "00009"\nOutput: "9"\nExplanation: \nIt can be shown that "9" is the largest palindromic integer that can be formed.\nNote that the integer returned should not contain leading zeroes.\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"1 <= num.length <= 105"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"num"})," consists of digits."]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"approach-1-counting-and-building-string",children:"Approach 1: Counting and Building String"}),"\n",(0,r.jsx)(t,{name:"@wingkwong"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    string largestPalindromic(string num) {\n        string l, m, r;\n        // count the frequency for each digit\n        int cnt[10] = {0};\n        for (auto &x : num) cnt[x - '0']++;\n        // build the left part\n        for (int i = 9; i >= 1; i--) {\n            // we need at least a frequency of 2\n            if (cnt[i] >= 2) {\n                // we take half of it because it is only the left part\n                l += string(cnt[i] / 2, i + '0');\n            }\n        }\n        // we can put some zeros as well for cases like 0099 -> 9009\n        if (cnt[0] >= 2) {\n            // however, we only do it when we've used some digits \n            // think of cases like 9\n            if (l.size()) {\n                l += string(cnt[0] / 2, '0');    \n            }\n        }\n        // build the middle part\n        for (int i = 9; i >= 0; i--) {\n            // we want to add the largest digit with odd count\n            if (cnt[i] & 1) {\n                m += i + '0';\n                // since we just need one, we can break here\n                break;\n            }\n        }\n        // handle case like 0000000\n        if (l.size() == 0 && m.size() == 0) {\n            return \"0\";\n        }\n        // build the right part\n        r = l;\n        // which is the mirror of the left part\n        reverse(r.begin(), r.end());\n        // return the final string\n        return l + m + r;\n    }\n};\n"})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var i=t(96540);const r={},o=i.createContext(r);function s(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);