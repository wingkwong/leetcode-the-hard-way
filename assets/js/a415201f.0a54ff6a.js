"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[3253],{10786:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"1400-1499/kids-with-the-greatest-number-of-candies-easy","title":"1431 - Kids With the Greatest Number of Candies (Easy)","description":"Author: @heiheihang | https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/","source":"@site/solutions/1400-1499/1431-kids-with-the-greatest-number-of-candies-easy.md","sourceDirName":"1400-1499","slug":"/1400-1499/kids-with-the-greatest-number-of-candies-easy","permalink":"/solutions/1400-1499/kids-with-the-greatest-number-of-candies-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1400-1499/1431-kids-with-the-greatest-number-of-candies-easy.md","tags":[],"version":"current","sidebarPosition":1431,"frontMatter":{"description":"Author: @heiheihang | https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/"},"sidebar":"tutorialSidebar","previous":{"title":"1400 - 1499","permalink":"/solutions/category/1400---1499"},"next":{"title":"1434 - Number of Ways to Wear Different Hats to Each Other (Hard)","permalink":"/solutions/1400-1499/number-of-ways-to-wear-different-hats-to-each-other-hard"}}');var s=t(74848),r=t(28453);const a={description:"Author: @heiheihang | https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/"},d="1431 - Kids With the Greatest Number of Candies (Easy)",h={},o=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iteration",id:"approach-1-iteration",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"1431---kids-with-the-greatest-number-of-candies-easy",children:"1431 - Kids With the Greatest Number of Candies (Easy)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/",children:"https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["There are ",(0,s.jsx)(n.code,{children:"n"})," kids with candies. You are given an integer array ",(0,s.jsx)(n.code,{children:"candies"}),", where each ",(0,s.jsx)(n.code,{children:"candies[i]"})," represents the number of candies the ",(0,s.jsx)(n.code,{children:"ith"})," kid has, and an integer ",(0,s.jsx)(n.code,{children:"extraCandies"}),", denoting the number of extra candies that you have."]}),"\n",(0,s.jsxs)(n.p,{children:["Return ",(0,s.jsx)(n.em,{children:"a boolean array"})," ",(0,s.jsx)(n.code,{children:"result"})," ",(0,s.jsx)(n.em,{children:"of length"})," ",(0,s.jsx)(n.code,{children:"n"}),(0,s.jsx)(n.em,{children:", where"})," ",(0,s.jsx)(n.code,{children:"result[i]"})," ",(0,s.jsx)(n.em,{children:"is"})," ",(0,s.jsx)(n.code,{children:"true"})," ",(0,s.jsx)(n.em,{children:"if, after giving the"})," ",(0,s.jsx)(n.code,{children:"ith"})," ",(0,s.jsx)(n.em,{children:"kid all the"})," ",(0,s.jsx)(n.code,{children:"extraCandies"}),(0,s.jsxs)(n.em,{children:[", they will have the ",(0,s.jsx)(n.strong,{children:"greatest"})," number of candies among all the kids, or"]})," ",(0,s.jsx)(n.code,{children:"false"})," ",(0,s.jsx)(n.em,{children:"otherwise"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.strong,{children:"multiple"})," kids can have the ",(0,s.jsx)(n.strong,{children:"greatest"})," number of candies."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: candies = [2,3,5,1,3], extraCandies = 3\nOutput: [true,true,true,false,true] \nExplanation: If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: candies = [4,2,1,1,2], extraCandies = 1\nOutput: [true,false,false,false,false] \nExplanation: There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: candies = [12,1,12], extraCandies = 10\nOutput: [true,false,true]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"n == candies.length"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"2 <= n <= 100"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= candies[i] <= 100"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= extraCandies <= 50"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-iteration",children:"Approach 1: Iteration"}),"\n",(0,s.jsxs)(n.p,{children:["We need to use ",(0,s.jsx)(n.code,{children:"max"})," to find the largest number of candies among the kids. Then we need to iterate the list of candies, and check if the number of candies is greater than the largest number of candies after adding ",(0,s.jsx)(n.code,{children:"extra_candies"}),". We put ",(0,s.jsx)(n.code,{children:"True"})," to ",(0,s.jsx)(n.code,{children:"result"})," if yes, put ",(0,s.jsx)(n.code,{children:"False"})," to ",(0,s.jsx)(n.code,{children:"result"})," otherwise."]}),"\n",(0,s.jsx)(t,{name:"@heiheihang"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def kidsWithCandies(self, candies: List[int], extra_candies: int) -> List[bool]:\n        \n        #find the greatest number of candies among the kids\n        most_candies = max(candies)\n        \n        #initialize the result list\n        result = []\n        \n        #iterate each kid\n        for i in range(len(candies)):\n            \n            #declare a veriable for the number of candies of the ith kid\n            kid = candies[i]\n            \n            #check if the kid can have more than or equal to the largest number of candies\n            if(kid + extra_candies >= most_candies):\n                #put TRUE to result if yes\n                result.append(True)\n            else:\n                #put FALSE to result if no\n                result.append(False)\n        \n        #return result list\n        return result\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);