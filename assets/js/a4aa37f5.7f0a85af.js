"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[82895],{13181:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"0000-0099/combination-sum-ii-medium","title":"0040 - Combination Sum II (Medium)","description":"Author: @wingkwong, @ColeB2, @radojicic23 | https://leetcode.com/problems/combination-sum-ii/","source":"@site/solutions/0000-0099/0040-combination-sum-ii-medium.md","sourceDirName":"0000-0099","slug":"/0000-0099/combination-sum-ii-medium","permalink":"/solutions/0000-0099/combination-sum-ii-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0040-combination-sum-ii-medium.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Backtracking","permalink":"/solutions/tags/backtracking"}],"version":"current","sidebarPosition":40,"frontMatter":{"description":"Author: @wingkwong, @ColeB2, @radojicic23 | https://leetcode.com/problems/combination-sum-ii/","tags":["Array","Backtracking"]},"sidebar":"tutorialSidebar","previous":{"title":"0039 - Combination Sum (Medium)","permalink":"/solutions/0000-0099/combination-sum-medium"},"next":{"title":"0042 - Trapping Rain Water (Hard)","permalink":"/solutions/0000-0099/trapping-rain-water-hard"}}');var a=t(74848),o=t(28453);const r={description:"Author: @wingkwong, @ColeB2, @radojicic23 | https://leetcode.com/problems/combination-sum-ii/",tags:["Array","Backtracking"]},s="0040 - Combination Sum II (Medium)",c={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Backtracking",id:"approach-1-backtracking",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components},{SolutionAuthor:t,TabItem:i,Tabs:r}=e;return t||m("SolutionAuthor",!0),i||m("TabItem",!0),r||m("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"0040---combination-sum-ii-medium",children:"0040 - Combination Sum II (Medium)"})}),"\n",(0,a.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://leetcode.com/problems/combination-sum-ii/",children:"https://leetcode.com/problems/combination-sum-ii/"})}),"\n",(0,a.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,a.jsxs)(e.p,{children:["Given a collection of candidate numbers (",(0,a.jsx)(e.code,{children:"candidates"}),") and a target number (",(0,a.jsx)(e.code,{children:"target"}),"), find all unique combinations in ",(0,a.jsx)(e.code,{children:"candidates"})," where the candidate numbers sum to ",(0,a.jsx)(e.code,{children:"target"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["Each number in ",(0,a.jsx)(e.code,{children:"candidates"})," may only be used ",(0,a.jsx)(e.strong,{children:"once"})," in the combination."]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Note:"})," The solution set must not contain duplicate combinations."]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Input: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Input: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.code,{children:"1 <= candidates.length <= 100"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.code,{children:"1 <= candidates[i] <= 50"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.code,{children:"1 <= target <= 30"})}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"approach-1-backtracking",children:"Approach 1: Backtracking"}),"\n",(0,a.jsxs)(e.p,{children:["Similar to ",(0,a.jsx)(e.a,{href:"combination-sum-medium",children:"0039 - Combination Sum (Medium)"}),", the only difference is each number can be used once in the combination. To avoid overcounting, we can simply add ",(0,a.jsx)(e.code,{children:"i != start && candidates[i] == candidates[i - 1]."})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsxs)(i,{value:"cpp",label:"C++",children:[(0,a.jsx)(t,{name:"@wingkwong"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    void backtrack(vector<int>& candidates, int target, vector<vector<int>>& ans, vector<int>& tmp, int start) {\n        if(target == 0) {\n            ans.push_back(tmp);\n            return;\n        }\n        for(int i = start; i < candidates.size() && target >= candidates[i]; i++){\n            if(i != start && candidates[i] == candidates[i - 1]) continue;\n            tmp.push_back(candidates[i]);\n            backtrack(candidates, target - candidates[i], ans, tmp, i + 1);\n            tmp.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        sort(candidates.begin(), candidates.end());\n        vector<vector<int>> ans;\n        vector<int> tmp;\n        backtrack(candidates, target, ans, tmp, 0);\n        return ans;\n    }\n};\n"})})]}),(0,a.jsxs)(i,{value:"python",label:"Python",children:[(0,a.jsx)(t,{name:"@ColeB2"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:"class Solution:\n    # Iterative Backtracking Approach\n    # Time O(n*2^n)\n    # We need to make a decision tree where we take/don't take\n    # the next number, and during each decision, we have to create\n    # a new list of combinations to pass to the stack.\n    # Space O(2^n)\n    # Our stack may reach the size of our decision tree.\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        # Sort first, greatly simplify our backtracking and help\n        # us to avoid our duplicates by only moving forward.\n        candidates.sort()\n        # initialize our combinations to return.\n        combinations = []\n        # initialize stack: 3 parameters, combos, our current target\n        # value, and our position in candidates array.\n        stack = [([], 0, 0)]\n        while stack:\n            # pop off our combos, current target score, and position.\n            combo, targ, pos = stack.pop()\n            # if our we reached target value add to combinations.\n            if targ == target:\n                combinations.append(combo)\n                continue\n            # set a prev value so when looping through candidates\n            # to create combinations, we don't repeat values.\n            # 1,1,1,5 --\x3e after first 1, we will skip other 1's.\n            # This will help us avoid our dupes.\n            prev = -1\n            for i in range(pos, len(candidates)):\n                # skip clause if the candidate was same as previous\n                if candidates[i] == prev:\n                    # skip this iteration\n                    continue\n                # early termination. If the current candidate would push\n                # us above the target value, then no need to continue\n                # checking values as since we are sorted, all values\n                # beyond this point would push us above the target.\n                if candidates[i] + targ > target:\n                    # break the loop\n                    break\n                # create our new combo array to add to the stack\n                new_combo = combo + [candidates[i]]\n                # append new combo, new target score, next position to\n                # start the loop from.\n                stack.append((new_combo, targ + candidates[i], i + 1))\n                # set new previous for subsequent loops.\n                prev = candidates[i]\n        return combinations\n"})})]}),(0,a.jsxs)(i,{value:"js",label:"JavaScript",children:[(0,a.jsx)(t,{name:"@radojicic23"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function(candidates, target) {\n    res = [];\n    candidates.sort((a, b) => a - b);\n    function backtrack(index, curr, target) {\n        if (target < 0) return;\n        if (target == 0) {\n            res.push(curr.slice());\n            return;\n        }\n        for (let i = index; i < candidates.length; i++) {\n            if (i != index && candidates[i] === candidates[i - 1]) continue;\n            curr.push(candidates[i]);\n            backtrack(i + 1, curr, target - candidates[i]);\n            curr.pop();\n        }\n    }\n    backtrack(0, [], target);\n    return res;\n};\n"})})]})]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}function m(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var i=t(96540);const a={},o=i.createContext(a);function r(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);