"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[81514],{64033:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"2200-2299/minimize-result-by-adding-parentheses-to-expression-medium","title":"2232 - Minimize Result by Adding Parentheses to Expression (Medium)","description":"Author: @1SundayMorning | https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression/","source":"@site/solutions/2200-2299/2232-minimize-result-by-adding-parentheses-to-expression-medium.md","sourceDirName":"2200-2299","slug":"/2200-2299/minimize-result-by-adding-parentheses-to-expression-medium","permalink":"/solutions/2200-2299/minimize-result-by-adding-parentheses-to-expression-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2232-minimize-result-by-adding-parentheses-to-expression-medium.md","tags":[],"version":"current","sidebarPosition":2232,"frontMatter":{"description":"Author: @1SundayMorning | https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression/"},"sidebar":"tutorialSidebar","previous":{"title":"2231 - Largest Number After Digit Swaps by Parity (Easy)","permalink":"/solutions/2200-2299/largest-number-after-digit-swaps-by-parity-easy"},"next":{"title":"2233 - Maximum Product After K Increments (Medium)","permalink":"/solutions/2200-2299/maximum-product-after-k-increments-medium"}}');var i=n(86070),a=n(40629);const r={description:"Author: @1SundayMorning | https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression/"},l="2232 - Minimize Result by Adding Parentheses to Expression (Medium)",h={},o=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iterative",id:"approach-1-iterative",level:2}];function m(e){const s={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:n,TabItem:t,Tabs:r}=s;return n||c("SolutionAuthor",!0),t||c("TabItem",!0),r||c("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"2232---minimize-result-by-adding-parentheses-to-expression-medium",children:"2232 - Minimize Result by Adding Parentheses to Expression (Medium)"})}),"\n",(0,i.jsx)(s.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression/",children:"https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression/"})}),"\n",(0,i.jsx)(s.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(s.p,{children:["You are given a ",(0,i.jsx)(s.strong,{children:"0-indexed"})," string expression of the form ",(0,i.jsx)(s.code,{children:'"<num1>+<num2>"'})," where ",(0,i.jsx)(s.code,{children:"<num1>"})," and ",(0,i.jsx)(s.code,{children:"<num2>"})," represent positive integers."]}),"\n",(0,i.jsxs)(s.p,{children:["Add a pair of parentheses to expression such that after the addition of parentheses, expression is a ",(0,i.jsx)(s.strong,{children:"valid"})," mathematical expression and evaluates to the ",(0,i.jsx)(s.strong,{children:"smallest"})," possible value. The left parenthesis ",(0,i.jsx)(s.strong,{children:"must"})," be added to the left of '+' and the right parenthesis ",(0,i.jsx)(s.strong,{children:"must"})," be added to the right of '+'."]}),"\n",(0,i.jsxs)(s.p,{children:["Return expression after adding a pair of parentheses such that expression evaluates to the ",(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.em,{children:"smallest"})})," possible value. If there are multiple answers that yield the same result, return any of them."]}),"\n",(0,i.jsx)(s.p,{children:"The input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: expression = "247+38"\nOutput: "2(47+38)"\nExplanation: The expression evaluates to 2 * (47 + 38) = 2 * 85 = 170.\nNote that "2(4)7+38" is invalid because the right parenthesis must be to the right of the \'+\'.\nIt can be shown that 170 is the smallest possible value.\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: expression = "12+34"\nOutput: "1(2+3)4"\nExplanation: The expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20.\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'Input: expression = "999+999"\nOutput: "(999+999)"\nExplanation: The expression evaluates to 999 + 999 = 1998.\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"3 <= expression.length <= 10"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"expression consists of digits from '1' to '9' and '+'."})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"expression starts and ends with digits."})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"expression contains exactly one '+'."})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"The original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer."})}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"approach-1-iterative",children:"Approach 1: Iterative"}),"\n",(0,i.jsx)(s.p,{children:"To solve, separate the expression into the two operands of the sum expression."}),"\n",(0,i.jsx)(s.p,{children:"Then, iteratively place the open and close parenthesis at every possible location in the left and right substrings"}),"\n",(0,i.jsx)(s.p,{children:"Next, evaluate the expression by computing the inner sum, and then multiplying the outer values contained in the substrings outside of the parenthesis."}),"\n",(0,i.jsx)(s.p,{children:"Compare the result of the expression to the current minimum, and if it's lower, save the minimum and the locations of the open and close parenthesis."}),"\n",(0,i.jsx)(s.p,{children:"Once all possible expressions have been evaluated, construct the final expression using the saved locations of the open and close parenthesis."}),"\n",(0,i.jsx)(s.p,{children:"Return the expression."}),"\n",(0,i.jsxs)(s.p,{children:["Time Complexity: ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"O"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mo,{children:"\u2217"}),(0,i.jsx)(s.mi,{children:"b"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(a * b)"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"\u2217"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"b"}),(0,i.jsx)(s.span,{className:"mclose",children:")"})]})]})]})]}),"\n",(0,i.jsxs)(s.p,{children:["Space Complexity: ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"O"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"n"}),(0,i.jsx)(s.mo,{children:"\u2217"}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mo,{children:"\u2217"}),(0,i.jsx)(s.mi,{children:"b"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(n * a * b)"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"\u2217"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.4653em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"\u2217"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"b"}),(0,i.jsx)(s.span,{className:"mclose",children:")"})]})]})]})]}),"\n",(0,i.jsxs)(s.p,{children:["where ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"a"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"a"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"})]})})]})," and ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"b"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"b"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6944em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"b"})]})})]})," are the length of the left and right operands of the input sum"]}),"\n",(0,i.jsx)(r,{children:(0,i.jsxs)(t,{value:"cpp",label:"C++",children:[(0,i.jsx)(n,{name:"@1SundayMorning"}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:'class Solution {\npublic:\n    string minimizeResult(string expression) {\n        // find the location of the plus and separate the left and right operands\n        int plus_idx = 0;\n        while (expression[plus_idx] != \'+\') {\n            plus_idx++;\n        }\n\n        string left = expression.substr(0, plus_idx);\n        string right = expression.substr(plus_idx + 1, expression.length() - plus_idx);\n\n        // set initial value of min to be INT_MAX\n        int min = INT_MAX;\n        int final_p1 = 0;\n        int final_p2 = 0;\n\n        // iterate through all valid parenthesis locations in each of the\n        // left and right operands\n        for(int p1 = 0; p1 < left.length(); p1++) {\n            for (int p2 = 1; p2 <= right.length(); p2++) {\n                // saving the substrings on either side of the parenthesis\n                // to be converted to integers later\n                string left_mul_str = left.substr(0, p1);\n                string left_sum_str = left.substr(p1);\n                string right_sum_str = right.substr(0, p2);\n                string right_mul_str = right.substr(p2);\n\n                // in the case where the entire expression is enclosed in parenthesis,\n                // set left mul and right mul to none.\n                // This will be the case when their respective substrings are empty.\n                int left_mul = 1;\n                int left_sum = stoi(left_sum_str);\n                int right_sum = stoi(right_sum_str);\n                int right_mul = 1;\n\n                if (!left_mul_str.empty())\n                    left_mul = stoi(left_mul_str);\n                if (!right_mul_str.empty()) {\n                    right_mul = stoi(right_mul_str);\n                }\n\n                // evaluate the expression.\n                int exp_result = left_mul * (left_sum + right_sum) * right_mul;\n\n                // if final value is our new min, save the indices of the parenthesis\n                if (exp_result < min) {\n                    min = exp_result;\n                    final_p1 = p1;\n                    final_p2 = p2;\n                }\n            }\n        }\n\n        // construct and return the final expression with parenthesis added\n        return left.substr(0, final_p1) +     \\\n            "(" + left.substr(final_p1) +     \\\n            "+" + right.substr(0, final_p2) + \\\n            ")" + right.substr(final_p2);\n    }\n};\n'})})]})})]})}function d(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}function c(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(30758);const i={},a=t.createContext(i);function r(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);