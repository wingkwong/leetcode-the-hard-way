"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[72085],{6327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"bit-manipulation","title":"Bit Manipulation","description":"Bit Manipulation utilises different bitwise operations to manipulate bits","source":"@site/templates/bit-manipulation.md","sourceDirName":".","slug":"/bit-manipulation","permalink":"/templates/bit-manipulation","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/bit-manipulation.md","tags":[],"version":"current","frontMatter":{"title":"Bit Manipulation","description":"Bit Manipulation utilises different bitwise operations to manipulate bits","hide_table_of_contents":false,"keywords":["leetcode","template","bit manipulation"]},"sidebar":"tutorialSidebar","previous":{"title":"Binary Search","permalink":"/templates/binary-search"},"next":{"title":"Euler Path","permalink":"/templates/euler"}}');var i=n(86070),a=n(68906);const l={title:"Bit Manipulation",description:"Bit Manipulation utilises different bitwise operations to manipulate bits",hide_table_of_contents:!1,keywords:["leetcode","template","bit manipulation"]},r=void 0,o={},u=[{value:"Sum of Submask",id:"sum-of-submask",level:3},{value:"Sum of Super Mask",id:"sum-of-super-mask",level:3},{value:"Largest Bit Set",id:"largest-bit-set",level:3},{value:"Lowest Bit Set",id:"lowest-bit-set",level:3},{value:"Index of Lowest Bit Set",id:"index-of-lowest-bit-set",level:3},{value:"Enumerating all submasks of a given mask",id:"enumerating-all-submasks-of-a-given-mask",level:3}];function c(e){const t={code:"code",h3:"h3",pre:"pre",...(0,a.R)(),...e.components},{TabItem:n,Tabs:s}=t;return n||p("TabItem",!0),s||p("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"sum-of-submask",children:"Sum of Submask"}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"template<typename T_out, typename T_in>\nvector<T_out> submask_sums(int n, const vector<T_in> &values) {\n    assert(int(values.size()) == 1 << n);\n    vector<T_out> dp(values.begin(), values.end());\n    for (int i = 0; i < n; i++)\n        for (int base = 0; base < 1 << n; base += 1 << (i + 1))\n            for (int mask = base; mask < base + (1 << i); mask++)\n                dp[mask + (1 << i)] += dp[mask];\n    return dp;\n}\n"})})})}),"\n",(0,i.jsx)(t.h3,{id:"sum-of-super-mask",children:"Sum of Super Mask"}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"template<typename T_out, typename T_in>\nvector<T_out> supermask_sums(int n, vector<T_in> values) {\n    reverse(values.begin(), values.end());\n    vector<T_out> result = submask_sums<T_out>(n, values);\n    reverse(result.begin(), result.end());\n    return result;\n}\n"})})})}),"\n",(0,i.jsx)(t.h3,{id:"largest-bit-set",children:"Largest Bit Set"}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"int largest_bit(int x) {\n    return x == 0 ? -1 : 31 - __builtin_clz(x);\n}\n"})})})}),"\n",(0,i.jsx)(t.h3,{id:"lowest-bit-set",children:"Lowest Bit Set"}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"int lowest_bit(int x) {\n    return x & (-x);\n}\n"})})})}),"\n",(0,i.jsx)(t.h3,{id:"index-of-lowest-bit-set",children:"Index of Lowest Bit Set"}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"int lowest_bit_index(int x) {\n    // 1 based\n    // __builtin_ffs(10) = 2 (10[1]0)\n    return __builtin_ffs(x);\n}\n"})})})}),"\n",(0,i.jsx)(t.h3,{id:"enumerating-all-submasks-of-a-given-mask",children:"Enumerating all submasks of a given mask"}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"for (int s = m; s; s = (s - 1) & m) {\n    // use s\n}\n"})})})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function p(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var s=n(30758);const i={},a=s.createContext(i);function l(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);