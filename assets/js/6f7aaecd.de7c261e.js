"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[98756],{70390:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"0800-0899/largest-sum-of-averages-medium","title":"0813 - Largest Sum of Averages (Medium)","description":"Author: @wkw | https://leetcode.com/problems/largest-sum-of-averages/","source":"@site/solutions/0800-0899/0813-largest-sum-of-averages-medium.md","sourceDirName":"0800-0899","slug":"/0800-0899/largest-sum-of-averages-medium","permalink":"/solutions/0800-0899/largest-sum-of-averages-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0813-largest-sum-of-averages-medium.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Dynamic Programming","permalink":"/solutions/tags/dynamic-programming"},{"inline":true,"label":"Prefix Sum","permalink":"/solutions/tags/prefix-sum"}],"version":"current","sidebarPosition":813,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/largest-sum-of-averages/","tags":["Array","Dynamic Programming","Prefix Sum"]},"sidebar":"tutorialSidebar","previous":{"title":"0800 - 0899","permalink":"/solutions/category/0800---0899"},"next":{"title":"0814 - Binary Tree Pruning (Medium)","permalink":"/solutions/0800-0899/binary-tree-pruning-medium"}}');var s=r(86070),i=r(68906);const o={description:"Author: @wkw | https://leetcode.com/problems/largest-sum-of-averages/",tags:["Array","Dynamic Programming","Prefix Sum"]},a="0813 - Largest Sum of Averages (Medium)",l={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:r,TabItem:t,Tabs:o}=n;return r||d("SolutionAuthor",!0),t||d("TabItem",!0),o||d("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"0813---largest-sum-of-averages-medium",children:"0813 - Largest Sum of Averages (Medium)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/largest-sum-of-averages/",children:"https://leetcode.com/problems/largest-sum-of-averages/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["You are given an integer array ",(0,s.jsx)(n.code,{children:"nums"})," and an integer ",(0,s.jsx)(n.code,{children:"k"}),". You can partition the array into ",(0,s.jsx)(n.strong,{children:"at most"})," ",(0,s.jsx)(n.code,{children:"k"})," non-empty adjacent subarrays. The ",(0,s.jsx)(n.strong,{children:"score"})," of a partition is the sum of the averages of each subarray."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that the partition must use every integer in ",(0,s.jsx)(n.code,{children:"nums"}),", and that the score is not necessarily an integer."]}),"\n",(0,s.jsxs)(n.p,{children:["Return ",(0,s.jsxs)(n.em,{children:["the maximum ",(0,s.jsx)(n.strong,{children:"score"})," you can achieve of all the possible partitions"]}),". Answers within ",(0,s.jsx)(n.code,{children:"10-6"})," of the actual answer will be accepted."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [9,1,2,3,9], k = 3\nOutput: 20.00000\nExplanation:\nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [1,2,3,4,5,6,7], k = 4\nOutput: 20.50000\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= nums.length <= 100"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= nums[i] <= 10^4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= k <= nums.length"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-dynamic-programming",children:"Approach 1: Dynamic Programming"}),"\n",(0,s.jsx)(o,{children:(0,s.jsxs)(t,{value:"cpp",label:"C++",children:[(0,s.jsx)(r,{name:"@wkw"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    double dfs(vector<vector<double>>& dp, vector<int>& nums, int k, int i) {\n        // reached all elements\n        if (i >= nums.size()) return 0;\n        // cannot further partition\n        if (k == 0) return INT_MIN;\n        // the result has been calculated before\n        if (dp[i][k] != -1) return dp[i][k];\n        double mx = INT_MIN, sum = 0;\n        for (int j = i; j < nums.size(); j++) {\n            // sum from nums[i .. j]\n            sum += nums[j];\n            // current partition + the best result starting from the next index\n            mx = max(mx, sum / (j - i + 1) + dfs(dp, nums, k - 1, j + 1));\n        }\n        // memorise the result\n        return dp[i][k] = mx;\n    }\n    double largestSumOfAverages(vector<int>& nums, int k) {\n        int n = nums.size();\n        // The best score partitioning A[i:] into at most K parts\n        vector<vector<double>> dp(n, vector<double>(k + 1, -1));\n        // starting from index 0\n        return dfs(dp, nums, k, 0);\n    }\n};\n"})})]})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(30758);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);