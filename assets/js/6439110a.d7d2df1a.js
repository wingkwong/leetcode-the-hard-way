"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[3266],{26838:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"0400-0499/minimum-genetic-mutation-medium","title":"0433 - Minimum Genetic Mutation (Medium)","description":"Author: @wkw | https://leetcode.com/problems/minimum-genetic-mutation/","source":"@site/solutions/0400-0499/0433-minimum-genetic-mutation-medium.md","sourceDirName":"0400-0499","slug":"/0400-0499/minimum-genetic-mutation-medium","permalink":"/solutions/0400-0499/minimum-genetic-mutation-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0433-minimum-genetic-mutation-medium.md","tags":[{"inline":true,"label":"Hash Table","permalink":"/solutions/tags/hash-table"},{"inline":true,"label":"String","permalink":"/solutions/tags/string"},{"inline":true,"label":"Breadth-First Search","permalink":"/solutions/tags/breadth-first-search"}],"version":"current","sidebarPosition":433,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/minimum-genetic-mutation/","tags":["Hash Table","String","Breadth-First Search"]},"sidebar":"tutorialSidebar","previous":{"title":"0429 - N-ary Tree Level Order Traversal (Medium)","permalink":"/solutions/0400-0499/n-ary-tree-level-order-traversal-medium"},"next":{"title":"0435 - Non-overlapping Intervals (Medium)","permalink":"/solutions/0400-0499/non-overlapping-intervals-medium"}}');var r=t(86070),a=t(32790);const s={description:"Author: @wkw | https://leetcode.com/problems/minimum-genetic-mutation/",tags:["Hash Table","String","Breadth-First Search"]},o="0433 - Minimum Genetic Mutation (Medium)",c={},h=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: BFS",id:"approach-1-bfs",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:t,TabItem:i,Tabs:s}=n;return t||u("SolutionAuthor",!0),i||u("TabItem",!0),s||u("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"0433---minimum-genetic-mutation-medium",children:"0433 - Minimum Genetic Mutation (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-genetic-mutation/",children:"https://leetcode.com/problems/minimum-genetic-mutation/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["A gene string can be represented by an 8-character long string, with choices from ",(0,r.jsx)(n.code,{children:"'A'"}),", ",(0,r.jsx)(n.code,{children:"'C'"}),", ",(0,r.jsx)(n.code,{children:"'G'"}),", and ",(0,r.jsx)(n.code,{children:"'T'"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Suppose we need to investigate a mutation from a gene string ",(0,r.jsx)(n.code,{children:"start"})," to a gene string ",(0,r.jsx)(n.code,{children:"end"})," where one mutation is defined as one single character changed in the gene string."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For example, ",(0,r.jsx)(n.code,{children:'"AACCGGTT" --\x3e "AACCGGTA"'})," is one mutation."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["There is also a gene bank ",(0,r.jsx)(n.code,{children:"bank"})," that records all the valid gene mutations. A gene must be in ",(0,r.jsx)(n.code,{children:"bank"})," to make it a valid gene string."]}),"\n",(0,r.jsxs)(n.p,{children:["Given the two gene strings ",(0,r.jsx)(n.code,{children:"start"})," and ",(0,r.jsx)(n.code,{children:"end"})," and the gene bank ",(0,r.jsx)(n.code,{children:"bank"}),", return ",(0,r.jsx)(n.em,{children:"the minimum number of mutations needed to mutate from"}),(0,r.jsx)(n.code,{children:"start"}),(0,r.jsx)(n.em,{children:"to"}),(0,r.jsx)(n.code,{children:"end"}),". If there is no such a mutation, return ",(0,r.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Note that the starting point is assumed to be valid, so it might not be included in the bank."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: start = "AACCGGTT", end = "AACCGGTA", bank = ["AACCGGTA"]\nOutput: 1\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: start = "AACCGGTT", end = "AAACGGTA", bank = ["AACCGGTA","AACCGCTA","AAACGGTA"]\nOutput: 2\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: start = "AAAAACCC", end = "AACCCCCC", bank = ["AAAACCCC","AAACCCCC","AACCCCCC"]\nOutput: 3\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"start.length == 8"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"end.length == 8"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= bank.length <= 10"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"bank[i].length == 8"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"start"}),", ",(0,r.jsx)(n.code,{children:"end"}),", and ",(0,r.jsx)(n.code,{children:"bank[i]"})," consist of only the characters ",(0,r.jsx)(n.code,{children:"['A', 'C', 'G', 'T']"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-bfs",children:"Approach 1: BFS"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsxs)(i,{value:"cpp",label:"C++",children:[(0,r.jsx)(t,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'class Solution {\npublic:\n    // Intuition: we can see each string as a node and we can connect them if\n    // 1. there is only one single character different\n    // 2. the target node is available in `bank`\n    // the problem is now to find the shortest path from the starting point to the ending point\n    // so we can use BFS\n    int minMutation(string start, string end, vector<string>& bank) {\n        // a queue to store each gene string (node)\n        queue<string> q;\n        // a hash map to store if we\'ve visited a node\n        unordered_map<string, int> vis;\n        // distance\n        int steps = 0;\n        // we start from gene string `start` as a starting point\n        // push it to the queue\n        q.push(start);\n        // and mark it visited\n        vis[start] = 1;\n        // BFS\n        while (!q.empty()) {\n            // iterate from the back because the size of q varies\n            // which would result in wrong answer if you iterate from 0\n            // alternatively, you can define a new variable for q.size() before the for-loop\n            // i.e.\n            // int n = q.size();\n            // for (int i = 0; i < n; i++) {\n            for (int i = q.size(); i > 0; i--) {\n                // get the gene string from the queue\n                string s = q.front();\n                q.pop();\n                // if it is same as `end`, that means we found the answer\n                if (s == end) return steps;\n                // otherwise, given a gene string with 8-character long\n                // we can replace each character with "A", "C", "G" and "T" (i.e. mutate)\n                for (int j = 0; j < 8; j++) {\n                    // s[j] will be modified later,\n                    // hence store the original character here\n                    char oc = s[j];\n                    // iterate ACGT\n                    // alternatively, you can use `for (char c : "ACGT") { ... }`\n                    for (int k = 0; k < 4; k++) {\n                        // replace the j-th character in s with the k-th character in ACGT\n                        s[j] = "ACGT"[k];\n                        // we can reach the next node if the next node hasn\'t been visited\n                        // and the next node is available in `bank`\n                        if (!vis[s] && find(bank.begin(), bank.end(), s) != bank.end()) {\n                            // push the next node to the queue\n                            q.push(s);\n                            // and mark it visited\n                            vis[s] = 1;\n                        }\n                    }\n                    // since we updated the character, we revert it back\n                    s[j] = oc;\n                }\n            }\n            // increase the step count\n            steps += 1;\n        }\n        // not able to reach `end`, return -1 here\n        return -1;\n    }\n};\n'})})]}),(0,r.jsxs)(i,{value:"java",label:"Java",children:[(0,r.jsx)(t,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class Solution {\n    // Intuition: we can see each string as a node and we can connect them if\n    // 1. there is only one single character different\n    // 2. the target node is available in `bank`\n    // the problem is now to find the shortest path from the starting point to the ending point\n    // so we can use BFS\n    public int minMutation(String start, String end, String[] bank) {\n        // a queue to store each gene string (node)\n        Queue<String> q = new LinkedList<>();\n        // a hash set to store if we\'ve visited a node\n        HashSet<String> vis = new HashSet<String>();\n        // convert bank to List\n        List<String> banks = Arrays.asList(bank);\n        // distance\n        int steps = 0;\n        // we start from gene string `start` as a starting point\n        // push it to the queue\n        q.add(start);\n        // and mark it visited\n        vis.add(start);\n        // BFS\n        while (!q.isEmpty()) {\n            // iterate from the back because the size of q varies\n            // which would result in wrong answer if you iterate from 0\n            // alternatively, you can define a new variable for q.size() before the for-loop\n            // i.e.\n            // int n = q.size();\n            // for (int i = 0; i < n; i++) {\n            for (int i = q.size(); i > 0; i--) {\n                // get the gene string from the queue\n                String s = q.poll();\n                // if it is same as `end`, that means we found the answer\n                if (s.equals(end)) return steps;\n                // otherwise, given a gene string with 8-character long\n                // we can replace each character with "A", "C", "G" and "T"\n                char[] ca = s.toCharArray();\n                for (int j = 0; j < 8; j++) {\n                    // s[j] will be modified later,\n                    // hence store the original character here\n                    char oc = ca[j];\n                    // iterate ACGT\n                    // alternatively, you can use `for (char c : "ACGT") { ... }`\n                    for (int k = 0; k < 4; k++) {\n                        // replace the j-th character in s with the k-th character in ACGT\n                        ca[j] = "ACGT".charAt(k);\n                        // we can reach the next node if the next node hasn\'t been visited\n                        // and the next node is available in `bank`\n                        String t = new String(ca);\n                        if (!vis.contains(t) && banks.contains(t)) {\n                            // push the next node to the queue\n                            q.add(t);\n                            // and mark it visited\n                            vis.add(t);\n                        }\n                    }\n                    // since we updated the character, we revert it back\n                    ca[j] = oc;\n                }\n            }\n            // increase the step count\n            steps += 1;\n        }\n        // not able to reach `end`, return -1 here\n        return -1;\n    }\n}\n'})})]})]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(30758);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);