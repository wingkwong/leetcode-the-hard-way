"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[19205],{40539:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"2400-2499/find-all-good-indices-medium","title":"2420 - Find All Good Indices (Medium)","description":"Author: @wkw | https://leetcode.com/problems/find-all-good-indices/","source":"@site/solutions/2400-2499/2420-find-all-good-indices-medium.md","sourceDirName":"2400-2499","slug":"/2400-2499/find-all-good-indices-medium","permalink":"/solutions/2400-2499/find-all-good-indices-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2420-find-all-good-indices-medium.md","tags":[],"version":"current","sidebarPosition":2420,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/find-all-good-indices/"},"sidebar":"tutorialSidebar","previous":{"title":"2419 - Longest Subarray With Maximum Bitwise AND (Medium)","permalink":"/solutions/2400-2499/longest-subarray-with-maximum-bitwise-and-medium"},"next":{"title":"2421 - Number of Good Paths (Hard)","permalink":"/solutions/2400-2499/number-of-good-paths-hard"}}');var o=i(86070),s=i(68906);const t={description:"Author: @wkw | https://leetcode.com/problems/find-all-good-indices/"},d="2420 - Find All Good Indices (Medium)",c={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix &amp; Suffix",id:"approach-1-prefix--suffix",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:i,TabItem:r,Tabs:t}=n;return i||u("SolutionAuthor",!0),r||u("TabItem",!0),t||u("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"2420---find-all-good-indices-medium",children:"2420 - Find All Good Indices (Medium)"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/find-all-good-indices/",children:"https://leetcode.com/problems/find-all-good-indices/"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["You are given a ",(0,o.jsx)(n.strong,{children:"0-indexed"})," integer array ",(0,o.jsx)(n.code,{children:"nums"})," of size ",(0,o.jsx)(n.code,{children:"n"})," and a positive integer ",(0,o.jsx)(n.code,{children:"k"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["We call an index ",(0,o.jsx)(n.code,{children:"i"})," in the range ",(0,o.jsx)(n.code,{children:"k <= i < n - k"})," ",(0,o.jsx)(n.strong,{children:"good"})," if the following conditions are satisfied:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"k"})," elements that are just ",(0,o.jsx)(n.strong,{children:"before"})," the index ",(0,o.jsx)(n.code,{children:"i"})," are in ",(0,o.jsx)(n.strong,{children:"non-increasing"})," order."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"k"})," elements that are just ",(0,o.jsx)(n.strong,{children:"after"})," the index ",(0,o.jsx)(n.code,{children:"i"})," are in ",(0,o.jsx)(n.strong,{children:"non-decreasing"})," order."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Return ",(0,o.jsxs)(n.em,{children:["an array of all good indices sorted in ",(0,o.jsx)(n.strong,{children:"increasing"})," order"]}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: nums = [2,1,1,1,3,4,1], k = 2\nOutput: [2,3]\nExplanation: There are two good indices in the array:\n- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.\n- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.\nNote that the index 4 is not good because [4,1] is not non-decreasing.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: nums = [2,1,1,2], k = 2\nOutput: []\nExplanation: There are no good indices in this array.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"n == nums.length"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"3 <= n <= 1e5"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= nums[i] <= 10^6"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= k <= n / 2"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-prefix--suffix",children:"Approach 1: Prefix & Suffix"}),"\n",(0,o.jsx)(t,{children:(0,o.jsxs)(r,{value:"cpp",label:"C++",children:[(0,o.jsx)(i,{name:"@wkw"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> goodIndices(vector<int>& nums, int k) {\n        int n = nums.size();\n        // inc[i]: number of elements after the index i are in non-decreasing order\n        // dec[i]: number of elements before the index i are in non-increasing order\n        vector<int> inc(n, 1), dec(n, 1);\n        for (int i = 1; i < n; i++) {\n            // if it's non-increasing, add 1 to the previous state\n            if (nums[i - 1] >= nums[i]) dec[i] = dec[i - 1] + 1;\n            // we don't need to reset to 1 as we init each as 1 at the beginning\n        }\n        for (int i = n - 2; ~i; i--) {\n            // if it's non-decreasing, add 1 to the previous state\n            if (nums[i + 1] >= nums[i]) inc[i] = inc[i + 1] + 1;\n            // we don't need to reset to 1 as we init each as 1 at the beginning\n        }\n        vector<int> ans;\n        // k <= i < n - k\n        for (int i = k; i < n - k; i++) {\n            // how many elements before the index i are in non-increasing order?\n            // how many elements after the index i are in non-decreasing order?\n            if (dec[i - 1] >= k && inc[i + 1] >= k) {\n                ans.push_back(i);\n            }\n        }\n        return ans;\n    }\n};\n"})})]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var r=i(30758);const o={},s=r.createContext(o);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);