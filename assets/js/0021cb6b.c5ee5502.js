"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[16163],{42769:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"0900-0999/sort-an-array-medium","title":"0912 - Sort an Array (Medium)","description":"Author: @saishreekouda, @wkw, @ganajayant, @deepanshu-rawat6| https://leetcode.com/problems/sort-an-array/","source":"@site/solutions/0900-0999/0912-sort-an-array-medium.md","sourceDirName":"0900-0999","slug":"/0900-0999/sort-an-array-medium","permalink":"/solutions/0900-0999/sort-an-array-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0912-sort-an-array-medium.md","tags":[{"inline":true,"label":"sorting","permalink":"/solutions/tags/sorting"}],"version":"current","sidebarPosition":912,"frontMatter":{"description":"Author: @saishreekouda, @wkw, @ganajayant, @deepanshu-rawat6| https://leetcode.com/problems/sort-an-array/","tags":["sorting"]},"sidebar":"tutorialSidebar","previous":{"title":"0909 - Snakes and Ladders (Medium)","permalink":"/solutions/0900-0999/snakes-and-ladders-medium"},"next":{"title":"0918 - Maximum Sum Circular Subarray (Medium)","permalink":"/solutions/0900-0999/maximum-sum-circular-subarray-medium"}}');var i=s(86070),r=s(32790);const t={description:"Author: @saishreekouda, @wkw, @ganajayant, @deepanshu-rawat6| https://leetcode.com/problems/sort-an-array/",tags:["sorting"]},l="0912 - Sort an Array (Medium)",m={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: STL",id:"approach-1-stl",level:2},{value:"Standard STL Sort",id:"standard-stl-sort",level:3},{value:"Stable STL Sort",id:"stable-stl-sort",level:3},{value:"Approach 2: Quick Sort",id:"approach-2-quick-sort",level:2},{value:"Quick Sort with Fixed Pivot (TLE)",id:"quick-sort-with-fixed-pivot-tle",level:3},{value:"Quick Sort with Randomised Pivot (TLE)",id:"quick-sort-with-randomised-pivot-tle",level:3},{value:"Approach 3: Merge Sort",id:"approach-3-merge-sort",level:2},{value:"Merge Sort with Outplace Merging",id:"merge-sort-with-outplace-merging",level:3},{value:"In mergeSort() function:",id:"in-mergesort-function",level:4},{value:"In merge() function:",id:"in-merge-function",level:4},{value:"Merge Sort using In-place Merging",id:"merge-sort-using-in-place-merging",level:3},{value:"In mergeSort() function:",id:"in-mergesort-function-1",level:4},{value:"In mergeInPlace() function:",id:"in-mergeinplace-function",level:4},{value:"Approach 4: Counting Sort",id:"approach-4-counting-sort",level:2},{value:"Approach 5: Shell Sort",id:"approach-5-shell-sort",level:2}];function h(n){const e={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",math:"math",mfrac:"mfrac",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...n.components},{SolutionAuthor:s,TabItem:a,Tabs:t}=e;return s||o("SolutionAuthor",!0),a||o("TabItem",!0),t||o("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"0912---sort-an-array-medium",children:"0912 - Sort an Array (Medium)"})}),"\n",(0,i.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/sort-an-array/",children:"https://leetcode.com/problems/sort-an-array/"})}),"\n",(0,i.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(e.p,{children:["Given an array of integers ",(0,i.jsx)(e.code,{children:"nums"}),", sort the array in ascending order."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"1 <= nums.length <= 5 * 10^4"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"-5 * 10^4 <= nums[i] <= 5 * 10^4"})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"approach-1-stl",children:"Approach 1: STL"}),"\n",(0,i.jsx)(e.h3,{id:"standard-stl-sort",children:"Standard STL Sort"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(s,{name:"@wkw"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"void standardSTLSort(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n}\n"})})]}),(0,i.jsxs)(a,{value:"java",label:"Java",children:[(0,i.jsx)(s,{name:"@ganajayant"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public int[] sortArray(int[] nums) {\n        Arrays.sort(nums);\n        return nums;\n    }\n}\n"})})]})]}),"\n",(0,i.jsx)(e.h3,{id:"stable-stl-sort",children:"Stable STL Sort"}),"\n",(0,i.jsx)(t,{children:(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(s,{name:"@wkw"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"void stableSTLSort(vector<int>& nums) {\n    stable_sort(nums.begin(), nums.end());\n}\n"})})]})}),"\n",(0,i.jsx)(e.h2,{id:"approach-2-quick-sort",children:"Approach 2: Quick Sort"}),"\n",(0,i.jsx)(e.h3,{id:"quick-sort-with-fixed-pivot-tle",children:"Quick Sort with Fixed Pivot (TLE)"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(s,{name:"@wkw"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"int partition(vector<int>& nums, int l, int r) {\n    int pivot = nums[r];\n    int i = l - 1;\n    for (int j = l; j <= r - 1; j++) {\n        if (nums[j] < pivot) {\n            i++;\n            swap(nums[i], nums[j]);\n        }\n    }\n    swap(nums[i + 1], nums[r]);\n    return i + 1;\n}\n\nvoid quickSort(vector<int>& nums, int l, int r) {\n    if (l < r) {\n        int pivot = partition(nums, l, r);\n        quickSort(nums, l, pivot - 1);\n        quickSort(nums, pivot + 1, r);\n    }\n}\n"})})]}),(0,i.jsxs)(a,{value:"java",label:"Java",children:[(0,i.jsx)(s,{name:"@ganajayant"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public static void quicksort(int l, int r) {\n        if (l < r) {\n            int mid = partition(l, r);\n            quicksort(l, mid - 1);\n            quicksort(mid + 1, r);\n        }\n    }\n\n    public static int partition(int l, int r) {\n        int pivot = ar[r];\n        int i = (l - 1);\n\n        for (int j = l; j <= r - 1; j++) {\n            if (ar[j] < pivot) {\n                i++;\n                int temp = ar[i];\n                ar[i] = ar[j];\n                ar[j] = temp;\n            }\n        }\n        int temp = ar[i + 1];\n        ar[i + 1] = ar[r];\n        ar[r] = temp;\n        return (i + 1);\n    }\n}\n"})})]})]}),"\n",(0,i.jsx)(e.h3,{id:"quick-sort-with-randomised-pivot-tle",children:"Quick Sort with Randomised Pivot (TLE)"}),"\n",(0,i.jsx)(t,{children:(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(s,{name:"@wkw"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"int partition(vector<int>& nums, int l, int r) {\n    int pivot = nums[r];\n    int i = l - 1;\n    for (int j = l; j <= r - 1; j++) {\n        if (nums[j] < pivot) {\n            i++;\n            swap(nums[i], nums[j]);\n        }\n    }\n    swap(nums[i + 1], nums[r]);\n    return i + 1;\n}\n\nvoid quickSort(vector<int>& nums, int l, int r) {\n    if (l < r) {\n        swap(nums[l + rand() % (r - l)], nums[r]);\n        int pivot = partition(nums, l, r);\n        quickSort(nums, l, pivot - 1);\n        quickSort(nums, pivot + 1, r);\n    }\n}\n"})})]})}),"\n",(0,i.jsx)(e.h2,{id:"approach-3-merge-sort",children:"Approach 3: Merge Sort"}),"\n",(0,i.jsx)(e.p,{children:"Standard merge sort algorithm, following a divide and conquer approach, division of sub-array by mid values till sub-array length reaches one, then merging parts by either out-place or in-place merging in either ascending or descending order."}),"\n",(0,i.jsx)(e.h3,{id:"merge-sort-with-outplace-merging",children:"Merge Sort with Outplace Merging"}),"\n",(0,i.jsx)(e.p,{children:"In this approach, merging happen in seperate array of size, then it is passed on in the above function calls."}),"\n",(0,i.jsx)(e.h4,{id:"in-mergesort-function",children:"In mergeSort() function:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Dividing the array into 2 subarrays(one is ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"e"}),(0,i.jsx)(e.mi,{children:"f"}),(0,i.jsx)(e.mi,{children:"t"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"left"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"t"})]})})]})," and other is ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"r"}),(0,i.jsx)(e.mi,{children:"i"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mi,{children:"h"}),(0,i.jsx)(e.mi,{children:"t"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"right"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"i"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"h"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"t"})]})})]}),") till their length reaches one(because no futher division can take place)"]}),"\n",(0,i.jsx)(e.li,{children:"Then passing left and right parts into merge() function for sorting in correct order."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"in-merge-function",children:"In merge() function:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["We merge the two subarrays( ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"e"}),(0,i.jsx)(e.mi,{children:"f"}),(0,i.jsx)(e.mi,{children:"t"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"left"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"t"})]})})]})," and ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"r"}),(0,i.jsx)(e.mi,{children:"i"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mi,{children:"h"}),(0,i.jsx)(e.mi,{children:"t"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"right"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"i"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"h"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"t"})]})})]})," ) into another array ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"m"}),(0,i.jsx)(e.mi,{children:"i"}),(0,i.jsx)(e.mi,{children:"x"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"mix"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6595em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"mi"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"x"})]})})]})," ."]}),"\n",(0,i.jsxs)(e.li,{children:["This merge operation stores elements from ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"e"}),(0,i.jsx)(e.mi,{children:"f"}),(0,i.jsx)(e.mi,{children:"t"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"left"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"t"})]})})]})," and ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"r"}),(0,i.jsx)(e.mi,{children:"i"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mi,{children:"h"}),(0,i.jsx)(e.mi,{children:"t"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"right"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"i"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"h"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"t"})]})})]})," in an ascending order, by comparing elements from individual subarrays."]}),"\n",(0,i.jsx)(e.li,{children:"Finally, since one subarray would have greater elements then the other one, so we add those elements seperately. Then, we return the sorted subarray into the above function call."}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["This solution gives ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"o"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n log n)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"("}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(e.span,{className:"mclose",children:")"})]})})]})," time complexity and ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"("}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(e.span,{className:"mclose",children:")"})]})})]})," space complexity."]}),"\n",(0,i.jsx)(t,{children:(0,i.jsxs)(a,{value:"java",label:"Java",children:[(0,i.jsx)(s,{name:"@deepanshu-rawat6"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public int[] sortArray(int[] nums) {\n        return mergeSort(nums);\n    }\n    public static int[] mergeSort(int[] arr) {\n        if (arr.length == 1) {\n            return arr;\n        }\n\n        int mid = arr.length / 2;\n        // copying and sorting sub-array by division on the basis of mid value\n        int[] left = mergeSort(Arrays.copyOfRange(arr, 0, mid));\n        int[] right = mergeSort(Arrays.copyOfRange(arr, mid, arr.length));\n\n        // now merging the two subarrays into one sorted subarray\n        return merge(left, right);\n    }\n\n    public static int[] merge(int[] first, int[] second) {\n        int[] mix = new int[first.length + second.length];\n\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        // adding elements in the mix array in ascending order\n        while (i < first.length && j < second.length) {\n            if (first[i] < second[j]) {\n                mix[k] = first[i];\n                i++;\n            } else {\n                mix[k] = second[j];\n                j++;\n            }\n            k++;\n        }\n\n        // it may be possible that one of the arrays is not complete\n        // copy the remaining elements\n        while (i < first.length) {\n            mix[k] = first[i];\n            i++;\n            k++;\n        }\n\n        while (j < second.length) {\n            mix[k] = second[j];\n            j++;\n            k++;\n        }\n\n        return mix;\n    }\n}\n"})})]})}),"\n",(0,i.jsx)(e.h3,{id:"merge-sort-using-in-place-merging",children:"Merge Sort using In-place Merging"}),"\n",(0,i.jsx)(e.p,{children:"In this approach, merging happens in-place, changes are made in the original arrays itself by modifying the reference variables."}),"\n",(0,i.jsx)(e.h4,{id:"in-mergesort-function-1",children:"In mergeSort() function:"}),"\n",(0,i.jsx)(e.p,{children:"Dividing the array into 2 subarrays(by calling mergeSort() function recursively) till their length reaches one."}),"\n",(0,i.jsx)(e.h4,{id:"in-mergeinplace-function",children:"In mergeInPlace() function:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["We merge the two subarrays(one from s to mid and another from mid to e) into another array ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"m"}),(0,i.jsx)(e.mi,{children:"i"}),(0,i.jsx)(e.mi,{children:"x"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"mix"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6595em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"mi"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"x"})]})})]})," ."]}),"\n",(0,i.jsx)(e.li,{children:"This merge operation stores elements from the two sub-arrays in an ascending order, by comparing elements from individual subarrays. - - Finally, since one subarray would have greater elements then the other one, so we add those elements seperately."}),"\n",(0,i.jsxs)(e.li,{children:["Then, we place the sorted elements from ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"m"}),(0,i.jsx)(e.mi,{children:"i"}),(0,i.jsx)(e.mi,{children:"x"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"mix"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6595em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"mi"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"x"})]})})]})," into ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"a"}),(0,i.jsx)(e.mi,{children:"r"}),(0,i.jsx)(e.mi,{children:"r"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"arr"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"rr"})]})})]})," , finally changes in ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"a"}),(0,i.jsx)(e.mi,{children:"r"}),(0,i.jsx)(e.mi,{children:"r"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"arr"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"rr"})]})})]})," have been made in-place."]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["This solution gives ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"o"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n log n)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"("}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(e.span,{className:"mclose",children:")"})]})})]})," time complexity and ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mn,{children:"1"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"("}),(0,i.jsx)(e.span,{className:"mord",children:"1"}),(0,i.jsx)(e.span,{className:"mclose",children:")"})]})})]})," space complexity."]}),"\n",(0,i.jsx)(t,{children:(0,i.jsxs)(a,{value:"java",label:"Java",children:[(0,i.jsx)(s,{name:"@deepanshu-rawat6"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public int[] sortArray(int[] nums) {\n        mergeSort(nums, 0, nums.length);\n        return nums;\n    }\n    public void mergeSort(int[] arr, int s, int e) {\n        if (e - s == 1) {\n            return;\n        }\n\n        int mid = (s + e) / 2;\n        // dividing sub-arrays by mid values till, sub-array length reaches one\n        mergeSort(arr, s, mid);\n        mergeSort(arr, mid, e);\n\n        // sorting the left portion(s to mid) and right portion(mid to e) into the same array arr\n        mergeInPlace(arr, s, mid, e);\n    }\n\n    public static void mergeInPlace(int[] arr, int s, int m, int e) {\n        int[] mix = new int[e - s];\n\n        int i = s;\n        int j = m;\n        int k = 0;\n        // adding elements in the mix array in ascending order\n        while (i < m && j < e) {\n            if (arr[i] < arr[j]) {\n                mix[k] = arr[i];\n                i++;\n            } else {\n                mix[k] = arr[j];\n                j++;\n            }\n            k++;\n        }\n\n        // it may be possible that one of the arrays is not complete\n        // copy the remaining elements\n        while (i < m) {\n            mix[k] = arr[i];\n            i++;\n            k++;\n        }\n\n        while (j < e) {\n            mix[k] = arr[j];\n            j++;\n            k++;\n        }\n\n        // modifying the original arrays by replacing elements into their correct indices\n        for (int l = 0; l < mix.length; l++) {\n            arr[s + l] = mix[l];\n        }\n    }\n}\n"})})]})}),"\n",(0,i.jsx)(e.h2,{id:"approach-4-counting-sort",children:"Approach 4: Counting Sort"}),"\n",(0,i.jsx)(t,{children:(0,i.jsxs)(a,{value:"py",label:"Python",children:[(0,i.jsx)(s,{name:"@wkw"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-py",children:"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        b = [0] * 100005\n        for x in nums:\n            b[x + 50000] += 1\n        ans = []\n        for i, v in enumerate(b, -50000):\n            ans.extend([i] * v)\n        return ans\n"})})]})}),"\n",(0,i.jsx)(e.h2,{id:"approach-5-shell-sort",children:"Approach 5: Shell Sort"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Start with a gap sequence. A common choice is to start with ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsxs)(e.mfrac,{children:[(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mn,{children:"2"})]})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\frac{n}{2}"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1.0404em",verticalAlign:"-0.345em"}}),(0,i.jsxs)(e.span,{className:"mord",children:[(0,i.jsx)(e.span,{className:"mopen nulldelimiter"}),(0,i.jsx)(e.span,{className:"mfrac",children:(0,i.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(e.span,{className:"vlist-r",children:[(0,i.jsxs)(e.span,{className:"vlist",style:{height:"0.6954em"},children:[(0,i.jsxs)(e.span,{style:{top:"-2.655em"},children:[(0,i.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(e.span,{className:"mord mtight",children:(0,i.jsx)(e.span,{className:"mord mtight",children:"2"})})})]}),(0,i.jsxs)(e.span,{style:{top:"-3.23em"},children:[(0,i.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsx)(e.span,{className:"frac-line",style:{borderBottomWidth:"0.04em"}})]}),(0,i.jsxs)(e.span,{style:{top:"-3.394em"},children:[(0,i.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(e.span,{className:"mord mtight",children:(0,i.jsx)(e.span,{className:"mord mathnormal mtight",children:"n"})})})]})]}),(0,i.jsx)(e.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(e.span,{className:"vlist-r",children:(0,i.jsx)(e.span,{className:"vlist",style:{height:"0.345em"},children:(0,i.jsx)(e.span,{})})})]})}),(0,i.jsx)(e.span,{className:"mclose nulldelimiter"})]})]})})]})," and halve it in each iteration until the gap becomes ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mn,{children:"1"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"1"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(e.span,{className:"mord",children:"1"})]})})]}),", where ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mi,{children:"n"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})})]})," is the length of the array."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Divide the array into subarrays of size equal to the current gap."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"For each subarray, perform an insertion sort to sort the elements within the subarray."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Reduce the gap and repeat the process until the gap becomes ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mn,{children:"1"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"1"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(e.span,{className:"mord",children:"1"})]})})]}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Finally, perform a final pass of insertion sort with a gap of ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mn,{children:"1"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"1"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(e.span,{className:"mord",children:"1"})]})})]})," to ensure the entire array is sorted."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(s,{name:"@saishreekouda"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    void shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n / 2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                int temp = nums[i];\n                int j;\n                for (j = i; j >= gap && nums[j - gap] > temp; j -= gap) {\n                    nums[j] = nums[j - gap];\n                }\n                nums[j] = temp;\n            }\n        }\n    }\n\n    vector<int> sortArray(vector<int>& nums) {\n        shellSort(nums);\n        return nums;\n    }\n};\n"})})]}),(0,i.jsxs)(a,{value:"py",label:"Python3",children:[(0,i.jsx)(s,{name:"@saishreekouda"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-py",children:"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = nums[i]\n                j = i\n                while j >= gap and nums[j - gap] > temp:\n                    nums[j] = nums[j - gap]\n                    j -= gap\n                nums[j] = temp\n            gap //= 2\n        return nums\n"})})]})]})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}function o(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>l});var a=s(30758);const i={},r=a.createContext(i);function t(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);