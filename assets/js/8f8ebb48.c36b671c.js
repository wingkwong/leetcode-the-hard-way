"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[83644],{87130:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"1600-1699/number-of-ways-to-form-a-target-string-given-a-dictionary-hard","title":"1639 - Number of Ways to Form a Target String Given a Dictionary (Hard)","description":"Author: @wkw | https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/","source":"@site/solutions/1600-1699/1639-number-of-ways-to-form-a-target-string-given-a-dictionary-hard.md","sourceDirName":"1600-1699","slug":"/1600-1699/number-of-ways-to-form-a-target-string-given-a-dictionary-hard","permalink":"/solutions/1600-1699/number-of-ways-to-form-a-target-string-given-a-dictionary-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1600-1699/1639-number-of-ways-to-form-a-target-string-given-a-dictionary-hard.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"String","permalink":"/solutions/tags/string"},{"inline":true,"label":"Dynamic Programming","permalink":"/solutions/tags/dynamic-programming"}],"version":"current","sidebarPosition":1639,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/","tags":["Array","String","Dynamic Programming"]},"sidebar":"tutorialSidebar","previous":{"title":"1633 - Smallest String With A Given Numeric Value (Medium)","permalink":"/solutions/1600-1699/smallest-string-with-a-given-numeric-value-medium"},"next":{"title":"1657 - Determine If Two Strings Are Close (Medium)","permalink":"/solutions/1600-1699/define-if-two-strings-are-close-medium"}}');var i=r(86070),a=r(68906);const o={description:"Author: @wkw | https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/",tags:["Array","String","Dynamic Programming"]},s="1639 - Number of Ways to Form a Target String Given a Dictionary (Hard)",c={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:r,TabItem:t,Tabs:o}=n;return r||m("SolutionAuthor",!0),t||m("TabItem",!0),o||m("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"1639---number-of-ways-to-form-a-target-string-given-a-dictionary-hard",children:"1639 - Number of Ways to Form a Target String Given a Dictionary (Hard)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/",children:"https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["You are given a list of strings of the ",(0,i.jsx)(n.strong,{children:"same length"})," ",(0,i.jsx)(n.code,{children:"words"})," and a string ",(0,i.jsx)(n.code,{children:"target"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Your task is to form ",(0,i.jsx)(n.code,{children:"target"})," using the given ",(0,i.jsx)(n.code,{children:"words"})," under the following rules:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"target"})," should be formed from left to right."]}),"\n",(0,i.jsxs)(n.li,{children:["To form the ",(0,i.jsx)(n.code,{children:"ith"})," character (",(0,i.jsx)(n.strong,{children:"0-indexed"}),") of ",(0,i.jsx)(n.code,{children:"target"}),", you can choose the ",(0,i.jsx)(n.code,{children:"kth"})," character of the ",(0,i.jsx)(n.code,{children:"jth"})," string in ",(0,i.jsx)(n.code,{children:"words"})," if ",(0,i.jsx)(n.code,{children:"target[i] = words[j][k]"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Once you use the ",(0,i.jsx)(n.code,{children:"kth"})," character of the ",(0,i.jsx)(n.code,{children:"jth"})," string of ",(0,i.jsx)(n.code,{children:"words"}),", you ",(0,i.jsx)(n.strong,{children:"can no longer"})," use the ",(0,i.jsx)(n.code,{children:"xth"})," character of any string in ",(0,i.jsx)(n.code,{children:"words"})," where ",(0,i.jsx)(n.code,{children:"x <= k"}),". In other words, all characters to the left of or at index ",(0,i.jsx)(n.code,{children:"k"})," become unusuable for every string."]}),"\n",(0,i.jsxs)(n.li,{children:["Repeat the process until you form the string ",(0,i.jsx)(n.code,{children:"target"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Notice"})," that you can use ",(0,i.jsx)(n.strong,{children:"multiple characters"})," from the ",(0,i.jsx)(n.strong,{children:"same string"})," in ",(0,i.jsx)(n.code,{children:"words"})," provided the conditions above are met."]}),"\n",(0,i.jsxs)(n.p,{children:["Return ",(0,i.jsxs)(n.em,{children:["the number of ways to form ",(0,i.jsx)(n.code,{children:"target"})," from ",(0,i.jsx)(n.code,{children:"words"})]}),". Since the answer may be too large, return it ",(0,i.jsx)(n.strong,{children:"modulo"})," ",(0,i.jsx)(n.code,{children:"1e9 + 7"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input: words = ["acca","bbbb","caca"], target = "aba"\nOutput: 6\nExplanation: There are 6 ways to form target.\n"aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("caca")\n"aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("caca")\n"aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("acca")\n"aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("acca")\n"aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("acca")\n"aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("caca")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input: words = ["abba","baab"], target = "bab"\nOutput: 4\nExplanation: There are 4 ways to form target.\n"bab" -> index 0 ("baab"), index 1 ("baab"), index 2 ("abba")\n"bab" -> index 0 ("baab"), index 1 ("baab"), index 3 ("baab")\n"bab" -> index 0 ("baab"), index 2 ("baab"), index 3 ("baab")\n"bab" -> index 1 ("abba"), index 2 ("baab"), index 3 ("baab")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= words.length <= 1000"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= words[i].length <= 1000"})}),"\n",(0,i.jsxs)(n.li,{children:["All strings in ",(0,i.jsx)(n.code,{children:"words"})," have the same length."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= target.length <= 1000"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"words[i]"})," and ",(0,i.jsx)(n.code,{children:"target"})," contain only lowercase English letters."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-dynamic-programming",children:"Approach 1: Dynamic Programming"}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsxs)(t,{value:"cpp",label:"C++",children:[(0,i.jsx)(r,{name:"@wkw"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int numWays(vector<string>& words, string target) {\n        int M = 1e9 + 7, n = words[0].size(), m = target.size();\n        vector<vector<long long>> dp(n, vector<long long>(m, -1));\n        vector<vector<long long>> cnt(n, vector<long long>(26));\n        // count character frequency for each j-th column\n        for (int i = 0; i < words.size(); i++) {\n            for (int j = 0; j < n; j++) {\n                cnt[j][words[i][j] - 'a']++;\n            }\n        }\n        function<int(int,int)> dfs = [&](int i, int j) {\n            // reach end of target\n            if (j == m) return 1;\n            // reach end of words\n            if (i == n) return 0;\n            if (dp[i][j] != -1) return (int) dp[i][j];\n            // skip i-th character\n            int res = dfs(i + 1, j), c = target[j] - 'a';\n            if (cnt[i][c]) res = (res + cnt[i][c] * dfs(i + 1, j + 1)) % M;\n            // memoize the result\n            return (int) (dp[i][j] = res);\n        };\n        return dfs(0, 0);\n    }\n};\n"})})]}),(0,i.jsxs)(t,{value:"py",label:"Python",children:[(0,i.jsx)(r,{name:"@wkw"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"class Solution:\n    # take or not take dp\n    def numWays(self, words: List[str], target: str) -> int:\n        M = 10 ** 9 + 7\n        n, m = len(words[0]), len(target)\n        cnt = [[0] * 26 for _ in range(n)]\n        # count character frequency for each j-th column\n        for i in range(len(words)):\n            for j in range(n):\n                cnt[j][ord(words[i][j]) - ord('a')] += 1\n        @lru_cache(None)\n        def dfs(i, j):\n            # reach target\n            if j == m:\n                return 1\n            # reach the end of the word\n            if i == n:\n                return 0\n            # not take\n            res = dfs(i + 1, j)\n            # take\n            c = ord(target[j]) - ord('a')\n            if cnt[i][c] > 0:\n                res += cnt[i][c] * dfs(i + 1, j + 1)\n            return res % M\n        return dfs(0, 0)\n"})})]})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(30758);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);