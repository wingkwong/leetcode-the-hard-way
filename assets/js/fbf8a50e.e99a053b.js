"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[35658],{76280:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"2100-2199/replace-non-coprime-numbers-in-array-hard","title":"2197 - Replace Non-Coprime Numbers in Array (Hard)","description":"Author: @wingkwong | https://leetcode.com/problems/replace-non-coprime-numbers-in-array/","source":"@site/solutions/2100-2199/2197-replace-non-coprime-numbers-in-array-hard.md","sourceDirName":"2100-2199","slug":"/2100-2199/replace-non-coprime-numbers-in-array-hard","permalink":"/solutions/2100-2199/replace-non-coprime-numbers-in-array-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2197-replace-non-coprime-numbers-in-array-hard.md","tags":[],"version":"current","sidebarPosition":2197,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/replace-non-coprime-numbers-in-array/"},"sidebar":"tutorialSidebar","previous":{"title":"2196 - Create Binary Tree From Descriptions (Medium)","permalink":"/solutions/2100-2199/create-binary-tree-from-descriptions-medium"},"next":{"title":"2200 - Find All K-Distant Indices in an Array (Easy)","permalink":"/solutions/2100-2199/find-all-k-distant-indices-in-an-array-easy"}}');var a=s(74848),i=s(28453);const t={description:"Author: @wingkwong | https://leetcode.com/problems/replace-non-coprime-numbers-in-array/"},l="2197 - Replace Non-Coprime Numbers in Array (Hard)",o={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Simulation",id:"approach-1-simulation",level:2}];function m(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"2197---replace-non-coprime-numbers-in-array-hard",children:"2197 - Replace Non-Coprime Numbers in Array (Hard)"})}),"\n",(0,a.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/replace-non-coprime-numbers-in-array/",children:"https://leetcode.com/problems/replace-non-coprime-numbers-in-array/"})}),"\n",(0,a.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,a.jsxs)(n.p,{children:["You are given an array of integers ",(0,a.jsx)(n.code,{children:"nums"}),". Perform the following steps:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Find ",(0,a.jsx)(n.strong,{children:"any"})," two ",(0,a.jsx)(n.strong,{children:"adjacent"})," numbers in ",(0,a.jsx)(n.code,{children:"nums"})," that are ",(0,a.jsx)(n.strong,{children:"non-coprime"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["If no such numbers are found, ",(0,a.jsx)(n.strong,{children:"stop"})," the process."]}),"\n",(0,a.jsxs)(n.li,{children:["Otherwise, delete the two numbers and ",(0,a.jsx)(n.strong,{children:"replace"})," them with their ",(0,a.jsx)(n.strong,{children:"LCM (Least Common Multiple)"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Repeat"})," this process as long as you keep finding two adjacent non-coprime numbers."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Return ",(0,a.jsxs)(n.em,{children:["the ",(0,a.jsx)(n.strong,{children:"final"})," modified array."]})," It can be shown that replacing adjacent non-coprime numbers in ",(0,a.jsx)(n.strong,{children:"any"})," arbitrary order will lead to the same result."]}),"\n",(0,a.jsxs)(n.p,{children:["The test cases are generated such that the values in the final array are ",(0,a.jsx)(n.strong,{children:"less than or equal"})," to ",(0,a.jsx)(n.code,{children:"108"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Two values ",(0,a.jsx)(n.code,{children:"x"})," and ",(0,a.jsx)(n.code,{children:"y"})," are ",(0,a.jsx)(n.strong,{children:"non-coprime"})," if ",(0,a.jsx)(n.code,{children:"GCD(x, y) > 1"})," where ",(0,a.jsx)(n.code,{children:"GCD(x, y)"})," is the ",(0,a.jsx)(n.strong,{children:"Greatest Common Divisor"})," of ",(0,a.jsx)(n.code,{children:"x"})," and ",(0,a.jsx)(n.code,{children:"y"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: nums = [6,4,3,2,7,6,2]\nOutput: [12,7,6]\nExplanation: \n- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [12,3,2,7,6,2].\n- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [12,2,7,6,2].\n- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [12,7,6,2].\n- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,6].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [12,7,6].\nNote that there are other ways to obtain the same resultant array.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: nums = [2,2,1,1,3,3,3]\nOutput: [2,1,1,3]\nExplanation: \n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3,3].\n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3].\n- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [2,1,1,3].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [2,1,1,3].\nNote that there are other ways to obtain the same resultant array.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= nums.length <= 10^5"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= nums[i] <= 10^5"})}),"\n",(0,a.jsxs)(n.li,{children:["The test cases are generated such that the values in the final array are ",(0,a.jsx)(n.strong,{children:"less than or equal"})," to ",(0,a.jsx)(n.code,{children:"108"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"approach-1-simulation",children:"Approach 1: Simulation"}),"\n",(0,a.jsxs)(n.p,{children:["We iterate each number and check if the gcd of this number ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mi,{children:"x"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"x"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"x"})]})})]})," and the last element ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mi,{children:"y"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"y"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"y"})]})})]})," of ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"a"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"s"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"ans"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"an"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"})]})})]})," is non co-prime, i.e. ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"g"}),(0,a.jsx)(n.mi,{children:"c"}),(0,a.jsx)(n.mi,{children:"d"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"("}),(0,a.jsx)(n.mi,{children:"x"}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"y"}),(0,a.jsx)(n.mo,{stretchy:"false",children:")"}),(0,a.jsx)(n.mo,{children:">"}),(0,a.jsx)(n.mn,{children:"1"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"gcd(x, y) > 1"})]})})}),(0,a.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"c"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,a.jsx)(n.span,{className:"mopen",children:"("}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"y"}),(0,a.jsx)(n.span,{className:"mclose",children:")"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(n.span,{className:"mrel",children:">"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"1"})]})]})]}),".  If so, replace them with their LCM and keep doing the same process till they are co-prime."]}),"\n",(0,a.jsx)(s,{name:"@wingkwong"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> replaceNonCoprimes(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> ans;\n        for (int i = 0; i < n; i++) {\n            // check if the last element of ans\n            // and nums[i] are non co-prime\n            while (ans.size() && gcd(ans.back(), nums[i]) > 1) {\n                // replace them with their LCM\n                nums[i] = lcm(ans.back(), nums[i]);\n                // delete the last element\n                ans.pop_back();\n            }\n            // insert nums[i] to ans for the next round\n            ans.push_back(nums[i]);\n        }\n        return ans;\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(96540);const a={},i=r.createContext(a);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);