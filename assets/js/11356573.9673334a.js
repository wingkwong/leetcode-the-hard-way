"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[71808],{60907:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"0100-0199/binary-tree-preorder-traversal-easy","title":"0144 - Binary Tree Preorder Traversal (Easy)","description":"Author: @wkw, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/binary-tree-preorder-traversal/","source":"@site/solutions/0100-0199/0144-binary-tree-preorder-traversal-easy.md","sourceDirName":"0100-0199","slug":"/0100-0199/binary-tree-preorder-traversal-easy","permalink":"/solutions/0100-0199/binary-tree-preorder-traversal-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0144-binary-tree-preorder-traversal-easy.md","tags":[{"inline":true,"label":"Stack","permalink":"/solutions/tags/stack"},{"inline":true,"label":"Tree","permalink":"/solutions/tags/tree"},{"inline":true,"label":"Depth-First Search","permalink":"/solutions/tags/depth-first-search"},{"inline":true,"label":"Binary Tree","permalink":"/solutions/tags/binary-tree"}],"version":"current","sidebarPosition":144,"frontMatter":{"description":"Author: @wkw, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/binary-tree-preorder-traversal/","tags":["Stack","Tree","Depth-First Search","Binary Tree"]},"sidebar":"tutorialSidebar","previous":{"title":"0143 - Reorder List (Medium)","permalink":"/solutions/0100-0199/reorder-list-medium"},"next":{"title":"0145 - Binary Tree Postorder Traversal (Easy)","permalink":"/solutions/0100-0199/binary-tree-postorder-traversal-easy"}}');var o=n(86070),a=n(68906);const l={description:"Author: @wkw, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/binary-tree-preorder-traversal/",tags:["Stack","Tree","Depth-First Search","Binary Tree"]},s="0144 - Binary Tree Preorder Traversal (Easy)",i={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS - Pre-order traversal",id:"approach-1-dfs---pre-order-traversal",level:2},{value:"Approach 2: Iterative",id:"approach-2-iterative",level:2}];function c(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:n,TabItem:t,Tabs:l}=r;return n||p("SolutionAuthor",!0),t||p("TabItem",!0),l||p("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"0144---binary-tree-preorder-traversal-easy",children:"0144 - Binary Tree Preorder Traversal (Easy)"})}),"\n",(0,o.jsx)(r.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(r.p,{children:["Given the ",(0,o.jsx)(r.code,{children:"root"})," of a binary tree, return ",(0,o.jsx)(r.em,{children:"the preorder traversal of its nodes' values"}),"."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Input: root = [1,null,2,3]\nOutput: [1,2,3]\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Input: root = []\nOutput: []\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Input: root = [1]\nOutput: [1]\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["The number of nodes in the tree is in the range ",(0,o.jsx)(r.code,{children:"[0, 100]"}),"."]}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.code,{children:"-100 <= Node.val <= 100"})}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Follow up:"})," Recursive solution is trivial, could you do it iteratively?"]}),"\n",(0,o.jsx)(r.h2,{id:"approach-1-dfs---pre-order-traversal",children:"Approach 1: DFS - Pre-order traversal"}),"\n",(0,o.jsxs)(l,{children:[(0,o.jsxs)(t,{value:"cpp",label:"C++",children:[(0,o.jsx)(n,{name:"@wkw"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-cpp",children:"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n// Time Complexity: O(N)\n// Space Complexity: O(N)\n\n// This is a standard pre-order traversal problem, I'd suggest to learn in-order and post-order as well.\n// Here's a short tutorial if you're interested.\n// https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree\n// then you may try the following problems\n// 94. Binary Tree Inorder Traversal: https://leetcode.com/problems/binary-tree-inorder-traversal/\n// 145. Binary Tree Postorder Traversal: https://leetcode.com/problems/binary-tree-postorder-traversal/\n\nclass Solution {\npublic:\n    vector<int> ans;\n    void preorder(TreeNode* node) {\n        if (node == NULL) return;\n        // do something with node value here\n        ans.push_back(node->val);\n        // traverse the left node\n        preorder(node->left);\n        // traverse the right node\n        preorder(node->right);\n    }\n\n    vector<int> preorderTraversal(TreeNode* root) {\n        preorder(root);\n        return ans;\n    }\n};\n"})})]}),(0,o.jsxs)(t,{value:"py",label:"Python",children:[(0,o.jsx)(n,{name:"@wkw"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-py",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# This is a standard pre-order traversal problem, I'd suggest to learn in-order and post-order as well.\n# Here's a short tutorial if you're interested.\n# https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree\n# then you may try the following problems\n# 94. Binary Tree Inorder Traversal: https://leetcode.com/problems/binary-tree-inorder-traversal/\n# 145. Binary Tree Postorder Traversal: https://leetcode.com/problems/binary-tree-postorder-traversal/\n\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n\t\t# root -> left  -> right\n        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right) if root else []\n"})})]}),(0,o.jsxs)(t,{value:"java",label:"Java",children:[(0,o.jsx)(n,{name:"@ganajayant"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public static List<Integer> preorder(TreeNode root, List<Integer> ll) {\n        if (root == null) {\n            return ll;\n        }\n        ll.add(root.val);\n        preorder(root.left, ll);\n        preorder(root.right, ll);\n        return ll;\n    }\n   public static List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> ll = new LinkedList<Integer>();\n        ll = preorder(root, ll);\n        return ll;\n    }\n}\n"})})]}),(0,o.jsxs)(t,{value:"javascript",label:"JavaScript",children:[(0,o.jsx)(n,{name:"@radojicic23"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar res = [];\nvar preorderTraversal = function (root) {\n  let res = [];\n  function dfs(node) {\n    if (node == null) {\n      return;\n    }\n    res.push(node.val);\n    dfs(node.left);\n    dfs(node.right);\n  }\n  dfs(root);\n  return res;\n};\n"})})]})]}),"\n",(0,o.jsx)(r.h2,{id:"approach-2-iterative",children:"Approach 2: Iterative"}),"\n",(0,o.jsxs)(l,{children:[(0,o.jsxs)(t,{value:"java",label:"Java",children:[(0,o.jsx)(n,{name:"@vigneshshiv"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n// Time complexity: O(n), where n - # of nodes in the tree\n// Space complexity: O(n)\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> result = new LinkedList<>();\n        Stack<TreeNode> stack = new Stack<>();\n        while (root != null) {\n            // Keep adding top and left node values, while traversing on left subtree\n            result.add(root.val);\n            // If Root has right subtree, add it to stack\n            if (root.right != null) {\n                stack.push(root.right);\n            }\n            //   1\n            //  / \\\n            // 2   3\n            // If 1 & 2 is added to result, Stack is only having 3\n            // If current node is 2, the 2's left is null,\n            // So Pops out stack top, i.e, current node's (2's) parent (1) right subtree\n            root = root.left;\n            if (root == null && !stack.isEmpty()) {\n                root = stack.pop();\n            }\n        }\n        return result;\n    }\n}\n"})})]}),(0,o.jsxs)(t,{value:"py",label:"Python",children:[(0,o.jsx)(n,{name:"@radojicic23"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-py",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        stack, res = [root], []\n\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n        return res\n"})})]}),(0,o.jsxs)(t,{value:"cpp",label:"C++",children:[(0,o.jsx)(n,{name:"@radojicic23"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-cpp",children:"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> preorderTraversal(TreeNode* root) {\n        stack<TreeNode*> st;\n        vector<int> ans;\n        st.push(root);\n        while (!st.empty()) {\n            TreeNode* node = st.top();\n            st.pop();\n            if (node) {\n                ans.push_back(node->val);\n                st.push(node->right);\n                st.push(node->left);\n            }\n        }\n        return ans;\n    }\n};\n"})})]}),(0,o.jsxs)(t,{value:"js",label:"JavaScript",children:[(0,o.jsx)(n,{name:"@radojicic23"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function (root) {\n  let stack = [],\n    ans = [];\n  stack.push(root);\n  while (stack.length != 0) {\n    let node = stack[stack.length - 1];\n    stack.pop();\n    if (node != null) {\n      ans.push(node.val);\n      stack.push(node.right);\n      stack.push(node.left);\n    }\n  }\n  return ans;\n};\n"})})]})]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}function p(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>s});var t=n(30758);const o={},a=t.createContext(o);function l(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);