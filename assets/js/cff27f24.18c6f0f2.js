"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1681],{72810:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"0400-0499/non-decreasing-subsequences-medium","title":"0491 - Non-decreasing Subsequences (Medium)","description":"Author: @wingkwong | https://leetcode.com/problems/non-decreasing-subsequences/","source":"@site/solutions/0400-0499/0491-non-decreasing-subsequences-medium.md","sourceDirName":"0400-0499","slug":"/0400-0499/non-decreasing-subsequences-medium","permalink":"/solutions/0400-0499/non-decreasing-subsequences-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0491-non-decreasing-subsequences-medium.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Hash Table","permalink":"/solutions/tags/hash-table"},{"inline":true,"label":"Backtracking","permalink":"/solutions/tags/backtracking"},{"inline":true,"label":"Bit Manipulation","permalink":"/solutions/tags/bit-manipulation"}],"version":"current","sidebarPosition":491,"frontMatter":{"description":"Author: @wingkwong | https://leetcode.com/problems/non-decreasing-subsequences/","tags":["Array","Hash Table","Backtracking","Bit Manipulation"]},"sidebar":"tutorialSidebar","previous":{"title":"0473 - Matchsticks to Square (Medium)","permalink":"/solutions/0400-0499/matchsticks-to-square-medium"},"next":{"title":"0493 - Reverse Pairs (Hard)","permalink":"/solutions/0400-0499/reverse-pairs-hard"}}');var r=s(74848),i=s(28453);const o={description:"Author: @wingkwong | https://leetcode.com/problems/non-decreasing-subsequences/",tags:["Array","Hash Table","Backtracking","Bit Manipulation"]},a="0491 - Non-decreasing Subsequences (Medium)",c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Set",id:"approach-1-set",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:s,TabItem:t,Tabs:o}=n;return s||h("SolutionAuthor",!0),t||h("TabItem",!0),o||h("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"0491---non-decreasing-subsequences-medium",children:"0491 - Non-decreasing Subsequences (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/non-decreasing-subsequences/",children:"https://leetcode.com/problems/non-decreasing-subsequences/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given an integer array ",(0,r.jsx)(n.code,{children:"nums"}),", return ",(0,r.jsx)(n.em,{children:"all the different possible non-decreasing subsequences of the given array with at least two elements"}),". You may return the answer in ",(0,r.jsx)(n.strong,{children:"any order"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: nums = [4,6,7,7]\nOutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: nums = [4,4,3,2,1]\nOutput: [[4,4]]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= nums.length <= 15"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"-100 <= nums[i] <= 100"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-set",children:"Approach 1: Set"}),"\n",(0,r.jsx)(o,{children:(0,r.jsxs)(t,{value:"cpp",label:"C++",children:[(0,r.jsx)(s,{name:"@wingkwong"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// ideas:\n// 1. use set to store the subsequences\n// 2. iterate each number to compare with the existing subsequences\n// 3. if the last element is less than the current element, we can add this number to the subsequence\n// 4. we can also do the same if the subsequence is empty\n// 5. filter the subsequences to build the final answer\nclass Solution {\npublic:\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\n        vector<vector<int>> ans;\n        // use set to store the subsequences\n        set<vector<int>> s;\n        // init the first subsequence\n        // alternatively you can do it with `set<vector<int>> s = {{}};`\n        s.insert(vector<int>({}));\n        // iterate each number\n        for (auto x : nums) {\n            // use `tmp_s` for storing the new subsequences\n            // because we wants to iterate each subsequence in `s`\n            set<vector<int>> tmp_s;\n            for (auto cur_s : s) {\n                // we can add the current element `x` if\n                // 1. the subsequence is empty\n                // e.g. x = 4, [] => [4]\n                // 2. the last element is less than the current element\n                // e.g. x = 6, [4] => [4, 6]\n                if (cur_s.empty() || cur_s.back() <= x) {\n                    // copy cur_s to new_s\n                    // because we want to add the number to the new set `new_s`\n                    // while keeping the old one `cur_s` unchanged\n                    // e.g. x = 7, cur_s = [4, 6], new_s = [4, 6, 7] \n                    vector<int> new_s = cur_s;\n                    // add the number to the new set `new_s`\n                    new_s.push_back(x);\n                    // add `new_s` to `tmp_s` instead of `s`\n                    // because we are iterating `s`\n                    tmp_s.insert(new_s);\n                    \n                }\n            }\n            // add the result back to `s`\n            s.insert(tmp_s.begin(), tmp_s.end());\n        }\n        // iterate the set to build the final answer\n        for (auto x : s) {\n            // non-decreasing subsequences at least two elements\n            if (x.size() >= 2) {\n                ans.push_back(x);\n            }\n        }\n        return ans;\n    }\n};\n"})})]})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);