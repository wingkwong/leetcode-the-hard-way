"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[90839],{60726:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"0100-0199/sort-list-medium","title":"0148 - Sort List (Medium)","description":"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/","source":"@site/solutions/0100-0199/0148-sort-list-medium.md","sourceDirName":"0100-0199","slug":"/0100-0199/sort-list-medium","permalink":"/solutions/0100-0199/sort-list-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0148-sort-list-medium.md","tags":[],"version":"current","sidebarPosition":148,"frontMatter":{"description":"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/"},"sidebar":"tutorialSidebar","previous":{"title":"0146 - LRU Cache (Medium)","permalink":"/solutions/0100-0199/lru-cache-medium"},"next":{"title":"0150 - Evaluate Reverse Polish Notation (Medium)","permalink":"/solutions/0100-0199/evaluate-reverse-olish-notation-medium"}}');var i=t(86070),l=t(40629);const a={description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/"},r="0148 - Sort List (Medium)",o={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Recursive Merge Sort",id:"approach-1-recursive-merge-sort",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{SolutionAuthor:t,TabItem:s,Tabs:a}=n;return t||m("SolutionAuthor",!0),s||m("TabItem",!0),a||m("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"0148---sort-list-medium",children:"0148 - Sort List (Medium)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/sort-list/",children:"https://leetcode.com/problems/sort-list/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["Given the ",(0,i.jsx)(n.code,{children:"head"})," of a linked list, return ",(0,i.jsxs)(n.em,{children:["the list after sorting it in ",(0,i.jsx)(n.strong,{children:"ascending order"})]}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg",alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = [4,2,1,3]\nOutput: [1,2,3,4]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg",alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = []\nOutput: []\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The number of nodes in the list is in the range ",(0,i.jsx)(n.code,{children:"[0, 5 * 10^4]"}),"."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"-10^5 <= Node.val <= 10^5"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Follow up:"})," Can you sort the linked list in ",(0,i.jsx)(n.code,{children:"O(n logn)"})," time and ",(0,i.jsx)(n.code,{children:"O(1)"})," memory (i.e. constant space)?"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-recursive-merge-sort",children:"Approach 1: Recursive Merge Sort"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Find the middle node and cut the head reference till middle node"}),"\n",(0,i.jsx)(n.li,{children:"Keep reducing the nodes size to smaller for comparison (same as like merge sort)"}),"\n",(0,i.jsx)(n.li,{children:"Once we reduce nodes size to 1, merge the nodes in sorted (ascending) order."}),"\n",(0,i.jsx)(n.li,{children:"Keep merging the nodes till last, to build the sorted list."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Time Complexity: ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"O"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"l"}),(0,i.jsx)(n.mi,{children:"o"}),(0,i.jsx)(n.mi,{children:"g"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n log(n))"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mclose",children:"))"})]})})]}),", where ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsx)(n.mi,{children:"n"})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]})," - # of nodes in the list"]}),"\n",(0,i.jsxs)(n.p,{children:["Space complexity: ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"O"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mclose",children:")"})]})})]}),", ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsx)(n.mi,{children:"n"})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]})," - recursive call stack"]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsxs)(s,{value:"java",label:"Java",children:[(0,i.jsx)(t,{name:"@vigneshshiv"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (Objects.isNull(head) || Objects.isNull(head.next)) {\n            return head;\n        }\n        // Middle node\n        ListNode mid = middleNode(head);\n        // Keep traversing left to get the smallest nodes for comparison (smallest we can get is 1 node)\n        ListNode left = sortList(head);\n        // Starting from middle, to find the smallest nodes for comparison\n        ListNode right = sortList(mid);\n        // Compare the list and return the merged nodes\n        return mergeTwoLists(left, right);\n    }\n\n    public ListNode middleNode(ListNode head) {\n        ListNode midPrev = null;\n        //\n        while (head != null && head.next != null) {\n            midPrev = (midPrev == null) ? head : midPrev.next;\n            head = head.next.next;\n        }\n        ListNode mid = midPrev.next;\n        // Cut the reference to the next pointer (mid), so that head remains from start to mid.\n        midPrev.next = null;\n        return mid;\n    }\n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Base case\n        if (Objects.isNull(list1) && Objects.isNull(list2)) {\n            return list1;\n        }\n        if (Objects.isNull(list1)) {\n            return list2;\n        }\n        if (Objects.isNull(list2)) {\n            return list1;\n        }\n        ListNode head = new ListNode();\n        ListNode node = head;\n        while (Objects.nonNull(list1) && Objects.nonNull(list2)) {\n            if (list1.val <= list2.val) {\n                node.next = list1;\n                list1 = list1.next;\n            } else {\n                node.next = list2;\n                list2 = list2.next;\n            }\n            node = node.next;\n        }\n        // If either of half is not empty then append it\n        node.next = Objects.nonNull(list1) ? list1 : list2;\n        return head.next;\n    }\n}\n"})})]}),(0,i.jsxs)(s,{value:"python",label:"Python",children:[(0,i.jsx)(t,{name:"@radojicic23"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head):\n        # Base case\n        if not head or not head.next:\n            return head\n\n        # split the list into two halfs\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        start = slow.next\n        slow.next = None\n\n        # Sort left portion\n        left = self.sortList(head)\n        # Sort right portion\n        right = self.sortList(start)\n        # Merge them and return\n        return self.merge(left, right)\n\n    def merge(self, list1, list2):\n        tail = dummy = ListNode()\n        # while list1 and list2 are not empty\n        while list1 and list2:\n            # Find smaller value\n            if list1.val < list2.val:\n                tail.next = list1\n                list1 = list1.next\n            else:\n                tail.next = list2\n                list2 = list2.next\n            tail = tail.next\n        # it's possible that one of two lists are not empty\n        if list1:\n            tail.next = list1\n        if list2:\n            tail.next = list2\n\n        return dummy.next\n"})})]}),(0,i.jsxs)(s,{value:"javascript",label:"JavaScript",children:[(0,i.jsx)(t,{name:"@radojicic23"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar sortList = function (head) {\n  // base case\n  if (!head || !head.next) return head;\n  // split the list into two halfs\n  // two pointers\n  let slow = head;\n  let fast = head.next;\n  while (fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  let start = slow.next;\n  slow.next = null;\n  // sort left portion\n  let left = sortList(head);\n  // sort right portion\n  let right = sortList(start);\n  // merge them and return\n  return merge(left, right);\n};\n// merge sort function\nfunction merge(list1, list2) {\n  let tail = (dummy = new ListNode());\n  // while list1 and list2 are not empty\n  while (list1 && list2) {\n    // find smaller value\n    if (list1.val < list2.val) {\n      tail.next = list1;\n      list1 = list1.next;\n    } else {\n      tail.next = list2;\n      list2 = list2.next;\n    }\n    tail = tail.next;\n  }\n  // it's possible that one of two lists are not empty\n  if (list1) tail.next = list1;\n  if (list2) tail.next = list2;\n  return dummy.next;\n}\n"})})]}),(0,i.jsxs)(s,{value:"cpp",label:"C++",children:[(0,i.jsx)(t,{name:"@radojicic23"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        // base case\n        if (head == NULL || head->next == NULL) return head;\n        // split list into two halfs\n        // slow and fast pointer\n        ListNode* slow = head;\n        ListNode* fast = head->next;\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        ListNode* start = slow->next;\n        slow->next = NULL;\n        // sort left portion\n        ListNode* left = sortList(head);\n        // sort right portion\n        ListNode* right = sortList(start);\n        // merge left and right portion\n        return merge(left, right);\n    }\n    // merge sort function\n    ListNode* merge(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode(0);\n        ListNode* tail = dummy;\n        // while both lists are not empty\n        while (list1 && list2) {\n            // find smaller value\n            if (list1->val < list2->val) {\n                tail->next = list1;\n                list1 = list1->next;\n            } else {\n                tail->next = list2;\n                list2 = list2->next;\n            }\n            tail = tail->next;\n        }\n        // it's possible that one of two lists are not empty\n        if (list1) tail->next = list1;\n        if (list2) tail->next = list2;\n        return dummy->next;\n    }\n};\n"})})]})]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40629:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(30758);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);