"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[89350],{10682:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"1400-1499/number-of-ways-to-wear-different-hats-to-each-other-hard","title":"1434 - Number of Ways to Wear Different Hats to Each Other (Hard)","description":"Author: @wkw | https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/","source":"@site/solutions/1400-1499/1434-number-of-ways-to-wear-different-hats-to-each-other-hard.md","sourceDirName":"1400-1499","slug":"/1400-1499/number-of-ways-to-wear-different-hats-to-each-other-hard","permalink":"/solutions/1400-1499/number-of-ways-to-wear-different-hats-to-each-other-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1400-1499/1434-number-of-ways-to-wear-different-hats-to-each-other-hard.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"},{"inline":true,"label":"Dynamic Programming","permalink":"/solutions/tags/dynamic-programming"},{"inline":true,"label":"Bit Manipulation","permalink":"/solutions/tags/bit-manipulation"},{"inline":true,"label":"Bitmask","permalink":"/solutions/tags/bitmask"}],"version":"current","sidebarPosition":1434,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/","tags":["Array","Dynamic Programming","Bit Manipulation","Bitmask"]},"sidebar":"tutorialSidebar","previous":{"title":"1431 - Kids With the Greatest Number of Candies (Easy)","permalink":"/solutions/1400-1499/kids-with-the-greatest-number-of-candies-easy"},"next":{"title":"1443 - Minimum Time to Collect All Apples in a Tree (Medium)","permalink":"/solutions/1400-1499/minimum-time-to-collect-all-apples-in-a-tree"}}');var o=n(86070),a=n(40629);const s={description:"Author: @wkw | https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/",tags:["Array","Dynamic Programming","Bit Manipulation","Bitmask"]},i="1434 - Number of Ways to Wear Different Hats to Each Other (Hard)",h={},l=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"1434---number-of-ways-to-wear-different-hats-to-each-other-hard",children:"1434 - Number of Ways to Wear Different Hats to Each Other (Hard)"})}),"\n",(0,o.jsx)(t.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(t.p,{children:["There are ",(0,o.jsx)(t.code,{children:"n"})," people and ",(0,o.jsx)(t.code,{children:"40"})," types of hats labeled from ",(0,o.jsx)(t.code,{children:"1"})," to ",(0,o.jsx)(t.code,{children:"40"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Given a 2D integer array ",(0,o.jsx)(t.code,{children:"hats"}),", where ",(0,o.jsx)(t.code,{children:"hats[i]"})," is a list of all hats preferred by the ",(0,o.jsx)(t.code,{children:"ith"})," person."]}),"\n",(0,o.jsxs)(t.p,{children:["Return ",(0,o.jsx)(t.em,{children:"the number of ways that the n people wear different hats to each other"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Since the answer may be too large, return it modulo ",(0,o.jsx)(t.code,{children:"1e9 + 7"}),"."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Input: hats = [[3,4],[4,5],[5]]\nOutput: 1\nExplanation: There is only one way to choose hats given the conditions.\nFirst person choose hat 3, Second person choose hat 4 and last one hat 5.\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Input: hats = [[3,5,1],[3,5]]\nOutput: 4\nExplanation: There are 4 ways to choose hats:\n(3,5), (5,3), (1,3) and (1,5)\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nOutput: 24\nExplanation: Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24.\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"n == hats.length"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"1 <= n <= 10"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"1 <= hats[i].length <= 40"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"1 <= hats[i][j] <= 40"})}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"hats[i]"})," contains a list of ",(0,o.jsx)(t.strong,{children:"unique"})," integers."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"approach-1-dynamic-programming",children:"Approach 1: Dynamic Programming"}),"\n",(0,o.jsx)(n,{name:"@wkw"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int n, M = 1e9 + 7;\n\n    int dfs(vector<vector<int>>& hatsToPeople, vector<vector<int>>& dp, int hat, int mask) {\n        // if the mask is able to reache the end state,\n        // i.e. all people can wear some hats, then return 1\n        if (mask == (1 << n) - 1) return 1;\n        // if the current hat is out of 40, return 0\n        if (hat > 40) return 0;\n        // if we calculated the result before, return it directly\n        if (dp[mask][hat] != -1) return dp[mask][hat];\n        // get number of ways if we skip this hat\n        long res = dfs(hatsToPeople, dp, hat + 1, mask);\n        // since the current hat can be assigned to different people\n        // we try all of them\n        for (auto& person: hatsToPeople[hat]) {\n            // if this person has been assigned with a hat, then skip it\n            if ((1 << person) & mask) continue;\n            // then we can assign this hat to this person\n            (res += dfs(hatsToPeople, dp, hat + 1, mask | (1 << person))) %= M;\n        }\n        // memoize the result\n        return dp[mask][hat] = res;\n    }\n\n    int numberWays(vector<vector<int>>& hats) {\n        // number of people\n        n = hats.size();\n        // for each hat, we map to different people\n        vector<vector<int>> hatsToPeople(41);\n        // iterate each person\n        for (int i = 0; i < n; i++) {\n            // iterate i-th person's preferred hats\n            for (auto &h : hats[i]) {\n                // assign hat h to person i\n                hatsToPeople[h].push_back(i);\n            }\n        }\n        // init dp\n        vector<vector<int>> dp(1 << n, vector<int>(41, -1));\n        // dfs\n        return dfs(hatsToPeople, dp, 1, 0);\n    }\n};\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},40629:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(30758);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);