"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[7986],{86296:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"0800-0899/boats-to-save-people-medium","title":"0881 - Boats to Save People (Medium)","description":"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/boats-to-save-people/","source":"@site/solutions/0800-0899/0881-boats-to-save-people-medium.md","sourceDirName":"0800-0899","slug":"/0800-0899/boats-to-save-people-medium","permalink":"/solutions/0800-0899/boats-to-save-people-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0881-boats-to-save-people-medium.md","tags":[],"version":"current","sidebarPosition":881,"frontMatter":{"description":"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/boats-to-save-people/"},"sidebar":"tutorialSidebar","previous":{"title":"0877 - Stone Game (Medium)","permalink":"/solutions/0800-0899/stone-game-medium"},"next":{"title":"0896 - Monotonic Array (Easy)","permalink":"/solutions/0800-0899/monotonic-array-easy"}}');var i=t(74848),s=t(28453);const r={description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/boats-to-save-people/"},l="0881 - Boats to Save People (Medium)",a={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}];function p(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{SolutionAuthor:t,TabItem:o,Tabs:r}=n;return t||h("SolutionAuthor",!0),o||h("TabItem",!0),r||h("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"0881---boats-to-save-people-medium",children:"0881 - Boats to Save People (Medium)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/boats-to-save-people/",children:"https://leetcode.com/problems/boats-to-save-people/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["You are given an array ",(0,i.jsx)(n.code,{children:"people"})," where ",(0,i.jsx)(n.code,{children:"people[i]"})," is the weight of the ",(0,i.jsx)(n.code,{children:"ith"})," person, and an ",(0,i.jsx)(n.strong,{children:"infinite number of boats"})," where each boat can carry a maximum weight of ",(0,i.jsx)(n.code,{children:"limit"}),". Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most ",(0,i.jsx)(n.code,{children:"limit"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Return ",(0,i.jsx)(n.em,{children:"the minimum number of boats to carry every given person"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= people.length <= 5 * 10^4"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= people[i] <= limit <= 3 * 10^4"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-greedy",children:"Approach 1: Greedy"}),"\n",(0,i.jsxs)(n.p,{children:["Let's sort the input. We know that the maximum weight is at most ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"l"}),(0,i.jsx)(n.mi,{children:"i"}),(0,i.jsx)(n.mi,{children:"m"}),(0,i.jsx)(n.mi,{children:"i"}),(0,i.jsx)(n.mi,{children:"t"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"limit"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"imi"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"t"})]})})]}),". The best way to choose the maximum weight first. Then we check if we could include one more (the minimum one). We can use two pointers to track the minimum one and the maximum one."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)(o,{value:"cpp",label:"C++",children:[(0,i.jsx)(t,{name:"@wingkwong"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int numRescueBoats(vector<int>& people, int limit) {\n        // sort the input so that we can use two pointers from both side\n        sort(people.begin(), people.end());\n        // init variables\n        int n = people.size(), ans = 0, i = 0, j = n - 1;\n        // do the following logic until both pointer meets each other\n        while (i <= j) {\n            // first we pick the maximum none\n            int pick = people[j];\n            // we check the remaining capacity\n            int left = limit - pick;\n            // if we can include the minimum one, then take it as well\n            if (people[i] <= left) {\n                // need one boat for i-th person and j-th person\n                ans++;\n                // increase both pointer\n                i++, j--;\n            } else {\n                // need one boat for the j-th person\n                ans++;\n                // move the max pointer\n                j--;\n            }\n        }\n        return ans;\n    }\n};\n"})}),(0,i.jsx)(n.p,{children:"Once we get the idea, we can further refactor the solution."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int numRescueBoats(vector<int>& people, int limit) {\n        sort(people.begin(), people.end());\n        int n = people.size(), ans = 0, i = 0, j = n - 1;\n        while (i <= j) {\n            // move the min pointer only i-th person is included \n            i += people[j] + people[i] <= limit;\n            // need one boat for each round\n            // move the max pointer as it is always chosen\n            ans++, j--;\n        }        \n        return ans;\n    }\n};\n"})})]}),(0,i.jsxs)(o,{value:"python",label:"Python",children:[(0,i.jsx)(t,{name:"@radojicic23"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        l, r = 0, len(people) - 1\n        res = 0 \n\n        while l <= r:\n            if people[l] + people[r] <= limit:\n                res += 1 \n                l += 1\n                r -= 1\n            else:\n                res += 1\n                r -= 1\n        return res \n"})})]}),(0,i.jsxs)(o,{value:"javascript",label:"JavaScript",children:[(0,i.jsx)(t,{name:"@radojicic23"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n    people.sort(function(a, b) {return a - b});\n    let l = 0;\n    let r = people.length - 1;\n    let res = 0;\n    while (l <= r) {\n        if (people[l] + people[r] <= limit) {\n            res += 1;\n            l += 1;\n            r -= 1;\n        } else {\n            res += 1;\n            r -= 1;\n        }\n    }\n    return res;\n};\n"})})]})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);