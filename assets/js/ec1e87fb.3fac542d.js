"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[54714],{65491:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"0100-0199/linked-list-cycle","title":"0141 - Linked List Cycle (Easy)","description":"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/","source":"@site/solutions/0100-0199/0141-linked-list-cycle.md","sourceDirName":"0100-0199","slug":"/0100-0199/linked-list-cycle","permalink":"/solutions/0100-0199/linked-list-cycle","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0141-linked-list-cycle.md","tags":[{"inline":true,"label":"Hash Table","permalink":"/solutions/tags/hash-table"},{"inline":true,"label":"Linked List","permalink":"/solutions/tags/linked-list"},{"inline":true,"label":"Two Pointers","permalink":"/solutions/tags/two-pointers"}],"version":"current","sidebarPosition":141,"frontMatter":{"description":"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/","tags":["Hash Table","Linked List","Two Pointers"]},"sidebar":"tutorialSidebar","previous":{"title":"0139 - Word Break (Medium)","permalink":"/solutions/0100-0199/word-break-medium"},"next":{"title":"0143 - Reorder List (Medium)","permalink":"/solutions/0100-0199/reorder-list-medium"}}');var s=t(86070),l=t(32790);const o={description:"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/",tags:["Hash Table","Linked List","Two Pointers"]},r="0141 - Linked List Cycle (Easy)",a={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{SolutionAuthor:t,TabItem:i,Tabs:o}=n;return t||u("SolutionAuthor",!0),i||u("TabItem",!0),o||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"0141---linked-list-cycle-easy",children:"0141 - Linked List Cycle (Easy)"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/linked-list-cycle/",children:"https://leetcode.com/problems/linked-list-cycle/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["Given ",(0,s.jsx)(n.code,{children:"head"}),", the head of a linked list, determine if the linked list has a cycle in it."]}),"\n",(0,s.jsxs)(n.p,{children:["There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the ",(0,s.jsx)(n.code,{children:"next"})," pointer. Internally, ",(0,s.jsx)(n.code,{children:"pos"})," is used to denote the index of the node that tail's ",(0,s.jsx)(n.code,{children:"next"})," pointer is connected to. ",(0,s.jsxs)(n.strong,{children:["Note that ",(0,s.jsx)(n.code,{children:"pos"})," is not passed as a parameter"]}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Return ",(0,s.jsx)(n.code,{children:"true"})," ",(0,s.jsx)(n.em,{children:"if there is a cycle in the linked list"}),". Otherwise, return ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png",alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The number of the nodes in the list is in the range ",(0,s.jsx)(n.code,{children:"[0, 10^4]"}),"."]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"-10^5 <= Node.val <= 10^5"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pos"})," is ",(0,s.jsx)(n.code,{children:"-1"})," or a ",(0,s.jsx)(n.strong,{children:"valid index"})," in the linked-list."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Follow up:"})," Can you solve it using ",(0,s.jsx)(n.code,{children:"O(1)"})," (i.e. constant) memory?"]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-two-pointers",children:"Approach 1: Two Pointers"}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsxs)(i,{value:"cs",label:"C#",children:[(0,s.jsx)(t,{name:"@lonyehan"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public bool HasCycle(ListNode head) {\n        ListNode slowPointer = head;\n        ListNode quickPointer = head;\n\n        if(head == null) return false;\n\n        while(head != null) {\n            // slow pointer, move one step each time.\n            slowPointer = slowPointer.next;\n            if(slowPointer == null) return false;\n\n            // quick pointer, move two steps each time.\n            quickPointer = quickPointer?.next?.next;\n            if(quickPointer == null) return false;\n\n            // slow pointer meets quick pointer means that there is a cycle in this linked list\n            if(slowPointer == quickPointer) return true;\n        }\n\n        return false;\n    }\n}\n"})})]}),(0,s.jsxs)(i,{value:"py",label:"Python",children:[(0,s.jsx)(t,{name:"@vale-c"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slowPointer = head\n        quickPointer = head\n\n        if head == None:\n            return False\n\n        while head != None:\n            # slow pointer, move one step each time.\n            slowPointer = slowPointer.next\n            if slowPointer == None:\n                return False\n\n            # quick pointer, move two steps each time.\n            quickPointer = quickPointer.next.next if quickPointer.next != None else None\n            if quickPointer == None:\n                return False\n\n            # slow pointer meets quick pointer means that there is a cycle in this linked list\n            if slowPointer == quickPointer:\n                return True\n\n        return False\n"})})]}),(0,s.jsxs)(i,{value:"java",label:"Java",children:[(0,s.jsx)(t,{name:"@vigneshshiv"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\n// Time complexity: O(n), where n - # of nodes in the list\n// Space complexity: O(1)\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null) return false;\n        // Fast & Slow pointer\n        ListNode slow = head;\n        ListNode fast = head;\n        // Fast Reference to check if it's not null, because it's traverse twice as fast as slow\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            // If both meet at the same node then there is a loop\n            if (slow == fast) {\n                return true;\n            }\n        }\n        // If no loop, fast pointer at the end reached it's last node null pointer\n        return false;\n    }\n}\n"})})]}),(0,s.jsxs)(i,{value:"javascript",label:"JavaScript",children:[(0,s.jsx)(t,{name:"@radojicic23"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar hasCycle = function (head) {\n  let slow = head;\n  let fast = head;\n\n  while (fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next;\n    if (slow == fast) {\n      return true;\n    }\n  }\n  return false;\n};\n"})})]}),(0,s.jsxs)(i,{value:"cpp",label:"C++",children:[(0,s.jsx)(t,{name:"@radojicic23"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n"})})]})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},32790:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(30758);const s={},l=i.createContext(s);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);