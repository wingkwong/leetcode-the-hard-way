"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[9904],{13113:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"2100-2199/minimum-operations-to-make-the-array-alternating-medium","title":"2170 - Minimum Operations to Make the Array Alternating (Medium)","description":"Author: @heiheihang | https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/","source":"@site/solutions/2100-2199/2170-minimum-operations-to-make-the-array-alternating-medium.md","sourceDirName":"2100-2199","slug":"/2100-2199/minimum-operations-to-make-the-array-alternating-medium","permalink":"/solutions/2100-2199/minimum-operations-to-make-the-array-alternating-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2170-minimum-operations-to-make-the-array-alternating-medium.md","tags":[],"version":"current","sidebarPosition":2170,"frontMatter":{"description":"Author: @heiheihang | https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/"},"sidebar":"tutorialSidebar","previous":{"title":"2169 - Count Operations to Obtain Zero (Easy)","permalink":"/solutions/2100-2199/count-operations-to-obtain-zero-easy"},"next":{"title":"2171 - Removing Minimum Number of Magic Beans (Medium)","permalink":"/solutions/2100-2199/removing-minimum-number-of-magic-beans-medium"}}');var i=t(74848),o=t(28453);const s={description:"Author: @heiheihang | https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/"},a="2170 - Minimum Operations to Make the Array Alternating (Medium)",d={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Frequency Table",id:"approach-1-frequency-table",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"2170---minimum-operations-to-make-the-array-alternating-medium",children:"2170 - Minimum Operations to Make the Array Alternating (Medium)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/",children:"https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["You are given a ",(0,i.jsx)(n.strong,{children:"0-indexed"})," array ",(0,i.jsx)(n.code,{children:"nums"})," consisting of ",(0,i.jsx)(n.code,{children:"n"})," positive integers."]}),"\n",(0,i.jsxs)(n.p,{children:["The array ",(0,i.jsx)(n.code,{children:"nums"})," is called ",(0,i.jsx)(n.strong,{children:"alternating"})," if:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"nums[i - 2] == nums[i]"}),", where ",(0,i.jsx)(n.code,{children:"2 <= i <= n - 1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"nums[i - 1] != nums[i]"}),", where ",(0,i.jsx)(n.code,{children:"1 <= i <= n - 1"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In one ",(0,i.jsx)(n.strong,{children:"operation"}),", you can choose an index ",(0,i.jsx)(n.code,{children:"i"})," and ",(0,i.jsx)(n.strong,{children:"change"})," ",(0,i.jsx)(n.code,{children:"nums[i]"})," into ",(0,i.jsx)(n.strong,{children:"any"})," positive integer."]}),"\n",(0,i.jsxs)(n.p,{children:["Return ",(0,i.jsxs)(n.em,{children:["the ",(0,i.jsx)(n.strong,{children:"minimum number of operations"})," required to make the array alternating"]}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: nums = [3,1,3,2,4,3]\nOutput: 3\nExplanation:\nOne way to make the array alternating is by converting it to [3,1,3,1,3,1].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations. \n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: nums = [1,2,2,2,2]\nOutput: 2\nExplanation:\nOne way to make the array alternating is by converting it to [1,2,1,2,1].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= nums.length <= 10^5"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= nums[i] <= 10^5"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-frequency-table",children:"Approach 1: Frequency Table"}),"\n",(0,i.jsxs)(n.p,{children:["First, we need to separate the numbers at odd positions (",(0,i.jsx)(n.code,{children:"odd"}),") and even positions (",(0,i.jsx)(n.code,{children:"even"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["We are only interested in the top 2 most frequent elements in ",(0,i.jsx)(n.code,{children:"odd"})," and ",(0,i.jsx)(n.code,{children:"even"}),". We have the following cases:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The most frequent element from ",(0,i.jsx)(n.code,{children:"odd"})," and ",(0,i.jsx)(n.code,{children:"even"})," are different"]}),"\n",(0,i.jsxs)(n.li,{children:["The most frequent element from ",(0,i.jsx)(n.code,{children:"odd"})," and ",(0,i.jsx)(n.code,{children:"even"})," are the same"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Case 1 is simple, we just change all other elements from the original list to those 2 elements."}),"\n",(0,i.jsxs)(n.p,{children:["Case 2 is trickier, because we have two possibilities now. As we cannot pick the two top 1 frequent elements from ",(0,i.jsx)(n.code,{children:"odd"})," and ",(0,i.jsx)(n.code,{children:"even"}),", we need to inspect the second most frequent element as well. We then have the following two combination:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"mostFrequentOdd + secondMostFrequentEven"}),"\n",(0,i.jsx)(n.li,{children:"mostFrequentEven + secondMostFrequentOdd"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We pick the larger of the two, and change all other elements to those numbers."}),"\n",(0,i.jsx)(t,{name:"@heiheihang"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def minimumOperations(self, nums: List[int]) -> int:\n    if(len(nums) == 1):\n        return 0\n    \n    #create frequency table for odd and even\n    odd = defaultdict(int)\n    even = defaultdict(int)\n        \n    #populate the frequency tables\n    for i in range(len(nums)):\n        if(i % 2 == 0):\n            even[nums[i]] += 1\n        else:\n            odd[nums[i]] += 1\n    \n    #store the [frequency, value] pair to the lists\n    evens = []\n    odds = []\n    for k in odd:\n        odds.append([odd[k], k])\n    for k in even:\n        evens.append([even[k] , k])\n        \n    #reverse to access the largest elements        \n    odds.sort(reverse = True)\n    evens.sort(reverse = True)\n    \n    #case 1: most frequent elements are not equal, then take both\n    if(odds[0][1] != evens[0][1]):\n        return len(nums) - odds[0][0] - evens[0][0]\n    else:\n    \n        #case 2: find second most frequent element\n        odd_second = 0\n        even_second = 0\n        if(len(odds) > 1):\n            odd_second = odds[1][0]\n        if(len(evens) > 1):\n            even_second = evens[1][0]\n            \n        #return the larger result\n        return min(len(nums) - odds[0][0] - even_second, len(nums) - evens[0][0] - odd_second)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);