"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[92332],{39082:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"0800-0899/monotonic-array-easy","title":"0896 - Monotonic Array (Easy)","description":"Author: @wkw | https://leetcode.com/problems/monotonic-array/","source":"@site/solutions/0800-0899/0896-monotonic-array-easy.md","sourceDirName":"0800-0899","slug":"/0800-0899/monotonic-array-easy","permalink":"/solutions/0800-0899/monotonic-array-easy","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0896-monotonic-array-easy.md","tags":[{"inline":true,"label":"Array","permalink":"/solutions/tags/array"}],"version":"current","sidebarPosition":896,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/monotonic-array/","tags":["Array"]},"sidebar":"tutorialSidebar","previous":{"title":"0881 - Boats to Save People (Medium)","permalink":"/solutions/0800-0899/boats-to-save-people-medium"},"next":{"title":"0899 - Orderly Queue (Hard)","permalink":"/solutions/0800-0899/orderly-queue-hard"}}');var t=o(86070),i=o(68906);const s={description:"Author: @wkw | https://leetcode.com/problems/monotonic-array/",tags:["Array"]},c="0896 - Monotonic Array (Easy)",a={},l=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Loops",id:"approach-1-two-loops",level:2},{value:"Approach 2: One Pass",id:"approach-2-one-pass",level:2}];function d(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components},{SolutionAuthor:o}=e;return o||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"0896---monotonic-array-easy",children:"0896 - Monotonic Array (Easy)"})}),"\n",(0,t.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(e.p,{children:["An array is ",(0,t.jsx)(e.strong,{children:"monotonic"})," if it is either monotone increasing or monotone decreasing."]}),"\n",(0,t.jsxs)(e.p,{children:["An array ",(0,t.jsx)(e.code,{children:"nums"})," is monotone increasing if for all ",(0,t.jsx)(e.code,{children:"i <= j"}),", ",(0,t.jsx)(e.code,{children:"nums[i] <= nums[j]"}),". An array ",(0,t.jsx)(e.code,{children:"nums"})," is monotone decreasing if for all ",(0,t.jsx)(e.code,{children:"i <= j"}),", ",(0,t.jsx)(e.code,{children:"nums[i] >= nums[j]"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["Given an integer array ",(0,t.jsx)(e.code,{children:"nums"}),", return ",(0,t.jsx)(e.code,{children:"true"}),(0,t.jsx)(e.em,{children:"if the given array is monotonic, or"}),(0,t.jsx)(e.code,{children:"false"}),(0,t.jsx)(e.em,{children:"otherwise"}),"."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [1,2,2,3]\nOutput: true\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [6,5,4,4]\nOutput: true\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [1,3,2]\nOutput: false\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"1 <= nums.length <= 10^5"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"-10^5 <= nums[i] <= 10^5"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"approach-1-two-loops",children:"Approach 1: Two Loops"}),"\n",(0,t.jsx)(o,{name:"@wkw"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    bool isMonotonic(vector<int>& nums) {\n        int n = nums.size(), ok = 1;\n        // check for monotone increasing\n        for (int i = 1 ; i < n; i++) ok &= nums[i - 1] <= nums[i];\n        // if it is monotone increasing, return true\n        if (ok) return true;\n        // reset ok\n        ok = 1;\n        // check for monotone decreasing\n        for (int i = n - 2; i >= 0; i--) ok &= nums[i] >= nums[i + 1];\n        // return the answer\n        return ok;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"approach-2-one-pass",children:"Approach 2: One Pass"}),"\n",(0,t.jsx)(o,{name:"@wkw"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    bool isMonotonic(vector<int>& nums) {\n        int n = nums.size(), inc = 1, dec = 1;\n        for (int i = 1 ; i < n; i++) {\n            // check for monotone increasing\n            inc &= nums[i - 1] <= nums[i];\n            // check for monotone decreasing\n            dec &= nums[i - 1] >= nums[i];\n        }\n        // the given is monotonic if either one is true\n        return inc || dec;\n    }\n};\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},68906:(n,e,o)=>{o.d(e,{R:()=>s,x:()=>c});var r=o(30758);const t={},i=r.createContext(t);function s(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);