"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[8158],{88133:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"2300-2399/number-of-excellent-pairs-hard","title":"2354 - Number of Excellent Pairs (Hard)","description":"Author: @wkw | https://leetcode.com/problems/number-of-excellent-pairs/","source":"@site/solutions/2300-2399/2354-number-of-excellent-pairs-hard.md","sourceDirName":"2300-2399","slug":"/2300-2399/number-of-excellent-pairs-hard","permalink":"/solutions/2300-2399/number-of-excellent-pairs-hard","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2354-number-of-excellent-pairs-hard.md","tags":[],"version":"current","sidebarPosition":2354,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/number-of-excellent-pairs/"},"sidebar":"tutorialSidebar","previous":{"title":"2352 - Equal Row and Column Pairs (Medium)","permalink":"/solutions/2300-2399/equal-row-and-column-pairs-medium"},"next":{"title":"2357 - Make Array Zero by Subtracting Equal Amounts (Easy)","permalink":"/solutions/2300-2399/make-array-zero-by-subtracting-equal-amounts-easy"}}');var i=s(86070),a=s(68906);const r={description:"Author: @wkw | https://leetcode.com/problems/number-of-excellent-pairs/"},l="2354 - Number of Excellent Pairs (Hard)",o={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach: Bit Manipulation",id:"approach-bit-manipulation",level:2}];function m(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{SolutionAuthor:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"2354---number-of-excellent-pairs-hard",children:"2354 - Number of Excellent Pairs (Hard)"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-excellent-pairs/",children:"https://leetcode.com/problems/number-of-excellent-pairs/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["You are given a ",(0,i.jsx)(n.strong,{children:"0-indexed"})," positive integer array ",(0,i.jsx)(n.code,{children:"nums"})," and a positive integer ",(0,i.jsx)(n.code,{children:"k"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A pair of numbers ",(0,i.jsx)(n.code,{children:"(num1, num2)"})," is called ",(0,i.jsx)(n.strong,{children:"excellent"})," if the following conditions are satisfied:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Both"})," the numbers ",(0,i.jsx)(n.code,{children:"num1"})," and ",(0,i.jsx)(n.code,{children:"num2"})," exist in the array ",(0,i.jsx)(n.code,{children:"nums"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The sum of the number of set bits in ",(0,i.jsx)(n.code,{children:"num1 OR num2"})," and ",(0,i.jsx)(n.code,{children:"num1 AND num2"})," is greater than or equal to ",(0,i.jsx)(n.code,{children:"k"}),", where ",(0,i.jsx)(n.code,{children:"OR"})," is the bitwise ",(0,i.jsx)(n.strong,{children:"OR"})," operation and ",(0,i.jsx)(n.code,{children:"AND"})," is the bitwise ",(0,i.jsx)(n.strong,{children:"AND"})," operation."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Return ",(0,i.jsxs)(n.em,{children:["the number of ",(0,i.jsx)(n.strong,{children:"distinct"})," excellent pairs"]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Two pairs ",(0,i.jsx)(n.code,{children:"(a, b)"})," and ",(0,i.jsx)(n.code,{children:"(c, d)"})," are considered distinct if either ",(0,i.jsx)(n.code,{children:"a != c"})," or ",(0,i.jsx)(n.code,{children:"b != d"}),". For example, ",(0,i.jsx)(n.code,{children:"(1, 2)"})," and ",(0,i.jsx)(n.code,{children:"(2, 1)"})," are distinct."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"})," that a pair ",(0,i.jsx)(n.code,{children:"(num1, num2)"})," such that ",(0,i.jsx)(n.code,{children:"num1 == num2"})," can also be excellent if you have at least ",(0,i.jsx)(n.strong,{children:"one"})," occurrence of ",(0,i.jsx)(n.code,{children:"num1"})," in the array. "]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: nums = [1,2,3,1], k = 3\nOutput: 5\nExplanation: The excellent pairs are the following:\n- (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3.\n- (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\n- (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\nSo the number of excellent pairs is 5.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: nums = [5,1,1], k = 10\nOutput: 0\nExplanation: There are no excellent pairs for this array.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= nums.length <= 10^5"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= nums[i] <= 10^9"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= k <= 60"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-bit-manipulation",children:"Approach: Bit Manipulation"}),"\n",(0,i.jsx)(n.p,{children:"For num1 OR num2, it is equal to the number of set bits of num1. For num1 AND num2, it is equal to the number of set bits of num2. Therefore, the sum of the number of set bits in (num1 OR num2) and (num1 AND num2) is equal to the sum of the number of set bits in num1 and num2."}),"\n",(0,i.jsxs)(n.p,{children:["We can iterate each number and count the frequency of the set bits ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"m"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"["}),(0,i.jsx)(n.mi,{children:"b"}),(0,i.jsx)(n.mi,{children:"i"}),(0,i.jsx)(n.mi,{children:"t"}),(0,i.jsx)(n.mi,{children:"s"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"]"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"m[bits]"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,i.jsx)(n.span,{className:"mopen",children:"["}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"bi"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,i.jsx)(n.span,{className:"mclose",children:"]"})]})})]}),". Then we can try all combinations to check if the sum of the number of set bits in num1 and num2 is greater than or equal to ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsx)(n.mi,{children:"k"})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]}),". If so, the number of pairs would be ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"m"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"["}),(0,i.jsx)(n.mi,{children:"i"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"]"}),(0,i.jsx)(n.mo,{children:"\u2217"}),(0,i.jsx)(n.mi,{children:"m"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"["}),(0,i.jsx)(n.mi,{children:"j"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"]"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"m[i] * m[j]"})]})})}),(0,i.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,i.jsx)(n.span,{className:"mopen",children:"["}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"i"}),(0,i.jsx)(n.span,{className:"mclose",children:"]"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(n.span,{className:"mbin",children:"\u2217"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,i.jsx)(n.span,{className:"mopen",children:"["}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"}),(0,i.jsx)(n.span,{className:"mclose",children:"]"})]})]})]}),"."]}),"\n",(0,i.jsx)(s,{name:"@wkw"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    long long countExcellentPairs(vector<int>& nums, int k) {\n        long long ans = 0;\n        // remove duplicate numbers\n        set<int> s(nums.begin(), nums.end());\n        nums.assign(s.begin(), s.end());\n        // hash map to store the frequency of a given set bit count\n        unordered_map<int, int> m;\n        // iterate each number to calculate the set bits\n        for (auto& x : nums) {\n            // count each set bit\n            int cnt = 0;\n            for (int i = 0 ; i < 32; i++) {\n                if ((1 << i) & x) {\n                    cnt += 1;\n                }\n            }\n            m[cnt] += 1;\n            // alternative, we can use __builtin_popcount\n            // i.e. m[__builtin_popcount(x)]++;\n        }\n        // try all possible pairs\n        for (int i = 0; i < 32; i++) {\n            for (int j = 0; j < 32; j++) {\n                if (i + j >= k) {\n                    // if second condition is satisfied,\n                    // then the number of pairs would be m[i] * m[j]\n                    ans += m[i] * m[j] * 1LL;\n                }\n            }\n        }\n        return ans;\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},68906:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(30758);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);