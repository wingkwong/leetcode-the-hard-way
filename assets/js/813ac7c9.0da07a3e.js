"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[54792],{44740:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"0000-0099/zigzag-conversion-medium","title":"0006 - Zigzag Conversion (Medium)","description":"Author: @wkw | https://leetcode.com/problems/zigzag-conversion/","source":"@site/solutions/0000-0099/0006-zigzag-conversion-medium.md","sourceDirName":"0000-0099","slug":"/0000-0099/zigzag-conversion-medium","permalink":"/solutions/0000-0099/zigzag-conversion-medium","draft":false,"unlisted":false,"editUrl":"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0006-zigzag-conversion-medium.md","tags":[{"inline":true,"label":"String","permalink":"/solutions/tags/string"}],"version":"current","sidebarPosition":6,"frontMatter":{"description":"Author: @wkw | https://leetcode.com/problems/zigzag-conversion/","tags":["String"]},"sidebar":"tutorialSidebar","previous":{"title":"0005 - Longest Palindromic Substring (Medium)","permalink":"/solutions/0000-0099/longest-palindromic-substring-medium"},"next":{"title":"0007 - Reverse Integer (Medium)","permalink":"/solutions/0000-0099/reverse-integer-medium"}}');var r=o(86070),i=o(68906);const s={description:"Author: @wkw | https://leetcode.com/problems/zigzag-conversion/",tags:["String"]},c="0006 - Zigzag Conversion (Medium)",l={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Simulation",id:"approach-1-simulation",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{SolutionAuthor:o,TabItem:t,Tabs:s}=n;return o||u("SolutionAuthor",!0),t||u("TabItem",!0),s||u("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"0006---zigzag-conversion-medium",children:"0006 - Zigzag Conversion (Medium)"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/zigzag-conversion/",children:"https://leetcode.com/problems/zigzag-conversion/"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["The string ",(0,r.jsx)(n.code,{children:'"PAYPALISHIRING"'})," is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"P   A   H   N\nA P L S I I G\nY   I   R\n"})}),"\n",(0,r.jsxs)(n.p,{children:["And then read line by line: ",(0,r.jsx)(n.code,{children:'"PAHNAPLSIIGYIR"'})]}),"\n",(0,r.jsx)(n.p,{children:"Write the code that will take a string and make this conversion given a number of rows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"string convert(string s, int numRows);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: s = "PAYPALISHIRING", numRows = 3\nOutput: "PAHNAPLSIIGYIR"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: s = "PAYPALISHIRING", numRows = 4\nOutput: "PINALSIGYAHRPI"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: s = "A", numRows = 1\nOutput: "A"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= s.length <= 1000"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"s"})," consists of English letters (lower-case and upper-case), ",(0,r.jsx)(n.code,{children:"','"})," and ",(0,r.jsx)(n.code,{children:"'.'"}),"."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= numRows <= 1000"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-simulation",children:"Approach 1: Simulation"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsxs)(t,{value:"cpp",label:"C++",children:[(0,r.jsx)(o,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// simulate and add each character to the corresponding row\n// go down -> reach bottom -> go up -> reach top -> go down ...\nclass Solution {\npublic:\n    string convert(string s, int n) {\n        // edge case\n        if (n == 1) return s;\n        vector<string> rows(n);\n        // j is the index to track which rows a character should be added to\n        // d is the direction: -1 means go up, 1 means go down\n        int j = 0, d = 1;\n        for (int i = 0; i < s.size(); i++) {\n            // add the current character to corresponding row\n            rows[j] += s[i];\n            // if it reaches to the last row, we need to go up\n            if(j == n - 1) d = -1;\n            // if it reaches to the first row, we need to go down\n            else if(j == 0) d = 1;\n            // move j pointer\n            j += d;\n        }\n        // rows would look like below in the first example\n        // ['PAHN', 'APLSIIG', 'YIR']\n        // we use `accumulate` to build the final answer (in C++ 20, it takes O(n) only)\n        return accumulate(rows.begin(), rows.end(), string{});\n    }\n};\n"})})]}),(0,r.jsxs)(t,{value:"py",label:"Python",children:[(0,r.jsx)(o,{name:"@wkw"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"# simulate and add each character to the corresponding row\n# go down -> reach bottom -> go up -> reach top -> go down ...\nclass Solution:\n    def convert(self, s: str, n: int) -> str:\n        # edge case\n        if n == 1: return s\n        rows = ['' for _ in range(n)]\n        # j is the index to track which rows a character should be added to\n        # d is the direction: -1 means go up, 1 means go down\n        j, d = 0, 1\n        for i in range(len(s)):\n            # add the current character to corresponding row\n            rows[j] += s[i]\n            # if it reaches to the last row, we need to go up\n            if j == n - 1: d = -1\n            # if it reaches to the first row, we need to go down\n            elif j == 0: d = 1\n            # move j pointer\n            j += d;\n        # rows would look like below in the first example\n        # ['PAHN', 'APLSIIG', 'YIR']\n        # we use join to build the final answer\n        return ''.join(rows)\n"})})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},68906:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var t=o(30758);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);